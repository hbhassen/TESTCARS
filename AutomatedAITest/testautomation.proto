//version 2025.1.0.25

syntax = "proto3";

package testautomation;

service Application {
  rpc GetExecutedBeforeWatchdogRestart(ApplicationGetExecutedBeforeWatchdogRestartRequest) returns (ApplicationGetExecutedBeforeWatchdogRestartReply);
  rpc GetObject(ApplicationGetObjectRequest) returns (ApplicationGetObjectReply);
  rpc GetStatus(ApplicationGetStatusRequest) returns (ApplicationGetStatusReply);
  rpc GetVisible(ApplicationGetVisibleRequest) returns (ApplicationGetVisibleReply);
  rpc Init(ApplicationInitRequest) returns (ApplicationInitReply);
  rpc Lock(ApplicationLockRequest) returns (ApplicationLockReply);
  rpc SetVisible(ApplicationSetVisibleRequest) returns (ApplicationSetVisibleReply);
  rpc SetWatchdog(ApplicationSetWatchdogRequest) returns (ApplicationSetWatchdogReply);
  rpc Unlock(ApplicationUnlockRequest) returns (ApplicationUnlockReply);
  //events
  rpc EventAfterLoadingConfigModel(stream ApplicationEventAfterLoadingConfigModelResult) returns (stream ApplicationEventAfterLoadingConfigModelParams);
  rpc EventBeforeLoadingConfigModel(stream ApplicationEventBeforeLoadingConfigModelResult) returns (stream ApplicationEventBeforeLoadingConfigModelParams);
  rpc EventLoadXcpParameterFileDone(stream ApplicationEventLoadXcpParameterFileDoneResult) returns (stream ApplicationEventLoadXcpParameterFileDoneParams);
  //additional functions
  rpc ReleaseObject(ApplicationReleaseObjectRequest) returns (ApplicationReleaseObjectReply);
  rpc KeepObjectAlive(ApplicationKeepObjectAliveRequest) returns (ApplicationKeepObjectAliveReply);
  rpc CreateReport(ApplicationCreateReportRequest) returns (stream ApplicationCreateReportReply);
}

service Attachment {
  rpc Delete(AttachmentDeleteRequest) returns (AttachmentDeleteReply);
  rpc Export(AttachmentExportRequest) returns (AttachmentExportReply);
  rpc GetCompressedSize(AttachmentGetCompressedSizeRequest) returns (AttachmentGetCompressedSizeReply);
  rpc GetDate(AttachmentGetDateRequest) returns (AttachmentGetDateReply);
  rpc GetLink(AttachmentGetLinkRequest) returns (AttachmentGetLinkReply);
  rpc GetName(AttachmentGetNameRequest) returns (AttachmentGetNameReply);
  rpc GetPath(AttachmentGetPathRequest) returns (AttachmentGetPathReply);
  rpc GetSize(AttachmentGetSizeRequest) returns (AttachmentGetSizeReply);
  rpc GetType(AttachmentGetTypeRequest) returns (AttachmentGetTypeReply);
  rpc SetName(AttachmentSetNameRequest) returns (AttachmentSetNameReply);
}

service BaseMsg {
  rpc GetChannel(BaseMsgGetChannelRequest) returns (BaseMsgGetChannelReply);
  rpc GetHWTimeStamp(BaseMsgGetHWTimeStampRequest) returns (BaseMsgGetHWTimeStampReply);
  rpc GetRx(BaseMsgGetRxRequest) returns (BaseMsgGetRxReply);
  rpc GetSWTimeStamp(BaseMsgGetSWTimeStampRequest) returns (BaseMsgGetSWTimeStampReply);
  rpc SetChannel(BaseMsgSetChannelRequest) returns (BaseMsgSetChannelReply);
}

service BranchSelection {
  rpc Add(BranchSelectionAddRequest) returns (BranchSelectionAddReply);
  rpc GetOrigin(BranchSelectionGetOriginRequest) returns (BranchSelectionGetOriginReply);
  rpc GetTestVersions(BranchSelectionGetTestVersionsRequest) returns (BranchSelectionGetTestVersionsReply);
  rpc Load(BranchSelectionLoadRequest) returns (BranchSelectionLoadReply);
  rpc Remove(BranchSelectionRemoveRequest) returns (BranchSelectionRemoveReply);
  rpc Reset(BranchSelectionResetRequest) returns (BranchSelectionResetReply);
  rpc Save(BranchSelectionSaveRequest) returns (BranchSelectionSaveReply);
}

service CalculatedSignal {
  rpc GetDescription(CalculatedSignalGetDescriptionRequest) returns (CalculatedSignalGetDescriptionReply);
  rpc GetExpression(CalculatedSignalGetExpressionRequest) returns (CalculatedSignalGetExpressionReply);
  rpc GetLowerLimit(CalculatedSignalGetLowerLimitRequest) returns (CalculatedSignalGetLowerLimitReply);
  rpc GetSignal(CalculatedSignalGetSignalRequest) returns (CalculatedSignalGetSignalReply);
  rpc GetUnit(CalculatedSignalGetUnitRequest) returns (CalculatedSignalGetUnitReply);
  rpc GetUpperLimit(CalculatedSignalGetUpperLimitRequest) returns (CalculatedSignalGetUpperLimitReply);
  rpc SetDescription(CalculatedSignalSetDescriptionRequest) returns (CalculatedSignalSetDescriptionReply);
  rpc SetExpression(CalculatedSignalSetExpressionRequest) returns (CalculatedSignalSetExpressionReply);
  rpc SetLowerLimit(CalculatedSignalSetLowerLimitRequest) returns (CalculatedSignalSetLowerLimitReply);
  rpc SetSignal(CalculatedSignalSetSignalRequest) returns (CalculatedSignalSetSignalReply);
  rpc SetUnit(CalculatedSignalSetUnitRequest) returns (CalculatedSignalSetUnitReply);
  rpc SetUpperLimit(CalculatedSignalSetUpperLimitRequest) returns (CalculatedSignalSetUpperLimitReply);
}

service CanEventFilter {
  rpc GetEventMask(CanEventFilterGetEventMaskRequest) returns (CanEventFilterGetEventMaskReply);
  rpc GetPass(CanEventFilterGetPassRequest) returns (CanEventFilterGetPassReply);
  rpc GetRx(CanEventFilterGetRxRequest) returns (CanEventFilterGetRxReply);
  rpc GetTx(CanEventFilterGetTxRequest) returns (CanEventFilterGetTxReply);
  rpc SetEventMask(CanEventFilterSetEventMaskRequest) returns (CanEventFilterSetEventMaskReply);
  rpc SetPass(CanEventFilterSetPassRequest) returns (CanEventFilterSetPassReply);
  rpc SetRx(CanEventFilterSetRxRequest) returns (CanEventFilterSetRxReply);
  rpc SetTx(CanEventFilterSetTxRequest) returns (CanEventFilterSetTxReply);
}

service CanEventMsg {
  rpc GetErrorFrameType(CanEventMsgGetErrorFrameTypeRequest) returns (CanEventMsgGetErrorFrameTypeReply);
  rpc GetEvent(CanEventMsgGetEventRequest) returns (CanEventMsgGetEventReply);
  rpc Send(CanEventMsgSendRequest) returns (CanEventMsgSendReply);
  rpc SetEvent(CanEventMsgSetEventRequest) returns (CanEventMsgSetEventReply);
}

service CanFilter {
  rpc Apply(CanFilterApplyRequest) returns (CanFilterApplyReply);
  rpc GetIdMax(CanFilterGetIdMaxRequest) returns (CanFilterGetIdMaxReply);
  rpc GetIdMin(CanFilterGetIdMinRequest) returns (CanFilterGetIdMinReply);
  rpc GetPass(CanFilterGetPassRequest) returns (CanFilterGetPassReply);
  rpc GetRx(CanFilterGetRxRequest) returns (CanFilterGetRxReply);
  rpc GetTx(CanFilterGetTxRequest) returns (CanFilterGetTxReply);
  rpc SetId(CanFilterSetIdRequest) returns (CanFilterSetIdReply);
  rpc SetIdMax(CanFilterSetIdMaxRequest) returns (CanFilterSetIdMaxReply);
  rpc SetIdMin(CanFilterSetIdMinRequest) returns (CanFilterSetIdMinReply);
  rpc SetName(CanFilterSetNameRequest) returns (CanFilterSetNameReply);
  rpc SetPass(CanFilterSetPassRequest) returns (CanFilterSetPassReply);
  rpc SetRx(CanFilterSetRxRequest) returns (CanFilterSetRxReply);
  rpc SetTx(CanFilterSetTxRequest) returns (CanFilterSetTxReply);
}

service CanMsg {
  rpc GetBitRateSwitch(CanMsgGetBitRateSwitchRequest) returns (CanMsgGetBitRateSwitchReply);
  rpc GetData(CanMsgGetDataRequest) returns (CanMsgGetDataReply);
  rpc GetErrorStateIndicator(CanMsgGetErrorStateIndicatorRequest) returns (CanMsgGetErrorStateIndicatorReply);
  rpc GetExtendedDataLength(CanMsgGetExtendedDataLengthRequest) returns (CanMsgGetExtendedDataLengthReply);
  rpc GetId(CanMsgGetIdRequest) returns (CanMsgGetIdReply);
  rpc GetName(CanMsgGetNameRequest) returns (CanMsgGetNameReply);
  rpc GetSignal(CanMsgGetSignalRequest) returns (CanMsgGetSignalReply);
  rpc GetSignalCount(CanMsgGetSignalCountRequest) returns (CanMsgGetSignalCountReply);
  rpc Send(CanMsgSendRequest) returns (CanMsgSendReply);
  rpc SetBitRateSwitch(CanMsgSetBitRateSwitchRequest) returns (CanMsgSetBitRateSwitchReply);
  rpc SetData(CanMsgSetDataRequest) returns (CanMsgSetDataReply);
  rpc SetExtendedDataLength(CanMsgSetExtendedDataLengthRequest) returns (CanMsgSetExtendedDataLengthReply);
  rpc SetId(CanMsgSetIdRequest) returns (CanMsgSetIdReply);
  rpc SetName(CanMsgSetNameRequest) returns (CanMsgSetNameReply);
}

service CanRemoteMsg {
  rpc GetId(CanRemoteMsgGetIdRequest) returns (CanRemoteMsgGetIdReply);
  rpc GetLength(CanRemoteMsgGetLengthRequest) returns (CanRemoteMsgGetLengthReply);
  rpc GetName(CanRemoteMsgGetNameRequest) returns (CanRemoteMsgGetNameReply);
  rpc Send(CanRemoteMsgSendRequest) returns (CanRemoteMsgSendReply);
  rpc SetId(CanRemoteMsgSetIdRequest) returns (CanRemoteMsgSetIdReply);
  rpc SetLength(CanRemoteMsgSetLengthRequest) returns (CanRemoteMsgSetLengthReply);
  rpc SetName(CanRemoteMsgSetNameRequest) returns (CanRemoteMsgSetNameReply);
}

service CanSignal {
  rpc GetComment(CanSignalGetCommentRequest) returns (CanSignalGetCommentReply);
  rpc GetName(CanSignalGetNameRequest) returns (CanSignalGetNameReply);
  rpc GetRawValue(CanSignalGetRawValueRequest) returns (CanSignalGetRawValueReply);
  rpc GetUnit(CanSignalGetUnitRequest) returns (CanSignalGetUnitReply);
  rpc GetValue(CanSignalGetValueRequest) returns (CanSignalGetValueReply);
  rpc SetRawValue(CanSignalSetRawValueRequest) returns (CanSignalSetRawValueReply);
  rpc SetValue(CanSignalSetValueRequest) returns (CanSignalSetValueReply);
}

service CreateRemoveSignal {
  rpc GetAddress(CreateRemoveSignalGetAddressRequest) returns (CreateRemoveSignalGetAddressReply);
  rpc GetAttributes(CreateRemoveSignalGetAttributesRequest) returns (CreateRemoveSignalGetAttributesReply);
  rpc GetCoefficients(CreateRemoveSignalGetCoefficientsRequest) returns (CreateRemoveSignalGetCoefficientsReply);
  rpc GetDataType(CreateRemoveSignalGetDataTypeRequest) returns (CreateRemoveSignalGetDataTypeReply);
  rpc GetDescription(CreateRemoveSignalGetDescriptionRequest) returns (CreateRemoveSignalGetDescriptionReply);
  rpc GetDimensions(CreateRemoveSignalGetDimensionsRequest) returns (CreateRemoveSignalGetDimensionsReply);
  rpc GetHidden(CreateRemoveSignalGetHiddenRequest) returns (CreateRemoveSignalGetHiddenReply);
  rpc GetLowerLimit(CreateRemoveSignalGetLowerLimitRequest) returns (CreateRemoveSignalGetLowerLimitReply);
  rpc GetProcessorIndex(CreateRemoveSignalGetProcessorIndexRequest) returns (CreateRemoveSignalGetProcessorIndexReply);
  rpc GetReadOnly(CreateRemoveSignalGetReadOnlyRequest) returns (CreateRemoveSignalGetReadOnlyReply);
  rpc GetResetValue(CreateRemoveSignalGetResetValueRequest) returns (CreateRemoveSignalGetResetValueReply);
  rpc GetSignal(CreateRemoveSignalGetSignalRequest) returns (CreateRemoveSignalGetSignalReply);
  rpc GetSignalValueTextMapping(CreateRemoveSignalGetSignalValueTextMappingRequest) returns (CreateRemoveSignalGetSignalValueTextMappingReply);
  rpc GetUnit(CreateRemoveSignalGetUnitRequest) returns (CreateRemoveSignalGetUnitReply);
  rpc GetUpperLimit(CreateRemoveSignalGetUpperLimitRequest) returns (CreateRemoveSignalGetUpperLimitReply);
  rpc SetAddress(CreateRemoveSignalSetAddressRequest) returns (CreateRemoveSignalSetAddressReply);
  rpc SetDataType(CreateRemoveSignalSetDataTypeRequest) returns (CreateRemoveSignalSetDataTypeReply);
  rpc SetDescription(CreateRemoveSignalSetDescriptionRequest) returns (CreateRemoveSignalSetDescriptionReply);
  rpc SetDimensions(CreateRemoveSignalSetDimensionsRequest) returns (CreateRemoveSignalSetDimensionsReply);
  rpc SetHidden(CreateRemoveSignalSetHiddenRequest) returns (CreateRemoveSignalSetHiddenReply);
  rpc SetLowerLimit(CreateRemoveSignalSetLowerLimitRequest) returns (CreateRemoveSignalSetLowerLimitReply);
  rpc SetProcessorIndex(CreateRemoveSignalSetProcessorIndexRequest) returns (CreateRemoveSignalSetProcessorIndexReply);
  rpc SetReadOnly(CreateRemoveSignalSetReadOnlyRequest) returns (CreateRemoveSignalSetReadOnlyReply);
  rpc SetResetValue(CreateRemoveSignalSetResetValueRequest) returns (CreateRemoveSignalSetResetValueReply);
  rpc SetSignal(CreateRemoveSignalSetSignalRequest) returns (CreateRemoveSignalSetSignalReply);
  rpc SetSignalValueTextMapping(CreateRemoveSignalSetSignalValueTextMappingRequest) returns (CreateRemoveSignalSetSignalValueTextMappingReply);
  rpc SetUnit(CreateRemoveSignalSetUnitRequest) returns (CreateRemoveSignalSetUnitReply);
  rpc SetUpperLimit(CreateRemoveSignalSetUpperLimitRequest) returns (CreateRemoveSignalSetUpperLimitReply);
}

service Dgn {
  rpc Activate(DgnActivateRequest) returns (DgnActivateReply);
  rpc GetDiagServerVersion(DgnGetDiagServerVersionRequest) returns (DgnGetDiagServerVersionReply);
  rpc GetDoIPInfo(DgnGetDoIPInfoRequest) returns (DgnGetDoIPInfoReply);
  rpc GetDtcs(DgnGetDtcsRequest) returns (DgnGetDtcsReply);
  rpc GetEcus(DgnGetEcusRequest) returns (DgnGetEcusReply);
  rpc GetInterfaceResources(DgnGetInterfaceResourcesRequest) returns (DgnGetInterfaceResourcesReply);
  rpc GetInterfaces(DgnGetInterfacesRequest) returns (DgnGetInterfacesReply);
  rpc GetIsStarted(DgnGetIsStartedRequest) returns (DgnGetIsStartedReply);
  rpc GetJob(DgnGetJobRequest) returns (DgnGetJobReply);
  rpc GetJobs(DgnGetJobsRequest) returns (DgnGetJobsReply);
  rpc GetProjects(DgnGetProjectsRequest) returns (DgnGetProjectsReply);
  rpc GetService(DgnGetServiceRequest) returns (DgnGetServiceReply);
  rpc GetServices(DgnGetServicesRequest) returns (DgnGetServicesReply);
  rpc GetVehicleInformations(DgnGetVehicleInformationsRequest) returns (DgnGetVehicleInformationsReply);
  rpc LoadAed(DgnLoadAedRequest) returns (DgnLoadAedReply);
  rpc LoadFlashFile(DgnLoadFlashFileRequest) returns (DgnLoadFlashFileReply);
  rpc LoadProject(DgnLoadProjectRequest) returns (DgnLoadProjectReply);
  rpc ReinitDoIP(DgnReinitDoIPRequest) returns (DgnReinitDoIPReply);
  rpc Reset(DgnResetRequest) returns (DgnResetReply);
  rpc SaveAed(DgnSaveAedRequest) returns (DgnSaveAedReply);
  rpc StartMonitoringDoIP(DgnStartMonitoringDoIPRequest) returns (DgnStartMonitoringDoIPReply);
  rpc StopMonitoringDoIP(DgnStopMonitoringDoIPRequest) returns (DgnStopMonitoringDoIPReply);
  rpc UnloadFlashFiles(DgnUnloadFlashFilesRequest) returns (DgnUnloadFlashFilesReply);
}

service DgnCodingDomain {
  rpc GetCodeString(DgnCodingDomainGetCodeStringRequest) returns (DgnCodingDomainGetCodeStringReply);
  rpc GetDescription(DgnCodingDomainGetDescriptionRequest) returns (DgnCodingDomainGetDescriptionReply);
  rpc GetDID(DgnCodingDomainGetDIDRequest) returns (DgnCodingDomainGetDIDReply);
  rpc GetDomainName(DgnCodingDomainGetDomainNameRequest) returns (DgnCodingDomainGetDomainNameReply);
  rpc GetFragments(DgnCodingDomainGetFragmentsRequest) returns (DgnCodingDomainGetFragmentsReply);
  rpc GetLastResultRead(DgnCodingDomainGetLastResultReadRequest) returns (DgnCodingDomainGetLastResultReadReply);
  rpc GetLastResultWrite(DgnCodingDomainGetLastResultWriteRequest) returns (DgnCodingDomainGetLastResultWriteReply);
  rpc GetLongName(DgnCodingDomainGetLongNameRequest) returns (DgnCodingDomainGetLongNameReply);
  rpc GetName(DgnCodingDomainGetNameRequest) returns (DgnCodingDomainGetNameReply);
  rpc GetSID(DgnCodingDomainGetSIDRequest) returns (DgnCodingDomainGetSIDReply);
  rpc GetSync(DgnCodingDomainGetSyncRequest) returns (DgnCodingDomainGetSyncReply);
  rpc GetVcdQualifier(DgnCodingDomainGetVcdQualifierRequest) returns (DgnCodingDomainGetVcdQualifierReply);
  rpc ReadCoding(DgnCodingDomainReadCodingRequest) returns (DgnCodingDomainReadCodingReply);
  rpc ReadCodingAsync(DgnCodingDomainReadCodingAsyncRequest) returns (DgnCodingDomainReadCodingAsyncReply);
  rpc SetCodeString(DgnCodingDomainSetCodeStringRequest) returns (DgnCodingDomainSetCodeStringReply);
  rpc WaitForResultRead(DgnCodingDomainWaitForResultReadRequest) returns (DgnCodingDomainWaitForResultReadReply);
  rpc WaitForResultWrite(DgnCodingDomainWaitForResultWriteRequest) returns (DgnCodingDomainWaitForResultWriteReply);
  rpc WriteCoding(DgnCodingDomainWriteCodingRequest) returns (DgnCodingDomainWriteCodingReply);
  rpc WriteCodingAsync(DgnCodingDomainWriteCodingAsyncRequest) returns (DgnCodingDomainWriteCodingAsyncReply);
}

service DgnCodingDomains {
  rpc GetCount(DgnCodingDomainsGetCountRequest) returns (DgnCodingDomainsGetCountReply);
  rpc GetItem(DgnCodingDomainsGetItemRequest) returns (DgnCodingDomainsGetItemReply);
  rpc ReadCodings(DgnCodingDomainsReadCodingsRequest) returns (DgnCodingDomainsReadCodingsReply);
  rpc WriteCodings(DgnCodingDomainsWriteCodingsRequest) returns (DgnCodingDomainsWriteCodingsReply);
}

service DgnDbResponse {
  rpc GetCount(DgnDbResponseGetCountRequest) returns (DgnDbResponseGetCountReply);
  rpc GetDescription(DgnDbResponseGetDescriptionRequest) returns (DgnDbResponseGetDescriptionReply);
  rpc GetLongName(DgnDbResponseGetLongNameRequest) returns (DgnDbResponseGetLongNameReply);
  rpc GetName(DgnDbResponseGetNameRequest) returns (DgnDbResponseGetNameReply);
  rpc GetParam(DgnDbResponseGetParamRequest) returns (DgnDbResponseGetParamReply);
  rpc GetType(DgnDbResponseGetTypeRequest) returns (DgnDbResponseGetTypeReply);
}

service DgnDbResponseParam {
  rpc GetCount(DgnDbResponseParamGetCountRequest) returns (DgnDbResponseParamGetCountReply);
  rpc GetDescription(DgnDbResponseParamGetDescriptionRequest) returns (DgnDbResponseParamGetDescriptionReply);
  rpc GetIndex(DgnDbResponseParamGetIndexRequest) returns (DgnDbResponseParamGetIndexReply);
  rpc GetLongName(DgnDbResponseParamGetLongNameRequest) returns (DgnDbResponseParamGetLongNameReply);
  rpc GetName(DgnDbResponseParamGetNameRequest) returns (DgnDbResponseParamGetNameReply);
  rpc GetParam(DgnDbResponseParamGetParamRequest) returns (DgnDbResponseParamGetParamReply);
  rpc GetType(DgnDbResponseParamGetTypeRequest) returns (DgnDbResponseParamGetTypeReply);
  rpc GetUnit(DgnDbResponseParamGetUnitRequest) returns (DgnDbResponseParamGetUnitReply);
  rpc GetValidValues(DgnDbResponseParamGetValidValuesRequest) returns (DgnDbResponseParamGetValidValuesReply);
}

service DgnDtc {
  rpc GetCode(DgnDtcGetCodeRequest) returns (DgnDtcGetCodeReply);
  rpc GetDescription(DgnDtcGetDescriptionRequest) returns (DgnDtcGetDescriptionReply);
  rpc GetLevel(DgnDtcGetLevelRequest) returns (DgnDtcGetLevelReply);
  rpc GetLongName(DgnDtcGetLongNameRequest) returns (DgnDtcGetLongNameReply);
  rpc GetName(DgnDtcGetNameRequest) returns (DgnDtcGetNameReply);
  rpc GetText(DgnDtcGetTextRequest) returns (DgnDtcGetTextReply);
}

service DgnDtcs {
  rpc GetCount(DgnDtcsGetCountRequest) returns (DgnDtcsGetCountReply);
  rpc GetItem(DgnDtcsGetItemRequest) returns (DgnDtcsGetItemReply);
}

service DgnEcu {
  rpc GetActivated(DgnEcuGetActivatedRequest) returns (DgnEcuGetActivatedReply);
  rpc GetCheckVariantOnActivation(DgnEcuGetCheckVariantOnActivationRequest) returns (DgnEcuGetCheckVariantOnActivationReply);
  rpc GetCodingDomains(DgnEcuGetCodingDomainsRequest) returns (DgnEcuGetCodingDomainsReply);
  rpc GetDataVersion(DgnEcuGetDataVersionRequest) returns (DgnEcuGetDataVersionReply);
  rpc GetDescription(DgnEcuGetDescriptionRequest) returns (DgnEcuGetDescriptionReply);
  rpc GetDtcs(DgnEcuGetDtcsRequest) returns (DgnEcuGetDtcsReply);
  rpc GetExtendedSession(DgnEcuGetExtendedSessionRequest) returns (DgnEcuGetExtendedSessionReply);
  rpc GetJobs(DgnEcuGetJobsRequest) returns (DgnEcuGetJobsReply);
  rpc GetLogicalLink(DgnEcuGetLogicalLinkRequest) returns (DgnEcuGetLogicalLinkReply);
  rpc GetLogicalLinks(DgnEcuGetLogicalLinksRequest) returns (DgnEcuGetLogicalLinksReply);
  rpc GetLongName(DgnEcuGetLongNameRequest) returns (DgnEcuGetLongNameReply);
  rpc GetName(DgnEcuGetNameRequest) returns (DgnEcuGetNameReply);
  rpc GetServices(DgnEcuGetServicesRequest) returns (DgnEcuGetServicesReply);
  rpc GetSync(DgnEcuGetSyncRequest) returns (DgnEcuGetSyncReply);
  rpc GetVariant(DgnEcuGetVariantRequest) returns (DgnEcuGetVariantReply);
  rpc GetVariants(DgnEcuGetVariantsRequest) returns (DgnEcuGetVariantsReply);
  rpc ResetSync(DgnEcuResetSyncRequest) returns (DgnEcuResetSyncReply);
  rpc SetCheckVariantOnActivation(DgnEcuSetCheckVariantOnActivationRequest) returns (DgnEcuSetCheckVariantOnActivationReply);
  rpc SetExtendedSession(DgnEcuSetExtendedSessionRequest) returns (DgnEcuSetExtendedSessionReply);
  rpc SetLogicalLink(DgnEcuSetLogicalLinkRequest) returns (DgnEcuSetLogicalLinkReply);
  rpc SetVariant(DgnEcuSetVariantRequest) returns (DgnEcuSetVariantReply);
}

service DgnEcus {
  rpc GetCount(DgnEcusGetCountRequest) returns (DgnEcusGetCountReply);
  rpc GetItem(DgnEcusGetItemRequest) returns (DgnEcusGetItemReply);
}

service DgnError {
  rpc GetCode(DgnErrorGetCodeRequest) returns (DgnErrorGetCodeReply);
  rpc GetDescription(DgnErrorGetDescriptionRequest) returns (DgnErrorGetDescriptionReply);
  rpc GetVendorCode(DgnErrorGetVendorCodeRequest) returns (DgnErrorGetVendorCodeReply);
  rpc GetVendorDescription(DgnErrorGetVendorDescriptionRequest) returns (DgnErrorGetVendorDescriptionReply);
}

service DgnFragments {
  rpc GetCount(DgnFragmentsGetCountRequest) returns (DgnFragmentsGetCountReply);
  rpc GetItem(DgnFragmentsGetItemRequest) returns (DgnFragmentsGetItemReply);
}

service DgnJob {
  rpc Execute(DgnJobExecuteRequest) returns (DgnJobExecuteReply);
  rpc ExecuteAsync(DgnJobExecuteAsyncRequest) returns (DgnJobExecuteAsyncReply);
  rpc GetCount(DgnJobGetCountRequest) returns (DgnJobGetCountReply);
  rpc GetDbResponse(DgnJobGetDbResponseRequest) returns (DgnJobGetDbResponseReply);
  rpc GetDbResponseCount(DgnJobGetDbResponseCountRequest) returns (DgnJobGetDbResponseCountReply);
  rpc GetDescription(DgnJobGetDescriptionRequest) returns (DgnJobGetDescriptionReply);
  rpc GetEcuName(DgnJobGetEcuNameRequest) returns (DgnJobGetEcuNameReply);
  rpc GetFlashPriority(DgnJobGetFlashPriorityRequest) returns (DgnJobGetFlashPriorityReply);
  rpc GetLastResult(DgnJobGetLastResultRequest) returns (DgnJobGetLastResultReply);
  rpc GetLongName(DgnJobGetLongNameRequest) returns (DgnJobGetLongNameReply);
  rpc GetName(DgnJobGetNameRequest) returns (DgnJobGetNameReply);
  rpc GetParam(DgnJobGetParamRequest) returns (DgnJobGetParamReply);
  rpc GetProgress(DgnJobGetProgressRequest) returns (DgnJobGetProgressReply);
  rpc GetSemantic(DgnJobGetSemanticRequest) returns (DgnJobGetSemanticReply);
  rpc GetSpecialDataKeys(DgnJobGetSpecialDataKeysRequest) returns (DgnJobGetSpecialDataKeysReply);
  rpc GetSpecialDataValue(DgnJobGetSpecialDataValueRequest) returns (DgnJobGetSpecialDataValueReply);
  rpc WaitForResult(DgnJobWaitForResultRequest) returns (DgnJobWaitForResultReply);
}

service DgnJobs {
  rpc GetCount(DgnJobsGetCountRequest) returns (DgnJobsGetCountReply);
  rpc GetItem(DgnJobsGetItemRequest) returns (DgnJobsGetItemReply);
}

service DgnParam {
  rpc GetBitLength(DgnParamGetBitLengthRequest) returns (DgnParamGetBitLengthReply);
  rpc GetBitPosition(DgnParamGetBitPositionRequest) returns (DgnParamGetBitPositionReply);
  rpc GetByteLength(DgnParamGetByteLengthRequest) returns (DgnParamGetByteLengthReply);
  rpc GetBytePosition(DgnParamGetBytePositionRequest) returns (DgnParamGetBytePositionReply);
  rpc GetCount(DgnParamGetCountRequest) returns (DgnParamGetCountReply);
  rpc GetDefaultValue(DgnParamGetDefaultValueRequest) returns (DgnParamGetDefaultValueReply);
  rpc GetDescription(DgnParamGetDescriptionRequest) returns (DgnParamGetDescriptionReply);
  rpc GetIndex(DgnParamGetIndexRequest) returns (DgnParamGetIndexReply);
  rpc GetLongName(DgnParamGetLongNameRequest) returns (DgnParamGetLongNameReply);
  rpc GetMaxValue(DgnParamGetMaxValueRequest) returns (DgnParamGetMaxValueReply);
  rpc GetMinValue(DgnParamGetMinValueRequest) returns (DgnParamGetMinValueReply);
  rpc GetName(DgnParamGetNameRequest) returns (DgnParamGetNameReply);
  rpc GetParam(DgnParamGetParamRequest) returns (DgnParamGetParamReply);
  rpc GetReadOnly(DgnParamGetReadOnlyRequest) returns (DgnParamGetReadOnlyReply);
  rpc GetType(DgnParamGetTypeRequest) returns (DgnParamGetTypeReply);
  rpc GetUnit(DgnParamGetUnitRequest) returns (DgnParamGetUnitReply);
  rpc GetValidValues(DgnParamGetValidValuesRequest) returns (DgnParamGetValidValuesReply);
  rpc GetValue(DgnParamGetValueRequest) returns (DgnParamGetValueReply);
  rpc SetValue(DgnParamSetValueRequest) returns (DgnParamSetValueReply);
}

service DgnResponse {
  rpc GetCount(DgnResponseGetCountRequest) returns (DgnResponseGetCountReply);
  rpc GetDescription(DgnResponseGetDescriptionRequest) returns (DgnResponseGetDescriptionReply);
  rpc GetError(DgnResponseGetErrorRequest) returns (DgnResponseGetErrorReply);
  rpc GetLongName(DgnResponseGetLongNameRequest) returns (DgnResponseGetLongNameReply);
  rpc GetName(DgnResponseGetNameRequest) returns (DgnResponseGetNameReply);
  rpc GetParam(DgnResponseGetParamRequest) returns (DgnResponseGetParamReply);
  rpc GetResponseMessage(DgnResponseGetResponseMessageRequest) returns (DgnResponseGetResponseMessageReply);
  rpc GetType(DgnResponseGetTypeRequest) returns (DgnResponseGetTypeReply);
}

service DgnResponseParam {
  rpc GetCount(DgnResponseParamGetCountRequest) returns (DgnResponseParamGetCountReply);
  rpc GetDescription(DgnResponseParamGetDescriptionRequest) returns (DgnResponseParamGetDescriptionReply);
  rpc GetDtc(DgnResponseParamGetDtcRequest) returns (DgnResponseParamGetDtcReply);
  rpc GetDTCText(DgnResponseParamGetDTCTextRequest) returns (DgnResponseParamGetDTCTextReply);
  rpc GetError(DgnResponseParamGetErrorRequest) returns (DgnResponseParamGetErrorReply);
  rpc GetIndex(DgnResponseParamGetIndexRequest) returns (DgnResponseParamGetIndexReply);
  rpc GetLongName(DgnResponseParamGetLongNameRequest) returns (DgnResponseParamGetLongNameReply);
  rpc GetName(DgnResponseParamGetNameRequest) returns (DgnResponseParamGetNameReply);
  rpc GetParam(DgnResponseParamGetParamRequest) returns (DgnResponseParamGetParamReply);
  rpc GetType(DgnResponseParamGetTypeRequest) returns (DgnResponseParamGetTypeReply);
  rpc GetUnit(DgnResponseParamGetUnitRequest) returns (DgnResponseParamGetUnitReply);
  rpc GetValue(DgnResponseParamGetValueRequest) returns (DgnResponseParamGetValueReply);
  rpc GetValueAsString(DgnResponseParamGetValueAsStringRequest) returns (DgnResponseParamGetValueAsStringReply);
  rpc GetValueRangeInfo(DgnResponseParamGetValueRangeInfoRequest) returns (DgnResponseParamGetValueRangeInfoReply);
}

service DgnResult {
  rpc GetCount(DgnResultGetCountRequest) returns (DgnResultGetCountReply);
  rpc GetError(DgnResultGetErrorRequest) returns (DgnResultGetErrorReply);
  rpc GetExecutionState(DgnResultGetExecutionStateRequest) returns (DgnResultGetExecutionStateReply);
  rpc GetResponse(DgnResultGetResponseRequest) returns (DgnResultGetResponseReply);
  rpc GetType(DgnResultGetTypeRequest) returns (DgnResultGetTypeReply);
}

service DgnService {
  rpc Execute(DgnServiceExecuteRequest) returns (DgnServiceExecuteReply);
  rpc ExecuteAsync(DgnServiceExecuteAsyncRequest) returns (DgnServiceExecuteAsyncReply);
  rpc GetCount(DgnServiceGetCountRequest) returns (DgnServiceGetCountReply);
  rpc GetDbResponse(DgnServiceGetDbResponseRequest) returns (DgnServiceGetDbResponseReply);
  rpc GetDbResponseCount(DgnServiceGetDbResponseCountRequest) returns (DgnServiceGetDbResponseCountReply);
  rpc GetDescription(DgnServiceGetDescriptionRequest) returns (DgnServiceGetDescriptionReply);
  rpc GetEcuName(DgnServiceGetEcuNameRequest) returns (DgnServiceGetEcuNameReply);
  rpc GetLastResult(DgnServiceGetLastResultRequest) returns (DgnServiceGetLastResultReply);
  rpc GetLongName(DgnServiceGetLongNameRequest) returns (DgnServiceGetLongNameReply);
  rpc GetName(DgnServiceGetNameRequest) returns (DgnServiceGetNameReply);
  rpc GetParam(DgnServiceGetParamRequest) returns (DgnServiceGetParamReply);
  rpc GetRequestMessage(DgnServiceGetRequestMessageRequest) returns (DgnServiceGetRequestMessageReply);
  rpc GetSemantic(DgnServiceGetSemanticRequest) returns (DgnServiceGetSemanticReply);
  rpc GetSpecialDataKeys(DgnServiceGetSpecialDataKeysRequest) returns (DgnServiceGetSpecialDataKeysReply);
  rpc GetSpecialDataValue(DgnServiceGetSpecialDataValueRequest) returns (DgnServiceGetSpecialDataValueReply);
  rpc SetRequestMessage(DgnServiceSetRequestMessageRequest) returns (DgnServiceSetRequestMessageReply);
  rpc WaitForResult(DgnServiceWaitForResultRequest) returns (DgnServiceWaitForResultReply);
}

service DgnServices {
  rpc GetCount(DgnServicesGetCountRequest) returns (DgnServicesGetCountReply);
  rpc GetItem(DgnServicesGetItemRequest) returns (DgnServicesGetItemReply);
}

service DltControlRequestMsg {
  rpc GetData(DltControlRequestMsgGetDataRequest) returns (DltControlRequestMsgGetDataReply);
  rpc Send(DltControlRequestMsgSendRequest) returns (DltControlRequestMsgSendReply);
  rpc SetApplicationId(DltControlRequestMsgSetApplicationIdRequest) returns (DltControlRequestMsgSetApplicationIdReply);
  rpc SetContextId(DltControlRequestMsgSetContextIdRequest) returns (DltControlRequestMsgSetContextIdReply);
  rpc SetEcuId(DltControlRequestMsgSetEcuIdRequest) returns (DltControlRequestMsgSetEcuIdReply);
  rpc SetMostSignificantByteFirst(DltControlRequestMsgSetMostSignificantByteFirstRequest) returns (DltControlRequestMsgSetMostSignificantByteFirstReply);
  rpc SetParameters(DltControlRequestMsgSetParametersRequest) returns (DltControlRequestMsgSetParametersReply);
  rpc SetServiceId(DltControlRequestMsgSetServiceIdRequest) returns (DltControlRequestMsgSetServiceIdReply);
  rpc SetSessionId(DltControlRequestMsgSetSessionIdRequest) returns (DltControlRequestMsgSetSessionIdReply);
  rpc SetTimeStamp(DltControlRequestMsgSetTimeStampRequest) returns (DltControlRequestMsgSetTimeStampReply);
}

service DltFilter {
  rpc GetApplicationId(DltFilterGetApplicationIdRequest) returns (DltFilterGetApplicationIdReply);
  rpc GetContextId(DltFilterGetContextIdRequest) returns (DltFilterGetContextIdReply);
  rpc GetEcuId(DltFilterGetEcuIdRequest) returns (DltFilterGetEcuIdReply);
  rpc GetPass(DltFilterGetPassRequest) returns (DltFilterGetPassReply);
  rpc GetRx(DltFilterGetRxRequest) returns (DltFilterGetRxReply);
  rpc GetSessionIdMax(DltFilterGetSessionIdMaxRequest) returns (DltFilterGetSessionIdMaxReply);
  rpc GetSessionIdMin(DltFilterGetSessionIdMinRequest) returns (DltFilterGetSessionIdMinReply);
  rpc GetTx(DltFilterGetTxRequest) returns (DltFilterGetTxReply);
  rpc SetApplicationId(DltFilterSetApplicationIdRequest) returns (DltFilterSetApplicationIdReply);
  rpc SetContextId(DltFilterSetContextIdRequest) returns (DltFilterSetContextIdReply);
  rpc SetEcuId(DltFilterSetEcuIdRequest) returns (DltFilterSetEcuIdReply);
  rpc SetPass(DltFilterSetPassRequest) returns (DltFilterSetPassReply);
  rpc SetRx(DltFilterSetRxRequest) returns (DltFilterSetRxReply);
  rpc SetSessionId(DltFilterSetSessionIdRequest) returns (DltFilterSetSessionIdReply);
  rpc SetSessionIdMax(DltFilterSetSessionIdMaxRequest) returns (DltFilterSetSessionIdMaxReply);
  rpc SetSessionIdMin(DltFilterSetSessionIdMinRequest) returns (DltFilterSetSessionIdMinReply);
  rpc SetTx(DltFilterSetTxRequest) returns (DltFilterSetTxReply);
}

service DltMsg {
  rpc GetApplicationId(DltMsgGetApplicationIdRequest) returns (DltMsgGetApplicationIdReply);
  rpc GetContextId(DltMsgGetContextIdRequest) returns (DltMsgGetContextIdReply);
  rpc GetData(DltMsgGetDataRequest) returns (DltMsgGetDataReply);
  rpc GetEcuId(DltMsgGetEcuIdRequest) returns (DltMsgGetEcuIdReply);
  rpc GetSessionId(DltMsgGetSessionIdRequest) returns (DltMsgGetSessionIdReply);
  rpc GetText(DltMsgGetTextRequest) returns (DltMsgGetTextReply);
  rpc GetTimeStamp(DltMsgGetTimeStampRequest) returns (DltMsgGetTimeStampReply);
}

service Evaluation {
  rpc AddSignalsToExtractFromMessages(EvaluationAddSignalsToExtractFromMessagesRequest) returns (EvaluationAddSignalsToExtractFromMessagesReply);
  rpc Close(EvaluationCloseRequest) returns (EvaluationCloseReply);
  rpc Convert(EvaluationConvertRequest) returns (EvaluationConvertReply);
  rpc ExtractSignalsFromMessages(EvaluationExtractSignalsFromMessagesRequest) returns (EvaluationExtractSignalsFromMessagesReply);
  rpc GetDate(EvaluationGetDateRequest) returns (EvaluationGetDateReply);
  rpc GetMessage(EvaluationGetMessageRequest) returns (EvaluationGetMessageReply);
  rpc GetMessageChannels(EvaluationGetMessageChannelsRequest) returns (EvaluationGetMessageChannelsReply);
  rpc GetRemarks(EvaluationGetRemarksRequest) returns (EvaluationGetRemarksReply);
  rpc GetSampleCount(EvaluationGetSampleCountRequest) returns (EvaluationGetSampleCountReply);
  rpc GetSamplingRate(EvaluationGetSamplingRateRequest) returns (EvaluationGetSamplingRateReply);
  rpc GetSignalArray(EvaluationGetSignalArrayRequest) returns (EvaluationGetSignalArrayReply);
  rpc GetSignals(EvaluationGetSignalsRequest) returns (EvaluationGetSignalsReply);
  rpc GetStartTime(EvaluationGetStartTimeRequest) returns (EvaluationGetStartTimeReply);
  rpc GetTitle(EvaluationGetTitleRequest) returns (EvaluationGetTitleReply);
  rpc GetVideoAudioContainers(EvaluationGetVideoAudioContainersRequest) returns (EvaluationGetVideoAudioContainersReply);
  rpc Open(EvaluationOpenRequest) returns (EvaluationOpenReply);
  rpc SetMessageFilter(EvaluationSetMessageFilterRequest) returns (EvaluationSetMessageFilterReply);
  //events
  rpc EventChangeProperties(stream EvaluationEventChangePropertiesResult) returns (stream EvaluationEventChangePropertiesParams);
}

service ExecutedItem {
  rpc GetExecutionMode(ExecutedItemGetExecutionModeRequest) returns (ExecutedItemGetExecutionModeReply);
  rpc GetPath(ExecutedItemGetPathRequest) returns (ExecutedItemGetPathReply);
  rpc GetRunning(ExecutedItemGetRunningRequest) returns (ExecutedItemGetRunningReply);
  rpc GetTestResult(ExecutedItemGetTestResultRequest) returns (ExecutedItemGetTestResultReply);
  rpc Stop(ExecutedItemStopRequest) returns (ExecutedItemStopReply);
}

service FaultSim {
  rpc Activate(FaultSimActivateRequest) returns (FaultSimActivateReply);
  rpc BusSetFault(FaultSimBusSetFaultRequest) returns (FaultSimBusSetFaultReply);
  rpc CANConnectMember(FaultSimCANConnectMemberRequest) returns (FaultSimCANConnectMemberReply);
  rpc CANSetFault(FaultSimCANSetFaultRequest) returns (FaultSimCANSetFaultReply);
  rpc CANSetFault2(FaultSimCANSetFault2Request) returns (FaultSimCANSetFault2Reply);
  rpc ConnectAux(FaultSimConnectAuxRequest) returns (FaultSimConnectAuxReply);
  rpc ConnectAux2(FaultSimConnectAux2Request) returns (FaultSimConnectAux2Reply);
  rpc ConnectCable(FaultSimConnectCableRequest) returns (FaultSimConnectCableReply);
  rpc ConnectMeasure(FaultSimConnectMeasureRequest) returns (FaultSimConnectMeasureReply);
  rpc ConnectRail(FaultSimConnectRailRequest) returns (FaultSimConnectRailReply);
  rpc LoadPattern(FaultSimLoadPatternRequest) returns (FaultSimLoadPatternReply);
  rpc Reset(FaultSimResetRequest) returns (FaultSimResetReply);
  rpc SavePattern(FaultSimSavePatternRequest) returns (FaultSimSavePatternReply);
  rpc SetResistance(FaultSimSetResistanceRequest) returns (FaultSimSetResistanceReply);
  rpc SetTimings(FaultSimSetTimingsRequest) returns (FaultSimSetTimingsReply);
}

service FlexRayFilter {
  rpc GetBaseCycle(FlexRayFilterGetBaseCycleRequest) returns (FlexRayFilterGetBaseCycleReply);
  rpc GetBits(FlexRayFilterGetBitsRequest) returns (FlexRayFilterGetBitsReply);
  rpc GetCycleRepetition(FlexRayFilterGetCycleRepetitionRequest) returns (FlexRayFilterGetCycleRepetitionReply);
  rpc GetMask(FlexRayFilterGetMaskRequest) returns (FlexRayFilterGetMaskReply);
  rpc GetName(FlexRayFilterGetNameRequest) returns (FlexRayFilterGetNameReply);
  rpc GetPass(FlexRayFilterGetPassRequest) returns (FlexRayFilterGetPassReply);
  rpc GetRx(FlexRayFilterGetRxRequest) returns (FlexRayFilterGetRxReply);
  rpc GetSlotIdMax(FlexRayFilterGetSlotIdMaxRequest) returns (FlexRayFilterGetSlotIdMaxReply);
  rpc GetSlotIdMin(FlexRayFilterGetSlotIdMinRequest) returns (FlexRayFilterGetSlotIdMinReply);
  rpc GetTx(FlexRayFilterGetTxRequest) returns (FlexRayFilterGetTxReply);
  rpc SetBaseCycle(FlexRayFilterSetBaseCycleRequest) returns (FlexRayFilterSetBaseCycleReply);
  rpc SetBits(FlexRayFilterSetBitsRequest) returns (FlexRayFilterSetBitsReply);
  rpc SetCycleRepetition(FlexRayFilterSetCycleRepetitionRequest) returns (FlexRayFilterSetCycleRepetitionReply);
  rpc SetMask(FlexRayFilterSetMaskRequest) returns (FlexRayFilterSetMaskReply);
  rpc SetName(FlexRayFilterSetNameRequest) returns (FlexRayFilterSetNameReply);
  rpc SetPass(FlexRayFilterSetPassRequest) returns (FlexRayFilterSetPassReply);
  rpc SetRx(FlexRayFilterSetRxRequest) returns (FlexRayFilterSetRxReply);
  rpc SetSlotId(FlexRayFilterSetSlotIdRequest) returns (FlexRayFilterSetSlotIdReply);
  rpc SetSlotIdMax(FlexRayFilterSetSlotIdMaxRequest) returns (FlexRayFilterSetSlotIdMaxReply);
  rpc SetSlotIdMin(FlexRayFilterSetSlotIdMinRequest) returns (FlexRayFilterSetSlotIdMinReply);
  rpc SetTx(FlexRayFilterSetTxRequest) returns (FlexRayFilterSetTxReply);
}

service FlexRayMsg {
  rpc GetBits(FlexRayMsgGetBitsRequest) returns (FlexRayMsgGetBitsReply);
  rpc GetCycle(FlexRayMsgGetCycleRequest) returns (FlexRayMsgGetCycleReply);
  rpc GetData(FlexRayMsgGetDataRequest) returns (FlexRayMsgGetDataReply);
  rpc GetName(FlexRayMsgGetNameRequest) returns (FlexRayMsgGetNameReply);
  rpc GetSignal(FlexRayMsgGetSignalRequest) returns (FlexRayMsgGetSignalReply);
  rpc GetSignalCount(FlexRayMsgGetSignalCountRequest) returns (FlexRayMsgGetSignalCountReply);
  rpc GetSlotId(FlexRayMsgGetSlotIdRequest) returns (FlexRayMsgGetSlotIdReply);
  rpc GetUpdateIndication(FlexRayMsgGetUpdateIndicationRequest) returns (FlexRayMsgGetUpdateIndicationReply);
}

service FlexRaySignal {
  rpc GetDescription(FlexRaySignalGetDescriptionRequest) returns (FlexRaySignalGetDescriptionReply);
  rpc GetName(FlexRaySignalGetNameRequest) returns (FlexRaySignalGetNameReply);
  rpc GetRawValue(FlexRaySignalGetRawValueRequest) returns (FlexRaySignalGetRawValueReply);
  rpc GetUnit(FlexRaySignalGetUnitRequest) returns (FlexRaySignalGetUnitReply);
  rpc GetValue(FlexRaySignalGetValueRequest) returns (FlexRaySignalGetValueReply);
}

service GenericFilter {
  rpc GetIdMax(GenericFilterGetIdMaxRequest) returns (GenericFilterGetIdMaxReply);
  rpc GetIdMin(GenericFilterGetIdMinRequest) returns (GenericFilterGetIdMinReply);
  rpc GetPass(GenericFilterGetPassRequest) returns (GenericFilterGetPassReply);
  rpc GetRx(GenericFilterGetRxRequest) returns (GenericFilterGetRxReply);
  rpc GetTx(GenericFilterGetTxRequest) returns (GenericFilterGetTxReply);
  rpc SetId(GenericFilterSetIdRequest) returns (GenericFilterSetIdReply);
  rpc SetIdMax(GenericFilterSetIdMaxRequest) returns (GenericFilterSetIdMaxReply);
  rpc SetIdMin(GenericFilterSetIdMinRequest) returns (GenericFilterSetIdMinReply);
  rpc SetName(GenericFilterSetNameRequest) returns (GenericFilterSetNameReply);
  rpc SetPass(GenericFilterSetPassRequest) returns (GenericFilterSetPassReply);
  rpc SetRx(GenericFilterSetRxRequest) returns (GenericFilterSetRxReply);
  rpc SetTx(GenericFilterSetTxRequest) returns (GenericFilterSetTxReply);
}

service GenericMsg {
  rpc GetData(GenericMsgGetDataRequest) returns (GenericMsgGetDataReply);
  rpc GetId(GenericMsgGetIdRequest) returns (GenericMsgGetIdReply);
  rpc GetName(GenericMsgGetNameRequest) returns (GenericMsgGetNameReply);
  rpc GetText(GenericMsgGetTextRequest) returns (GenericMsgGetTextReply);
  rpc Send(GenericMsgSendRequest) returns (GenericMsgSendReply);
  rpc SetData(GenericMsgSetDataRequest) returns (GenericMsgSetDataReply);
  rpc SetId(GenericMsgSetIdRequest) returns (GenericMsgSetIdReply);
  rpc SetName(GenericMsgSetNameRequest) returns (GenericMsgSetNameReply);
  rpc SetText(GenericMsgSetTextRequest) returns (GenericMsgSetTextReply);
}

service GraphTemplate {
  rpc CalculateMinMax(GraphTemplateCalculateMinMaxRequest) returns (GraphTemplateCalculateMinMaxReply);
  rpc CreatePlotArea(GraphTemplateCreatePlotAreaRequest) returns (GraphTemplateCreatePlotAreaReply);
  rpc GetAxesBackColor(GraphTemplateGetAxesBackColorRequest) returns (GraphTemplateGetAxesBackColorReply);
  rpc GetFontSize(GraphTemplateGetFontSizeRequest) returns (GraphTemplateGetFontSizeReply);
  rpc GetHeight(GraphTemplateGetHeightRequest) returns (GraphTemplateGetHeightReply);
  rpc GetPlotBackColor(GraphTemplateGetPlotBackColorRequest) returns (GraphTemplateGetPlotBackColorReply);
  rpc GetWidth(GraphTemplateGetWidthRequest) returns (GraphTemplateGetWidthReply);
  rpc GetXAxisMajorColor(GraphTemplateGetXAxisMajorColorRequest) returns (GraphTemplateGetXAxisMajorColorReply);
  rpc GetXAxisMinorColor(GraphTemplateGetXAxisMinorColorRequest) returns (GraphTemplateGetXAxisMinorColorReply);
  rpc GetXAxisNumberColor(GraphTemplateGetXAxisNumberColorRequest) returns (GraphTemplateGetXAxisNumberColorReply);
  rpc GetXAxisTickColor(GraphTemplateGetXAxisTickColorRequest) returns (GraphTemplateGetXAxisTickColorReply);
  rpc GetYAxisLabel(GraphTemplateGetYAxisLabelRequest) returns (GraphTemplateGetYAxisLabelReply);
  rpc GetYAxisLabelColor(GraphTemplateGetYAxisLabelColorRequest) returns (GraphTemplateGetYAxisLabelColorReply);
  rpc GetYAxisMajorColor(GraphTemplateGetYAxisMajorColorRequest) returns (GraphTemplateGetYAxisMajorColorReply);
  rpc GetYAxisMinorColor(GraphTemplateGetYAxisMinorColorRequest) returns (GraphTemplateGetYAxisMinorColorReply);
  rpc GetYAxisNumberColor(GraphTemplateGetYAxisNumberColorRequest) returns (GraphTemplateGetYAxisNumberColorReply);
  rpc GetYAxisRight(GraphTemplateGetYAxisRightRequest) returns (GraphTemplateGetYAxisRightReply);
  rpc GetYAxisTickColor(GraphTemplateGetYAxisTickColorRequest) returns (GraphTemplateGetYAxisTickColorReply);
  rpc SetAxesBackColor(GraphTemplateSetAxesBackColorRequest) returns (GraphTemplateSetAxesBackColorReply);
  rpc SetFontSize(GraphTemplateSetFontSizeRequest) returns (GraphTemplateSetFontSizeReply);
  rpc SetHeight(GraphTemplateSetHeightRequest) returns (GraphTemplateSetHeightReply);
  rpc SetPlotBackColor(GraphTemplateSetPlotBackColorRequest) returns (GraphTemplateSetPlotBackColorReply);
  rpc SetWidth(GraphTemplateSetWidthRequest) returns (GraphTemplateSetWidthReply);
  rpc SetXAxisMajorColor(GraphTemplateSetXAxisMajorColorRequest) returns (GraphTemplateSetXAxisMajorColorReply);
  rpc SetXAxisMinorColor(GraphTemplateSetXAxisMinorColorRequest) returns (GraphTemplateSetXAxisMinorColorReply);
  rpc SetXAxisNumberColor(GraphTemplateSetXAxisNumberColorRequest) returns (GraphTemplateSetXAxisNumberColorReply);
  rpc SetXAxisRange(GraphTemplateSetXAxisRangeRequest) returns (GraphTemplateSetXAxisRangeReply);
  rpc SetXAxisTickColor(GraphTemplateSetXAxisTickColorRequest) returns (GraphTemplateSetXAxisTickColorReply);
  rpc SetYAxisLabel(GraphTemplateSetYAxisLabelRequest) returns (GraphTemplateSetYAxisLabelReply);
  rpc SetYAxisLabelColor(GraphTemplateSetYAxisLabelColorRequest) returns (GraphTemplateSetYAxisLabelColorReply);
  rpc SetYAxisMajorColor(GraphTemplateSetYAxisMajorColorRequest) returns (GraphTemplateSetYAxisMajorColorReply);
  rpc SetYAxisMinorColor(GraphTemplateSetYAxisMinorColorRequest) returns (GraphTemplateSetYAxisMinorColorReply);
  rpc SetYAxisNumberColor(GraphTemplateSetYAxisNumberColorRequest) returns (GraphTemplateSetYAxisNumberColorReply);
  rpc SetYAxisRange(GraphTemplateSetYAxisRangeRequest) returns (GraphTemplateSetYAxisRangeReply);
  rpc SetYAxisRight(GraphTemplateSetYAxisRightRequest) returns (GraphTemplateSetYAxisRightReply);
  rpc SetYAxisTickColor(GraphTemplateSetYAxisTickColorRequest) returns (GraphTemplateSetYAxisTickColorReply);
}

service GUI {
  rpc CreateImage(GUICreateImageRequest) returns (GUICreateImageReply);
  rpc GetChartTimeAxis(GUIGetChartTimeAxisRequest) returns (GUIGetChartTimeAxisReply);
  rpc GetCockpit(GUIGetCockpitRequest) returns (GUIGetCockpitReply);
  rpc GetPanelNames(GUIGetPanelNamesRequest) returns (GUIGetPanelNamesReply);
  rpc GetWorkpage(GUIGetWorkpageRequest) returns (GUIGetWorkpageReply);
  rpc GoOffline(GUIGoOfflineRequest) returns (GUIGoOfflineReply);
  rpc LoadCockpit(GUILoadCockpitRequest) returns (GUILoadCockpitReply);
  rpc LoadWorkpage(GUILoadWorkpageRequest) returns (GUILoadWorkpageReply);
  rpc ReloadLinks(GUIReloadLinksRequest) returns (GUIReloadLinksReply);
  rpc SaveCockpit(GUISaveCockpitRequest) returns (GUISaveCockpitReply);
  rpc SaveWorkpage(GUISaveWorkpageRequest) returns (GUISaveWorkpageReply);
  rpc SetChartTimeAxis(GUISetChartTimeAxisRequest) returns (GUISetChartTimeAxisReply);
  rpc ShowMeasure(GUIShowMeasureRequest) returns (GUIShowMeasureReply);
  rpc ShowPanel(GUIShowPanelRequest) returns (GUIShowPanelReply);
}

service IPduFilter {
  rpc GetName(IPduFilterGetNameRequest) returns (IPduFilterGetNameReply);
  rpc GetPass(IPduFilterGetPassRequest) returns (IPduFilterGetPassReply);
  rpc GetRx(IPduFilterGetRxRequest) returns (IPduFilterGetRxReply);
  rpc GetTx(IPduFilterGetTxRequest) returns (IPduFilterGetTxReply);
  rpc SetName(IPduFilterSetNameRequest) returns (IPduFilterSetNameReply);
  rpc SetPass(IPduFilterSetPassRequest) returns (IPduFilterSetPassReply);
  rpc SetRx(IPduFilterSetRxRequest) returns (IPduFilterSetRxReply);
  rpc SetTx(IPduFilterSetTxRequest) returns (IPduFilterSetTxReply);
}

service IPduMsg {
  rpc GetData(IPduMsgGetDataRequest) returns (IPduMsgGetDataReply);
  rpc GetName(IPduMsgGetNameRequest) returns (IPduMsgGetNameReply);
  rpc GetSignal(IPduMsgGetSignalRequest) returns (IPduMsgGetSignalReply);
  rpc GetSignalCount(IPduMsgGetSignalCountRequest) returns (IPduMsgGetSignalCountReply);
}

service IPduOnIpFilter {
  rpc GetSourceIpMax(IPduOnIpFilterGetSourceIpMaxRequest) returns (IPduOnIpFilterGetSourceIpMaxReply);
  rpc GetSourceIpMin(IPduOnIpFilterGetSourceIpMinRequest) returns (IPduOnIpFilterGetSourceIpMinReply);
  rpc GetSourcePortMax(IPduOnIpFilterGetSourcePortMaxRequest) returns (IPduOnIpFilterGetSourcePortMaxReply);
  rpc GetSourcePortMin(IPduOnIpFilterGetSourcePortMinRequest) returns (IPduOnIpFilterGetSourcePortMinReply);
  rpc GetTargetIpMax(IPduOnIpFilterGetTargetIpMaxRequest) returns (IPduOnIpFilterGetTargetIpMaxReply);
  rpc GetTargetIpMin(IPduOnIpFilterGetTargetIpMinRequest) returns (IPduOnIpFilterGetTargetIpMinReply);
  rpc GetTargetPortMax(IPduOnIpFilterGetTargetPortMaxRequest) returns (IPduOnIpFilterGetTargetPortMaxReply);
  rpc GetTargetPortMin(IPduOnIpFilterGetTargetPortMinRequest) returns (IPduOnIpFilterGetTargetPortMinReply);
  rpc GetTransportProtocol(IPduOnIpFilterGetTransportProtocolRequest) returns (IPduOnIpFilterGetTransportProtocolReply);
  rpc SetSourceIp(IPduOnIpFilterSetSourceIpRequest) returns (IPduOnIpFilterSetSourceIpReply);
  rpc SetSourceIpMax(IPduOnIpFilterSetSourceIpMaxRequest) returns (IPduOnIpFilterSetSourceIpMaxReply);
  rpc SetSourceIpMin(IPduOnIpFilterSetSourceIpMinRequest) returns (IPduOnIpFilterSetSourceIpMinReply);
  rpc SetSourcePort(IPduOnIpFilterSetSourcePortRequest) returns (IPduOnIpFilterSetSourcePortReply);
  rpc SetSourcePortMax(IPduOnIpFilterSetSourcePortMaxRequest) returns (IPduOnIpFilterSetSourcePortMaxReply);
  rpc SetSourcePortMin(IPduOnIpFilterSetSourcePortMinRequest) returns (IPduOnIpFilterSetSourcePortMinReply);
  rpc SetTargetIp(IPduOnIpFilterSetTargetIpRequest) returns (IPduOnIpFilterSetTargetIpReply);
  rpc SetTargetIpMax(IPduOnIpFilterSetTargetIpMaxRequest) returns (IPduOnIpFilterSetTargetIpMaxReply);
  rpc SetTargetIpMin(IPduOnIpFilterSetTargetIpMinRequest) returns (IPduOnIpFilterSetTargetIpMinReply);
  rpc SetTargetPort(IPduOnIpFilterSetTargetPortRequest) returns (IPduOnIpFilterSetTargetPortReply);
  rpc SetTargetPortMax(IPduOnIpFilterSetTargetPortMaxRequest) returns (IPduOnIpFilterSetTargetPortMaxReply);
  rpc SetTargetPortMin(IPduOnIpFilterSetTargetPortMinRequest) returns (IPduOnIpFilterSetTargetPortMinReply);
  rpc SetTransportProtocol(IPduOnIpFilterSetTransportProtocolRequest) returns (IPduOnIpFilterSetTransportProtocolReply);
}

service IPduSignal {
  rpc GetDescription(IPduSignalGetDescriptionRequest) returns (IPduSignalGetDescriptionReply);
  rpc GetName(IPduSignalGetNameRequest) returns (IPduSignalGetNameReply);
  rpc GetRawValue(IPduSignalGetRawValueRequest) returns (IPduSignalGetRawValueReply);
  rpc GetUnit(IPduSignalGetUnitRequest) returns (IPduSignalGetUnitReply);
  rpc GetValue(IPduSignalGetValueRequest) returns (IPduSignalGetValueReply);
}

service IsoTpFilter {
  rpc Apply(IsoTpFilterApplyRequest) returns (IsoTpFilterApplyReply);
  rpc GetAddressExtensionMax(IsoTpFilterGetAddressExtensionMaxRequest) returns (IsoTpFilterGetAddressExtensionMaxReply);
  rpc GetAddressExtensionMin(IsoTpFilterGetAddressExtensionMinRequest) returns (IsoTpFilterGetAddressExtensionMinReply);
  rpc GetId(IsoTpFilterGetIdRequest) returns (IsoTpFilterGetIdReply);
  rpc GetPass(IsoTpFilterGetPassRequest) returns (IsoTpFilterGetPassReply);
  rpc GetRx(IsoTpFilterGetRxRequest) returns (IsoTpFilterGetRxReply);
  rpc GetTx(IsoTpFilterGetTxRequest) returns (IsoTpFilterGetTxReply);
  rpc SetAddressExtension(IsoTpFilterSetAddressExtensionRequest) returns (IsoTpFilterSetAddressExtensionReply);
  rpc SetAddressExtensionMax(IsoTpFilterSetAddressExtensionMaxRequest) returns (IsoTpFilterSetAddressExtensionMaxReply);
  rpc SetAddressExtensionMin(IsoTpFilterSetAddressExtensionMinRequest) returns (IsoTpFilterSetAddressExtensionMinReply);
  rpc SetId(IsoTpFilterSetIdRequest) returns (IsoTpFilterSetIdReply);
  rpc SetName(IsoTpFilterSetNameRequest) returns (IsoTpFilterSetNameReply);
  rpc SetPass(IsoTpFilterSetPassRequest) returns (IsoTpFilterSetPassReply);
  rpc SetRx(IsoTpFilterSetRxRequest) returns (IsoTpFilterSetRxReply);
  rpc SetTx(IsoTpFilterSetTxRequest) returns (IsoTpFilterSetTxReply);
}

service IsoTpMsg {
  rpc GetAddressExtension(IsoTpMsgGetAddressExtensionRequest) returns (IsoTpMsgGetAddressExtensionReply);
  rpc GetData(IsoTpMsgGetDataRequest) returns (IsoTpMsgGetDataReply);
  rpc GetId(IsoTpMsgGetIdRequest) returns (IsoTpMsgGetIdReply);
  rpc GetName(IsoTpMsgGetNameRequest) returns (IsoTpMsgGetNameReply);
  rpc GetStatus(IsoTpMsgGetStatusRequest) returns (IsoTpMsgGetStatusReply);
  rpc Send(IsoTpMsgSendRequest) returns (IsoTpMsgSendReply);
  rpc SetAddressExtension(IsoTpMsgSetAddressExtensionRequest) returns (IsoTpMsgSetAddressExtensionReply);
  rpc SetData(IsoTpMsgSetDataRequest) returns (IsoTpMsgSetDataReply);
  rpc SetId(IsoTpMsgSetIdRequest) returns (IsoTpMsgSetIdReply);
  rpc SetName(IsoTpMsgSetNameRequest) returns (IsoTpMsgSetNameReply);
}

service J1939Filter {
  rpc GetDestinationAddressMax(J1939FilterGetDestinationAddressMaxRequest) returns (J1939FilterGetDestinationAddressMaxReply);
  rpc GetDestinationAddressMin(J1939FilterGetDestinationAddressMinRequest) returns (J1939FilterGetDestinationAddressMinReply);
  rpc GetParameterGroupNumberMax(J1939FilterGetParameterGroupNumberMaxRequest) returns (J1939FilterGetParameterGroupNumberMaxReply);
  rpc GetParameterGroupNumberMin(J1939FilterGetParameterGroupNumberMinRequest) returns (J1939FilterGetParameterGroupNumberMinReply);
  rpc GetPass(J1939FilterGetPassRequest) returns (J1939FilterGetPassReply);
  rpc GetPriorityMax(J1939FilterGetPriorityMaxRequest) returns (J1939FilterGetPriorityMaxReply);
  rpc GetPriorityMin(J1939FilterGetPriorityMinRequest) returns (J1939FilterGetPriorityMinReply);
  rpc GetRx(J1939FilterGetRxRequest) returns (J1939FilterGetRxReply);
  rpc GetSourceAddressMax(J1939FilterGetSourceAddressMaxRequest) returns (J1939FilterGetSourceAddressMaxReply);
  rpc GetSourceAddressMin(J1939FilterGetSourceAddressMinRequest) returns (J1939FilterGetSourceAddressMinReply);
  rpc GetTx(J1939FilterGetTxRequest) returns (J1939FilterGetTxReply);
  rpc SetDestinationAddress(J1939FilterSetDestinationAddressRequest) returns (J1939FilterSetDestinationAddressReply);
  rpc SetDestinationAddressMax(J1939FilterSetDestinationAddressMaxRequest) returns (J1939FilterSetDestinationAddressMaxReply);
  rpc SetDestinationAddressMin(J1939FilterSetDestinationAddressMinRequest) returns (J1939FilterSetDestinationAddressMinReply);
  rpc SetParameterGroupNumber(J1939FilterSetParameterGroupNumberRequest) returns (J1939FilterSetParameterGroupNumberReply);
  rpc SetParameterGroupNumberMax(J1939FilterSetParameterGroupNumberMaxRequest) returns (J1939FilterSetParameterGroupNumberMaxReply);
  rpc SetParameterGroupNumberMin(J1939FilterSetParameterGroupNumberMinRequest) returns (J1939FilterSetParameterGroupNumberMinReply);
  rpc SetPass(J1939FilterSetPassRequest) returns (J1939FilterSetPassReply);
  rpc SetPriority(J1939FilterSetPriorityRequest) returns (J1939FilterSetPriorityReply);
  rpc SetPriorityMax(J1939FilterSetPriorityMaxRequest) returns (J1939FilterSetPriorityMaxReply);
  rpc SetPriorityMin(J1939FilterSetPriorityMinRequest) returns (J1939FilterSetPriorityMinReply);
  rpc SetRx(J1939FilterSetRxRequest) returns (J1939FilterSetRxReply);
  rpc SetSourceAddress(J1939FilterSetSourceAddressRequest) returns (J1939FilterSetSourceAddressReply);
  rpc SetSourceAddressMax(J1939FilterSetSourceAddressMaxRequest) returns (J1939FilterSetSourceAddressMaxReply);
  rpc SetSourceAddressMin(J1939FilterSetSourceAddressMinRequest) returns (J1939FilterSetSourceAddressMinReply);
  rpc SetTx(J1939FilterSetTxRequest) returns (J1939FilterSetTxReply);
}

service J1939Msg {
  rpc GetDestinationAddress(J1939MsgGetDestinationAddressRequest) returns (J1939MsgGetDestinationAddressReply);
  rpc GetParameterGroupNumber(J1939MsgGetParameterGroupNumberRequest) returns (J1939MsgGetParameterGroupNumberReply);
  rpc GetPriority(J1939MsgGetPriorityRequest) returns (J1939MsgGetPriorityReply);
  rpc GetSourceAddress(J1939MsgGetSourceAddressRequest) returns (J1939MsgGetSourceAddressReply);
  rpc GetStatus(J1939MsgGetStatusRequest) returns (J1939MsgGetStatusReply);
  rpc SetDestinationAddress(J1939MsgSetDestinationAddressRequest) returns (J1939MsgSetDestinationAddressReply);
  rpc SetParameterGroupNumber(J1939MsgSetParameterGroupNumberRequest) returns (J1939MsgSetParameterGroupNumberReply);
  rpc SetPriority(J1939MsgSetPriorityRequest) returns (J1939MsgSetPriorityReply);
  rpc SetSourceAddress(J1939MsgSetSourceAddressRequest) returns (J1939MsgSetSourceAddressReply);
}

service Keyword {
  rpc GetDescription(KeywordGetDescriptionRequest) returns (KeywordGetDescriptionReply);
  rpc GetName(KeywordGetNameRequest) returns (KeywordGetNameReply);
  rpc GetType(KeywordGetTypeRequest) returns (KeywordGetTypeReply);
  rpc GetValue(KeywordGetValueRequest) returns (KeywordGetValueReply);
  rpc SetDescription(KeywordSetDescriptionRequest) returns (KeywordSetDescriptionReply);
  rpc SetValue(KeywordSetValueRequest) returns (KeywordSetValueReply);
}

service LinEventFilter {
  rpc GetEventMask(LinEventFilterGetEventMaskRequest) returns (LinEventFilterGetEventMaskReply);
  rpc GetPass(LinEventFilterGetPassRequest) returns (LinEventFilterGetPassReply);
  rpc GetRx(LinEventFilterGetRxRequest) returns (LinEventFilterGetRxReply);
  rpc GetTx(LinEventFilterGetTxRequest) returns (LinEventFilterGetTxReply);
  rpc SetEventMask(LinEventFilterSetEventMaskRequest) returns (LinEventFilterSetEventMaskReply);
  rpc SetPass(LinEventFilterSetPassRequest) returns (LinEventFilterSetPassReply);
  rpc SetRx(LinEventFilterSetRxRequest) returns (LinEventFilterSetRxReply);
  rpc SetTx(LinEventFilterSetTxRequest) returns (LinEventFilterSetTxReply);
}

service LinEventMsg {
  rpc GetEvent(LinEventMsgGetEventRequest) returns (LinEventMsgGetEventReply);
}

service LinFilter {
  rpc GetIdMax(LinFilterGetIdMaxRequest) returns (LinFilterGetIdMaxReply);
  rpc GetIdMin(LinFilterGetIdMinRequest) returns (LinFilterGetIdMinReply);
  rpc GetPass(LinFilterGetPassRequest) returns (LinFilterGetPassReply);
  rpc GetRx(LinFilterGetRxRequest) returns (LinFilterGetRxReply);
  rpc GetTx(LinFilterGetTxRequest) returns (LinFilterGetTxReply);
  rpc SetId(LinFilterSetIdRequest) returns (LinFilterSetIdReply);
  rpc SetIdMax(LinFilterSetIdMaxRequest) returns (LinFilterSetIdMaxReply);
  rpc SetIdMin(LinFilterSetIdMinRequest) returns (LinFilterSetIdMinReply);
  rpc SetName(LinFilterSetNameRequest) returns (LinFilterSetNameReply);
  rpc SetPass(LinFilterSetPassRequest) returns (LinFilterSetPassReply);
  rpc SetRx(LinFilterSetRxRequest) returns (LinFilterSetRxReply);
  rpc SetTx(LinFilterSetTxRequest) returns (LinFilterSetTxReply);
}

service LinMsg {
  rpc GetCRC(LinMsgGetCRCRequest) returns (LinMsgGetCRCReply);
  rpc GetData(LinMsgGetDataRequest) returns (LinMsgGetDataReply);
  rpc GetId(LinMsgGetIdRequest) returns (LinMsgGetIdReply);
  rpc GetName(LinMsgGetNameRequest) returns (LinMsgGetNameReply);
  rpc GetSignal(LinMsgGetSignalRequest) returns (LinMsgGetSignalReply);
  rpc GetSignalCount(LinMsgGetSignalCountRequest) returns (LinMsgGetSignalCountReply);
  rpc GetStatus(LinMsgGetStatusRequest) returns (LinMsgGetStatusReply);
}

service LinSignal {
  rpc GetName(LinSignalGetNameRequest) returns (LinSignalGetNameReply);
  rpc GetRawValue(LinSignalGetRawValueRequest) returns (LinSignalGetRawValueReply);
  rpc GetValue(LinSignalGetValueRequest) returns (LinSignalGetValueReply);
}

service MapLong2Variant {
  rpc GetCount(MapLong2VariantGetCountRequest) returns (MapLong2VariantGetCountReply);
  rpc GetItem(MapLong2VariantGetItemRequest) returns (MapLong2VariantGetItemReply);
  rpc GetNext(MapLong2VariantGetNextRequest) returns (MapLong2VariantGetNextReply);
  rpc GetStartPosition(MapLong2VariantGetStartPositionRequest) returns (MapLong2VariantGetStartPositionReply);
  rpc IsEmpty(MapLong2VariantIsEmptyRequest) returns (MapLong2VariantIsEmptyReply);
  rpc Lookup(MapLong2VariantLookupRequest) returns (MapLong2VariantLookupReply);
  rpc RemoveAll(MapLong2VariantRemoveAllRequest) returns (MapLong2VariantRemoveAllReply);
  rpc RemoveKey(MapLong2VariantRemoveKeyRequest) returns (MapLong2VariantRemoveKeyReply);
  rpc SetAt(MapLong2VariantSetAtRequest) returns (MapLong2VariantSetAtReply);
  rpc SetItem(MapLong2VariantSetItemRequest) returns (MapLong2VariantSetItemReply);
}

service MapObject2Variant {
  rpc GetCount(MapObject2VariantGetCountRequest) returns (MapObject2VariantGetCountReply);
  rpc GetItem(MapObject2VariantGetItemRequest) returns (MapObject2VariantGetItemReply);
  rpc GetNext(MapObject2VariantGetNextRequest) returns (MapObject2VariantGetNextReply);
  rpc GetStartPosition(MapObject2VariantGetStartPositionRequest) returns (MapObject2VariantGetStartPositionReply);
  rpc IsEmpty(MapObject2VariantIsEmptyRequest) returns (MapObject2VariantIsEmptyReply);
  rpc Lookup(MapObject2VariantLookupRequest) returns (MapObject2VariantLookupReply);
  rpc RemoveAll(MapObject2VariantRemoveAllRequest) returns (MapObject2VariantRemoveAllReply);
  rpc RemoveKey(MapObject2VariantRemoveKeyRequest) returns (MapObject2VariantRemoveKeyReply);
  rpc SetAt(MapObject2VariantSetAtRequest) returns (MapObject2VariantSetAtReply);
  rpc SetItem(MapObject2VariantSetItemRequest) returns (MapObject2VariantSetItemReply);
}

service MapString2Variant {
  rpc GetCount(MapString2VariantGetCountRequest) returns (MapString2VariantGetCountReply);
  rpc GetItem(MapString2VariantGetItemRequest) returns (MapString2VariantGetItemReply);
  rpc GetNext(MapString2VariantGetNextRequest) returns (MapString2VariantGetNextReply);
  rpc GetStartPosition(MapString2VariantGetStartPositionRequest) returns (MapString2VariantGetStartPositionReply);
  rpc IsEmpty(MapString2VariantIsEmptyRequest) returns (MapString2VariantIsEmptyReply);
  rpc Lookup(MapString2VariantLookupRequest) returns (MapString2VariantLookupReply);
  rpc RemoveAll(MapString2VariantRemoveAllRequest) returns (MapString2VariantRemoveAllReply);
  rpc RemoveKey(MapString2VariantRemoveKeyRequest) returns (MapString2VariantRemoveKeyReply);
  rpc SetAt(MapString2VariantSetAtRequest) returns (MapString2VariantSetAtReply);
  rpc SetItem(MapString2VariantSetItemRequest) returns (MapString2VariantSetItemReply);
}

service Measure {
  rpc GetMessageFilter(MeasureGetMessageFilterRequest) returns (MeasureGetMessageFilterReply);
  rpc GetParameters(MeasureGetParametersRequest) returns (MeasureGetParametersReply);
  rpc GetSignals(MeasureGetSignalsRequest) returns (MeasureGetSignalsReply);
  rpc IsRunning(MeasureIsRunningRequest) returns (MeasureIsRunningReply);
  rpc PauseVideoAudio(MeasurePauseVideoAudioRequest) returns (MeasurePauseVideoAudioReply);
  rpc Save(MeasureSaveRequest) returns (MeasureSaveReply);
  rpc SaveAs(MeasureSaveAsRequest) returns (MeasureSaveAsReply);
  rpc SaveFile(MeasureSaveFileRequest) returns (MeasureSaveFileReply);
  rpc SetCalculatedSignals(MeasureSetCalculatedSignalsRequest) returns (MeasureSetCalculatedSignalsReply);
  rpc SetMessageFilter(MeasureSetMessageFilterRequest) returns (MeasureSetMessageFilterReply);
  rpc SetParameters(MeasureSetParametersRequest) returns (MeasureSetParametersReply);
  rpc SetSignals(MeasureSetSignalsRequest) returns (MeasureSetSignalsReply);
  rpc SetVideoAudio(MeasureSetVideoAudioRequest) returns (MeasureSetVideoAudioReply);
  rpc Start(MeasureStartRequest) returns (MeasureStartReply);
  rpc Stop(MeasureStopRequest) returns (MeasureStopReply);
}

service MessageSubTypeFilter {
  rpc GetDefaultPass(MessageSubTypeFilterGetDefaultPassRequest) returns (MessageSubTypeFilterGetDefaultPassReply);
  rpc GetMessageFilters(MessageSubTypeFilterGetMessageFiltersRequest) returns (MessageSubTypeFilterGetMessageFiltersReply);
}

service MostAmsFilter {
  rpc Apply(MostAmsFilterApplyRequest) returns (MostAmsFilterApplyReply);
  rpc GetFBlockIdMax(MostAmsFilterGetFBlockIdMaxRequest) returns (MostAmsFilterGetFBlockIdMaxReply);
  rpc GetFBlockIdMin(MostAmsFilterGetFBlockIdMinRequest) returns (MostAmsFilterGetFBlockIdMinReply);
  rpc GetFctIdMax(MostAmsFilterGetFctIdMaxRequest) returns (MostAmsFilterGetFctIdMaxReply);
  rpc GetFctIdMin(MostAmsFilterGetFctIdMinRequest) returns (MostAmsFilterGetFctIdMinReply);
  rpc GetInstIdMax(MostAmsFilterGetInstIdMaxRequest) returns (MostAmsFilterGetInstIdMaxReply);
  rpc GetInstIdMin(MostAmsFilterGetInstIdMinRequest) returns (MostAmsFilterGetInstIdMinReply);
  rpc GetMsgTypeMax(MostAmsFilterGetMsgTypeMaxRequest) returns (MostAmsFilterGetMsgTypeMaxReply);
  rpc GetMsgTypeMin(MostAmsFilterGetMsgTypeMinRequest) returns (MostAmsFilterGetMsgTypeMinReply);
  rpc GetOpTypeMax(MostAmsFilterGetOpTypeMaxRequest) returns (MostAmsFilterGetOpTypeMaxReply);
  rpc GetOpTypeMin(MostAmsFilterGetOpTypeMinRequest) returns (MostAmsFilterGetOpTypeMinReply);
  rpc GetPass(MostAmsFilterGetPassRequest) returns (MostAmsFilterGetPassReply);
  rpc GetRx(MostAmsFilterGetRxRequest) returns (MostAmsFilterGetRxReply);
  rpc GetSourceMax(MostAmsFilterGetSourceMaxRequest) returns (MostAmsFilterGetSourceMaxReply);
  rpc GetSourceMin(MostAmsFilterGetSourceMinRequest) returns (MostAmsFilterGetSourceMinReply);
  rpc GetTargetMax(MostAmsFilterGetTargetMaxRequest) returns (MostAmsFilterGetTargetMaxReply);
  rpc GetTargetMin(MostAmsFilterGetTargetMinRequest) returns (MostAmsFilterGetTargetMinReply);
  rpc GetTx(MostAmsFilterGetTxRequest) returns (MostAmsFilterGetTxReply);
  rpc InitByName(MostAmsFilterInitByNameRequest) returns (MostAmsFilterInitByNameReply);
  rpc SetFBlockId(MostAmsFilterSetFBlockIdRequest) returns (MostAmsFilterSetFBlockIdReply);
  rpc SetFBlockIdMax(MostAmsFilterSetFBlockIdMaxRequest) returns (MostAmsFilterSetFBlockIdMaxReply);
  rpc SetFBlockIdMin(MostAmsFilterSetFBlockIdMinRequest) returns (MostAmsFilterSetFBlockIdMinReply);
  rpc SetFctId(MostAmsFilterSetFctIdRequest) returns (MostAmsFilterSetFctIdReply);
  rpc SetFctIdMax(MostAmsFilterSetFctIdMaxRequest) returns (MostAmsFilterSetFctIdMaxReply);
  rpc SetFctIdMin(MostAmsFilterSetFctIdMinRequest) returns (MostAmsFilterSetFctIdMinReply);
  rpc SetInstId(MostAmsFilterSetInstIdRequest) returns (MostAmsFilterSetInstIdReply);
  rpc SetInstIdMax(MostAmsFilterSetInstIdMaxRequest) returns (MostAmsFilterSetInstIdMaxReply);
  rpc SetInstIdMin(MostAmsFilterSetInstIdMinRequest) returns (MostAmsFilterSetInstIdMinReply);
  rpc SetMsgType(MostAmsFilterSetMsgTypeRequest) returns (MostAmsFilterSetMsgTypeReply);
  rpc SetMsgTypeMax(MostAmsFilterSetMsgTypeMaxRequest) returns (MostAmsFilterSetMsgTypeMaxReply);
  rpc SetMsgTypeMin(MostAmsFilterSetMsgTypeMinRequest) returns (MostAmsFilterSetMsgTypeMinReply);
  rpc SetOpType(MostAmsFilterSetOpTypeRequest) returns (MostAmsFilterSetOpTypeReply);
  rpc SetOpTypeMax(MostAmsFilterSetOpTypeMaxRequest) returns (MostAmsFilterSetOpTypeMaxReply);
  rpc SetOpTypeMin(MostAmsFilterSetOpTypeMinRequest) returns (MostAmsFilterSetOpTypeMinReply);
  rpc SetPass(MostAmsFilterSetPassRequest) returns (MostAmsFilterSetPassReply);
  rpc SetRx(MostAmsFilterSetRxRequest) returns (MostAmsFilterSetRxReply);
  rpc SetSource(MostAmsFilterSetSourceRequest) returns (MostAmsFilterSetSourceReply);
  rpc SetSourceMax(MostAmsFilterSetSourceMaxRequest) returns (MostAmsFilterSetSourceMaxReply);
  rpc SetSourceMin(MostAmsFilterSetSourceMinRequest) returns (MostAmsFilterSetSourceMinReply);
  rpc SetTarget(MostAmsFilterSetTargetRequest) returns (MostAmsFilterSetTargetReply);
  rpc SetTargetMax(MostAmsFilterSetTargetMaxRequest) returns (MostAmsFilterSetTargetMaxReply);
  rpc SetTargetMin(MostAmsFilterSetTargetMinRequest) returns (MostAmsFilterSetTargetMinReply);
  rpc SetTx(MostAmsFilterSetTxRequest) returns (MostAmsFilterSetTxReply);
}

service MostAmsMsg {
  rpc GetFBlock(MostAmsMsgGetFBlockRequest) returns (MostAmsMsgGetFBlockReply);
  rpc GetFBlockId(MostAmsMsgGetFBlockIdRequest) returns (MostAmsMsgGetFBlockIdReply);
  rpc GetFct(MostAmsMsgGetFctRequest) returns (MostAmsMsgGetFctReply);
  rpc GetFctId(MostAmsMsgGetFctIdRequest) returns (MostAmsMsgGetFctIdReply);
  rpc GetInstId(MostAmsMsgGetInstIdRequest) returns (MostAmsMsgGetInstIdReply);
  rpc GetMsgType(MostAmsMsgGetMsgTypeRequest) returns (MostAmsMsgGetMsgTypeReply);
  rpc GetOpType(MostAmsMsgGetOpTypeRequest) returns (MostAmsMsgGetOpTypeReply);
  rpc GetParamData(MostAmsMsgGetParamDataRequest) returns (MostAmsMsgGetParamDataReply);
  rpc GetSource(MostAmsMsgGetSourceRequest) returns (MostAmsMsgGetSourceReply);
  rpc GetTarget(MostAmsMsgGetTargetRequest) returns (MostAmsMsgGetTargetReply);
  rpc Send(MostAmsMsgSendRequest) returns (MostAmsMsgSendReply);
  rpc SetFBlock(MostAmsMsgSetFBlockRequest) returns (MostAmsMsgSetFBlockReply);
  rpc SetFBlockId(MostAmsMsgSetFBlockIdRequest) returns (MostAmsMsgSetFBlockIdReply);
  rpc SetFct(MostAmsMsgSetFctRequest) returns (MostAmsMsgSetFctReply);
  rpc SetFctId(MostAmsMsgSetFctIdRequest) returns (MostAmsMsgSetFctIdReply);
  rpc SetInstId(MostAmsMsgSetInstIdRequest) returns (MostAmsMsgSetInstIdReply);
  rpc SetMsgType(MostAmsMsgSetMsgTypeRequest) returns (MostAmsMsgSetMsgTypeReply);
  rpc SetOpType(MostAmsMsgSetOpTypeRequest) returns (MostAmsMsgSetOpTypeReply);
  rpc SetParamData(MostAmsMsgSetParamDataRequest) returns (MostAmsMsgSetParamDataReply);
  rpc SetTarget(MostAmsMsgSetTargetRequest) returns (MostAmsMsgSetTargetReply);
}

service MostCmsFilter {
  rpc Apply(MostCmsFilterApplyRequest) returns (MostCmsFilterApplyReply);
  rpc GetFBlockIdMax(MostCmsFilterGetFBlockIdMaxRequest) returns (MostCmsFilterGetFBlockIdMaxReply);
  rpc GetFBlockIdMin(MostCmsFilterGetFBlockIdMinRequest) returns (MostCmsFilterGetFBlockIdMinReply);
  rpc GetFctIdMax(MostCmsFilterGetFctIdMaxRequest) returns (MostCmsFilterGetFctIdMaxReply);
  rpc GetFctIdMin(MostCmsFilterGetFctIdMinRequest) returns (MostCmsFilterGetFctIdMinReply);
  rpc GetInstIdMax(MostCmsFilterGetInstIdMaxRequest) returns (MostCmsFilterGetInstIdMaxReply);
  rpc GetInstIdMin(MostCmsFilterGetInstIdMinRequest) returns (MostCmsFilterGetInstIdMinReply);
  rpc GetMsgTypeMax(MostCmsFilterGetMsgTypeMaxRequest) returns (MostCmsFilterGetMsgTypeMaxReply);
  rpc GetMsgTypeMin(MostCmsFilterGetMsgTypeMinRequest) returns (MostCmsFilterGetMsgTypeMinReply);
  rpc GetOpTypeMax(MostCmsFilterGetOpTypeMaxRequest) returns (MostCmsFilterGetOpTypeMaxReply);
  rpc GetOpTypeMin(MostCmsFilterGetOpTypeMinRequest) returns (MostCmsFilterGetOpTypeMinReply);
  rpc GetPass(MostCmsFilterGetPassRequest) returns (MostCmsFilterGetPassReply);
  rpc GetRx(MostCmsFilterGetRxRequest) returns (MostCmsFilterGetRxReply);
  rpc GetSourceMax(MostCmsFilterGetSourceMaxRequest) returns (MostCmsFilterGetSourceMaxReply);
  rpc GetSourceMin(MostCmsFilterGetSourceMinRequest) returns (MostCmsFilterGetSourceMinReply);
  rpc GetTargetMax(MostCmsFilterGetTargetMaxRequest) returns (MostCmsFilterGetTargetMaxReply);
  rpc GetTargetMin(MostCmsFilterGetTargetMinRequest) returns (MostCmsFilterGetTargetMinReply);
  rpc GetTx(MostCmsFilterGetTxRequest) returns (MostCmsFilterGetTxReply);
  rpc InitByName(MostCmsFilterInitByNameRequest) returns (MostCmsFilterInitByNameReply);
  rpc SetFBlockId(MostCmsFilterSetFBlockIdRequest) returns (MostCmsFilterSetFBlockIdReply);
  rpc SetFBlockIdMax(MostCmsFilterSetFBlockIdMaxRequest) returns (MostCmsFilterSetFBlockIdMaxReply);
  rpc SetFBlockIdMin(MostCmsFilterSetFBlockIdMinRequest) returns (MostCmsFilterSetFBlockIdMinReply);
  rpc SetFctId(MostCmsFilterSetFctIdRequest) returns (MostCmsFilterSetFctIdReply);
  rpc SetFctIdMax(MostCmsFilterSetFctIdMaxRequest) returns (MostCmsFilterSetFctIdMaxReply);
  rpc SetFctIdMin(MostCmsFilterSetFctIdMinRequest) returns (MostCmsFilterSetFctIdMinReply);
  rpc SetInstId(MostCmsFilterSetInstIdRequest) returns (MostCmsFilterSetInstIdReply);
  rpc SetInstIdMax(MostCmsFilterSetInstIdMaxRequest) returns (MostCmsFilterSetInstIdMaxReply);
  rpc SetInstIdMin(MostCmsFilterSetInstIdMinRequest) returns (MostCmsFilterSetInstIdMinReply);
  rpc SetMsgType(MostCmsFilterSetMsgTypeRequest) returns (MostCmsFilterSetMsgTypeReply);
  rpc SetMsgTypeMax(MostCmsFilterSetMsgTypeMaxRequest) returns (MostCmsFilterSetMsgTypeMaxReply);
  rpc SetMsgTypeMin(MostCmsFilterSetMsgTypeMinRequest) returns (MostCmsFilterSetMsgTypeMinReply);
  rpc SetOpType(MostCmsFilterSetOpTypeRequest) returns (MostCmsFilterSetOpTypeReply);
  rpc SetOpTypeMax(MostCmsFilterSetOpTypeMaxRequest) returns (MostCmsFilterSetOpTypeMaxReply);
  rpc SetOpTypeMin(MostCmsFilterSetOpTypeMinRequest) returns (MostCmsFilterSetOpTypeMinReply);
  rpc SetPass(MostCmsFilterSetPassRequest) returns (MostCmsFilterSetPassReply);
  rpc SetRx(MostCmsFilterSetRxRequest) returns (MostCmsFilterSetRxReply);
  rpc SetSource(MostCmsFilterSetSourceRequest) returns (MostCmsFilterSetSourceReply);
  rpc SetSourceMax(MostCmsFilterSetSourceMaxRequest) returns (MostCmsFilterSetSourceMaxReply);
  rpc SetSourceMin(MostCmsFilterSetSourceMinRequest) returns (MostCmsFilterSetSourceMinReply);
  rpc SetTarget(MostCmsFilterSetTargetRequest) returns (MostCmsFilterSetTargetReply);
  rpc SetTargetMax(MostCmsFilterSetTargetMaxRequest) returns (MostCmsFilterSetTargetMaxReply);
  rpc SetTargetMin(MostCmsFilterSetTargetMinRequest) returns (MostCmsFilterSetTargetMinReply);
  rpc SetTx(MostCmsFilterSetTxRequest) returns (MostCmsFilterSetTxReply);
}

service MostCmsMsg {
  rpc GetData(MostCmsMsgGetDataRequest) returns (MostCmsMsgGetDataReply);
  rpc GetFBlock(MostCmsMsgGetFBlockRequest) returns (MostCmsMsgGetFBlockReply);
  rpc GetFBlockId(MostCmsMsgGetFBlockIdRequest) returns (MostCmsMsgGetFBlockIdReply);
  rpc GetFct(MostCmsMsgGetFctRequest) returns (MostCmsMsgGetFctReply);
  rpc GetFctId(MostCmsMsgGetFctIdRequest) returns (MostCmsMsgGetFctIdReply);
  rpc GetInstId(MostCmsMsgGetInstIdRequest) returns (MostCmsMsgGetInstIdReply);
  rpc GetMsgType(MostCmsMsgGetMsgTypeRequest) returns (MostCmsMsgGetMsgTypeReply);
  rpc GetOpType(MostCmsMsgGetOpTypeRequest) returns (MostCmsMsgGetOpTypeReply);
  rpc GetParamData(MostCmsMsgGetParamDataRequest) returns (MostCmsMsgGetParamDataReply);
  rpc GetSource(MostCmsMsgGetSourceRequest) returns (MostCmsMsgGetSourceReply);
  rpc GetStatusFlags(MostCmsMsgGetStatusFlagsRequest) returns (MostCmsMsgGetStatusFlagsReply);
  rpc GetTarget(MostCmsMsgGetTargetRequest) returns (MostCmsMsgGetTargetReply);
  rpc GetTxStatus(MostCmsMsgGetTxStatusRequest) returns (MostCmsMsgGetTxStatusReply);
  rpc Send(MostCmsMsgSendRequest) returns (MostCmsMsgSendReply);
  rpc SetData(MostCmsMsgSetDataRequest) returns (MostCmsMsgSetDataReply);
  rpc SetFBlock(MostCmsMsgSetFBlockRequest) returns (MostCmsMsgSetFBlockReply);
  rpc SetFBlockId(MostCmsMsgSetFBlockIdRequest) returns (MostCmsMsgSetFBlockIdReply);
  rpc SetFct(MostCmsMsgSetFctRequest) returns (MostCmsMsgSetFctReply);
  rpc SetFctId(MostCmsMsgSetFctIdRequest) returns (MostCmsMsgSetFctIdReply);
  rpc SetInstId(MostCmsMsgSetInstIdRequest) returns (MostCmsMsgSetInstIdReply);
  rpc SetMsgType(MostCmsMsgSetMsgTypeRequest) returns (MostCmsMsgSetMsgTypeReply);
  rpc SetOpType(MostCmsMsgSetOpTypeRequest) returns (MostCmsMsgSetOpTypeReply);
  rpc SetParamData(MostCmsMsgSetParamDataRequest) returns (MostCmsMsgSetParamDataReply);
  rpc SetTarget(MostCmsMsgSetTargetRequest) returns (MostCmsMsgSetTargetReply);
}

service MostEventFilter {
  rpc GetEventMask(MostEventFilterGetEventMaskRequest) returns (MostEventFilterGetEventMaskReply);
  rpc GetPass(MostEventFilterGetPassRequest) returns (MostEventFilterGetPassReply);
  rpc SetEventMask(MostEventFilterSetEventMaskRequest) returns (MostEventFilterSetEventMaskReply);
  rpc SetPass(MostEventFilterSetPassRequest) returns (MostEventFilterSetPassReply);
}

service MostEventMsg {
  rpc GetEvent(MostEventMsgGetEventRequest) returns (MostEventMsgGetEventReply);
}

service MsgQueue {
  rpc AddDltChannel(MsgQueueAddDltChannelRequest) returns (MsgQueueAddDltChannelReply);
  rpc GetMessageChannels(MsgQueueGetMessageChannelsRequest) returns (MsgQueueGetMessageChannelsReply);
  rpc Receive(MsgQueueReceiveRequest) returns (MsgQueueReceiveReply);
  rpc RemoveDltChannel(MsgQueueRemoveDltChannelRequest) returns (MsgQueueRemoveDltChannelReply);
  rpc SetFilter(MsgQueueSetFilterRequest) returns (MsgQueueSetFilterReply);
  //events
  rpc EventMessage(stream MsgQueueEventMessageResult) returns (stream MsgQueueEventMessageParams);
}

service PlotArea {
  rpc PlotXY(PlotAreaPlotXYRequest) returns (PlotAreaPlotXYReply);
  rpc PlotY(PlotAreaPlotYRequest) returns (PlotAreaPlotYReply);
  rpc SaveAttachment(PlotAreaSaveAttachmentRequest) returns (PlotAreaSaveAttachmentReply);
  rpc SaveByteArray(PlotAreaSaveByteArrayRequest) returns (PlotAreaSaveByteArrayReply);
  rpc SaveFile(PlotAreaSaveFileRequest) returns (PlotAreaSaveFileReply);
}

service RawIp6Filter {
  rpc GetPass(RawIp6FilterGetPassRequest) returns (RawIp6FilterGetPassReply);
  rpc GetRx(RawIp6FilterGetRxRequest) returns (RawIp6FilterGetRxReply);
  rpc GetSourceIpMax(RawIp6FilterGetSourceIpMaxRequest) returns (RawIp6FilterGetSourceIpMaxReply);
  rpc GetSourceIpMin(RawIp6FilterGetSourceIpMinRequest) returns (RawIp6FilterGetSourceIpMinReply);
  rpc GetSourcePortMax(RawIp6FilterGetSourcePortMaxRequest) returns (RawIp6FilterGetSourcePortMaxReply);
  rpc GetSourcePortMin(RawIp6FilterGetSourcePortMinRequest) returns (RawIp6FilterGetSourcePortMinReply);
  rpc GetTargetIpMax(RawIp6FilterGetTargetIpMaxRequest) returns (RawIp6FilterGetTargetIpMaxReply);
  rpc GetTargetIpMin(RawIp6FilterGetTargetIpMinRequest) returns (RawIp6FilterGetTargetIpMinReply);
  rpc GetTargetPortMax(RawIp6FilterGetTargetPortMaxRequest) returns (RawIp6FilterGetTargetPortMaxReply);
  rpc GetTargetPortMin(RawIp6FilterGetTargetPortMinRequest) returns (RawIp6FilterGetTargetPortMinReply);
  rpc GetTransportProtocol(RawIp6FilterGetTransportProtocolRequest) returns (RawIp6FilterGetTransportProtocolReply);
  rpc GetTx(RawIp6FilterGetTxRequest) returns (RawIp6FilterGetTxReply);
  rpc SetPass(RawIp6FilterSetPassRequest) returns (RawIp6FilterSetPassReply);
  rpc SetRx(RawIp6FilterSetRxRequest) returns (RawIp6FilterSetRxReply);
  rpc SetSourceIp(RawIp6FilterSetSourceIpRequest) returns (RawIp6FilterSetSourceIpReply);
  rpc SetSourceIpMax(RawIp6FilterSetSourceIpMaxRequest) returns (RawIp6FilterSetSourceIpMaxReply);
  rpc SetSourceIpMin(RawIp6FilterSetSourceIpMinRequest) returns (RawIp6FilterSetSourceIpMinReply);
  rpc SetSourcePort(RawIp6FilterSetSourcePortRequest) returns (RawIp6FilterSetSourcePortReply);
  rpc SetSourcePortMax(RawIp6FilterSetSourcePortMaxRequest) returns (RawIp6FilterSetSourcePortMaxReply);
  rpc SetSourcePortMin(RawIp6FilterSetSourcePortMinRequest) returns (RawIp6FilterSetSourcePortMinReply);
  rpc SetTargetIp(RawIp6FilterSetTargetIpRequest) returns (RawIp6FilterSetTargetIpReply);
  rpc SetTargetIpMax(RawIp6FilterSetTargetIpMaxRequest) returns (RawIp6FilterSetTargetIpMaxReply);
  rpc SetTargetIpMin(RawIp6FilterSetTargetIpMinRequest) returns (RawIp6FilterSetTargetIpMinReply);
  rpc SetTargetPort(RawIp6FilterSetTargetPortRequest) returns (RawIp6FilterSetTargetPortReply);
  rpc SetTargetPortMax(RawIp6FilterSetTargetPortMaxRequest) returns (RawIp6FilterSetTargetPortMaxReply);
  rpc SetTargetPortMin(RawIp6FilterSetTargetPortMinRequest) returns (RawIp6FilterSetTargetPortMinReply);
  rpc SetTransportProtocol(RawIp6FilterSetTransportProtocolRequest) returns (RawIp6FilterSetTransportProtocolReply);
  rpc SetTx(RawIp6FilterSetTxRequest) returns (RawIp6FilterSetTxReply);
}

service RawIpFilter {
  rpc GetPass(RawIpFilterGetPassRequest) returns (RawIpFilterGetPassReply);
  rpc GetRx(RawIpFilterGetRxRequest) returns (RawIpFilterGetRxReply);
  rpc GetSourceIpMax(RawIpFilterGetSourceIpMaxRequest) returns (RawIpFilterGetSourceIpMaxReply);
  rpc GetSourceIpMin(RawIpFilterGetSourceIpMinRequest) returns (RawIpFilterGetSourceIpMinReply);
  rpc GetSourcePortMax(RawIpFilterGetSourcePortMaxRequest) returns (RawIpFilterGetSourcePortMaxReply);
  rpc GetSourcePortMin(RawIpFilterGetSourcePortMinRequest) returns (RawIpFilterGetSourcePortMinReply);
  rpc GetTargetIpMax(RawIpFilterGetTargetIpMaxRequest) returns (RawIpFilterGetTargetIpMaxReply);
  rpc GetTargetIpMin(RawIpFilterGetTargetIpMinRequest) returns (RawIpFilterGetTargetIpMinReply);
  rpc GetTargetPortMax(RawIpFilterGetTargetPortMaxRequest) returns (RawIpFilterGetTargetPortMaxReply);
  rpc GetTargetPortMin(RawIpFilterGetTargetPortMinRequest) returns (RawIpFilterGetTargetPortMinReply);
  rpc GetTransportProtocol(RawIpFilterGetTransportProtocolRequest) returns (RawIpFilterGetTransportProtocolReply);
  rpc GetTx(RawIpFilterGetTxRequest) returns (RawIpFilterGetTxReply);
  rpc SetPass(RawIpFilterSetPassRequest) returns (RawIpFilterSetPassReply);
  rpc SetRx(RawIpFilterSetRxRequest) returns (RawIpFilterSetRxReply);
  rpc SetSourceIp(RawIpFilterSetSourceIpRequest) returns (RawIpFilterSetSourceIpReply);
  rpc SetSourceIpMax(RawIpFilterSetSourceIpMaxRequest) returns (RawIpFilterSetSourceIpMaxReply);
  rpc SetSourceIpMin(RawIpFilterSetSourceIpMinRequest) returns (RawIpFilterSetSourceIpMinReply);
  rpc SetSourcePort(RawIpFilterSetSourcePortRequest) returns (RawIpFilterSetSourcePortReply);
  rpc SetSourcePortMax(RawIpFilterSetSourcePortMaxRequest) returns (RawIpFilterSetSourcePortMaxReply);
  rpc SetSourcePortMin(RawIpFilterSetSourcePortMinRequest) returns (RawIpFilterSetSourcePortMinReply);
  rpc SetTargetIp(RawIpFilterSetTargetIpRequest) returns (RawIpFilterSetTargetIpReply);
  rpc SetTargetIpMax(RawIpFilterSetTargetIpMaxRequest) returns (RawIpFilterSetTargetIpMaxReply);
  rpc SetTargetIpMin(RawIpFilterSetTargetIpMinRequest) returns (RawIpFilterSetTargetIpMinReply);
  rpc SetTargetPort(RawIpFilterSetTargetPortRequest) returns (RawIpFilterSetTargetPortReply);
  rpc SetTargetPortMax(RawIpFilterSetTargetPortMaxRequest) returns (RawIpFilterSetTargetPortMaxReply);
  rpc SetTargetPortMin(RawIpFilterSetTargetPortMinRequest) returns (RawIpFilterSetTargetPortMinReply);
  rpc SetTransportProtocol(RawIpFilterSetTransportProtocolRequest) returns (RawIpFilterSetTransportProtocolReply);
  rpc SetTx(RawIpFilterSetTxRequest) returns (RawIpFilterSetTxReply);
}

service RawIpMsg {
  rpc GetPayload(RawIpMsgGetPayloadRequest) returns (RawIpMsgGetPayloadReply);
  rpc GetSourceIp(RawIpMsgGetSourceIpRequest) returns (RawIpMsgGetSourceIpReply);
  rpc GetSourcePort(RawIpMsgGetSourcePortRequest) returns (RawIpMsgGetSourcePortReply);
  rpc GetTargetIp(RawIpMsgGetTargetIpRequest) returns (RawIpMsgGetTargetIpReply);
  rpc GetTargetPort(RawIpMsgGetTargetPortRequest) returns (RawIpMsgGetTargetPortReply);
  rpc GetTransportProtocol(RawIpMsgGetTransportProtocolRequest) returns (RawIpMsgGetTransportProtocolReply);
  rpc Send(RawIpMsgSendRequest) returns (RawIpMsgSendReply);
  rpc SetPayload(RawIpMsgSetPayloadRequest) returns (RawIpMsgSetPayloadReply);
  rpc SetSourceIp(RawIpMsgSetSourceIpRequest) returns (RawIpMsgSetSourceIpReply);
  rpc SetSourcePort(RawIpMsgSetSourcePortRequest) returns (RawIpMsgSetSourcePortReply);
  rpc SetTargetIp(RawIpMsgSetTargetIpRequest) returns (RawIpMsgSetTargetIpReply);
  rpc SetTargetPort(RawIpMsgSetTargetPortRequest) returns (RawIpMsgSetTargetPortReply);
  rpc SetTransportProtocol(RawIpMsgSetTransportProtocolRequest) returns (RawIpMsgSetTransportProtocolReply);
}

service SequencerServer {
  rpc GetComputer(SequencerServerGetComputerRequest) returns (SequencerServerGetComputerReply);
  rpc GetConfiguration(SequencerServerGetConfigurationRequest) returns (SequencerServerGetConfigurationReply);
  rpc GetModel(SequencerServerGetModelRequest) returns (SequencerServerGetModelReply);
  rpc GetProjectAccessRights(SequencerServerGetProjectAccessRightsRequest) returns (SequencerServerGetProjectAccessRightsReply);
  rpc GetStarted(SequencerServerGetStartedRequest) returns (SequencerServerGetStartedReply);
  rpc GetStatus(SequencerServerGetStatusRequest) returns (SequencerServerGetStatusReply);
  rpc GetTestSequencerItems(SequencerServerGetTestSequencerItemsRequest) returns (SequencerServerGetTestSequencerItemsReply);
  rpc GetTestSystem(SequencerServerGetTestSystemRequest) returns (SequencerServerGetTestSystemReply);
  rpc SetProjectAccessRights(SequencerServerSetProjectAccessRightsRequest) returns (SequencerServerSetProjectAccessRightsReply);
  rpc SetStatus(SequencerServerSetStatusRequest) returns (SequencerServerSetStatusReply);
  rpc SetTestSystem(SequencerServerSetTestSystemRequest) returns (SequencerServerSetTestSystemReply);
}

service SequencerServers {
  rpc GetCount(SequencerServersGetCountRequest) returns (SequencerServersGetCountReply);
  rpc GetItem(SequencerServersGetItemRequest) returns (SequencerServersGetItemReply);
}

service SignalValueTextMapping {
  rpc GetMax(SignalValueTextMappingGetMaxRequest) returns (SignalValueTextMappingGetMaxReply);
  rpc GetMin(SignalValueTextMappingGetMinRequest) returns (SignalValueTextMappingGetMinReply);
  rpc GetText(SignalValueTextMappingGetTextRequest) returns (SignalValueTextMappingGetTextReply);
  rpc SetMax(SignalValueTextMappingSetMaxRequest) returns (SignalValueTextMappingSetMaxReply);
  rpc SetMin(SignalValueTextMappingSetMinRequest) returns (SignalValueTextMappingSetMinReply);
  rpc SetText(SignalValueTextMappingSetTextRequest) returns (SignalValueTextMappingSetTextReply);
}

service SomeIpFilter {
  rpc GetClientIdMax(SomeIpFilterGetClientIdMaxRequest) returns (SomeIpFilterGetClientIdMaxReply);
  rpc GetClientIdMin(SomeIpFilterGetClientIdMinRequest) returns (SomeIpFilterGetClientIdMinReply);
  rpc GetInterfaceVersionMax(SomeIpFilterGetInterfaceVersionMaxRequest) returns (SomeIpFilterGetInterfaceVersionMaxReply);
  rpc GetInterfaceVersionMin(SomeIpFilterGetInterfaceVersionMinRequest) returns (SomeIpFilterGetInterfaceVersionMinReply);
  rpc GetMessageTypeMax(SomeIpFilterGetMessageTypeMaxRequest) returns (SomeIpFilterGetMessageTypeMaxReply);
  rpc GetMessageTypeMin(SomeIpFilterGetMessageTypeMinRequest) returns (SomeIpFilterGetMessageTypeMinReply);
  rpc GetMethodIdMax(SomeIpFilterGetMethodIdMaxRequest) returns (SomeIpFilterGetMethodIdMaxReply);
  rpc GetMethodIdMin(SomeIpFilterGetMethodIdMinRequest) returns (SomeIpFilterGetMethodIdMinReply);
  rpc GetPass(SomeIpFilterGetPassRequest) returns (SomeIpFilterGetPassReply);
  rpc GetReturnCodeMax(SomeIpFilterGetReturnCodeMaxRequest) returns (SomeIpFilterGetReturnCodeMaxReply);
  rpc GetReturnCodeMin(SomeIpFilterGetReturnCodeMinRequest) returns (SomeIpFilterGetReturnCodeMinReply);
  rpc GetRx(SomeIpFilterGetRxRequest) returns (SomeIpFilterGetRxReply);
  rpc GetSdEventGroupIdMax(SomeIpFilterGetSdEventGroupIdMaxRequest) returns (SomeIpFilterGetSdEventGroupIdMaxReply);
  rpc GetSdEventGroupIdMin(SomeIpFilterGetSdEventGroupIdMinRequest) returns (SomeIpFilterGetSdEventGroupIdMinReply);
  rpc GetSdInstanceIdMax(SomeIpFilterGetSdInstanceIdMaxRequest) returns (SomeIpFilterGetSdInstanceIdMaxReply);
  rpc GetSdInstanceIdMin(SomeIpFilterGetSdInstanceIdMinRequest) returns (SomeIpFilterGetSdInstanceIdMinReply);
  rpc GetSdMajorVersionMax(SomeIpFilterGetSdMajorVersionMaxRequest) returns (SomeIpFilterGetSdMajorVersionMaxReply);
  rpc GetSdMajorVersionMin(SomeIpFilterGetSdMajorVersionMinRequest) returns (SomeIpFilterGetSdMajorVersionMinReply);
  rpc GetSdServiceIdMax(SomeIpFilterGetSdServiceIdMaxRequest) returns (SomeIpFilterGetSdServiceIdMaxReply);
  rpc GetSdServiceIdMin(SomeIpFilterGetSdServiceIdMinRequest) returns (SomeIpFilterGetSdServiceIdMinReply);
  rpc GetSdTypes(SomeIpFilterGetSdTypesRequest) returns (SomeIpFilterGetSdTypesReply);
  rpc GetServiceIdMax(SomeIpFilterGetServiceIdMaxRequest) returns (SomeIpFilterGetServiceIdMaxReply);
  rpc GetServiceIdMin(SomeIpFilterGetServiceIdMinRequest) returns (SomeIpFilterGetServiceIdMinReply);
  rpc GetTx(SomeIpFilterGetTxRequest) returns (SomeIpFilterGetTxReply);
  rpc SetClientId(SomeIpFilterSetClientIdRequest) returns (SomeIpFilterSetClientIdReply);
  rpc SetClientIdMax(SomeIpFilterSetClientIdMaxRequest) returns (SomeIpFilterSetClientIdMaxReply);
  rpc SetClientIdMin(SomeIpFilterSetClientIdMinRequest) returns (SomeIpFilterSetClientIdMinReply);
  rpc SetInterfaceVersion(SomeIpFilterSetInterfaceVersionRequest) returns (SomeIpFilterSetInterfaceVersionReply);
  rpc SetInterfaceVersionMax(SomeIpFilterSetInterfaceVersionMaxRequest) returns (SomeIpFilterSetInterfaceVersionMaxReply);
  rpc SetInterfaceVersionMin(SomeIpFilterSetInterfaceVersionMinRequest) returns (SomeIpFilterSetInterfaceVersionMinReply);
  rpc SetMessageType(SomeIpFilterSetMessageTypeRequest) returns (SomeIpFilterSetMessageTypeReply);
  rpc SetMessageTypeMax(SomeIpFilterSetMessageTypeMaxRequest) returns (SomeIpFilterSetMessageTypeMaxReply);
  rpc SetMessageTypeMin(SomeIpFilterSetMessageTypeMinRequest) returns (SomeIpFilterSetMessageTypeMinReply);
  rpc SetMethodId(SomeIpFilterSetMethodIdRequest) returns (SomeIpFilterSetMethodIdReply);
  rpc SetMethodIdMax(SomeIpFilterSetMethodIdMaxRequest) returns (SomeIpFilterSetMethodIdMaxReply);
  rpc SetMethodIdMin(SomeIpFilterSetMethodIdMinRequest) returns (SomeIpFilterSetMethodIdMinReply);
  rpc SetPass(SomeIpFilterSetPassRequest) returns (SomeIpFilterSetPassReply);
  rpc SetReturnCode(SomeIpFilterSetReturnCodeRequest) returns (SomeIpFilterSetReturnCodeReply);
  rpc SetReturnCodeMax(SomeIpFilterSetReturnCodeMaxRequest) returns (SomeIpFilterSetReturnCodeMaxReply);
  rpc SetReturnCodeMin(SomeIpFilterSetReturnCodeMinRequest) returns (SomeIpFilterSetReturnCodeMinReply);
  rpc SetRx(SomeIpFilterSetRxRequest) returns (SomeIpFilterSetRxReply);
  rpc SetSdEventGroupId(SomeIpFilterSetSdEventGroupIdRequest) returns (SomeIpFilterSetSdEventGroupIdReply);
  rpc SetSdEventGroupIdMax(SomeIpFilterSetSdEventGroupIdMaxRequest) returns (SomeIpFilterSetSdEventGroupIdMaxReply);
  rpc SetSdEventGroupIdMin(SomeIpFilterSetSdEventGroupIdMinRequest) returns (SomeIpFilterSetSdEventGroupIdMinReply);
  rpc SetSdInstanceId(SomeIpFilterSetSdInstanceIdRequest) returns (SomeIpFilterSetSdInstanceIdReply);
  rpc SetSdInstanceIdMax(SomeIpFilterSetSdInstanceIdMaxRequest) returns (SomeIpFilterSetSdInstanceIdMaxReply);
  rpc SetSdInstanceIdMin(SomeIpFilterSetSdInstanceIdMinRequest) returns (SomeIpFilterSetSdInstanceIdMinReply);
  rpc SetSdMajorVersion(SomeIpFilterSetSdMajorVersionRequest) returns (SomeIpFilterSetSdMajorVersionReply);
  rpc SetSdMajorVersionMax(SomeIpFilterSetSdMajorVersionMaxRequest) returns (SomeIpFilterSetSdMajorVersionMaxReply);
  rpc SetSdMajorVersionMin(SomeIpFilterSetSdMajorVersionMinRequest) returns (SomeIpFilterSetSdMajorVersionMinReply);
  rpc SetSdServiceId(SomeIpFilterSetSdServiceIdRequest) returns (SomeIpFilterSetSdServiceIdReply);
  rpc SetSdServiceIdMax(SomeIpFilterSetSdServiceIdMaxRequest) returns (SomeIpFilterSetSdServiceIdMaxReply);
  rpc SetSdServiceIdMin(SomeIpFilterSetSdServiceIdMinRequest) returns (SomeIpFilterSetSdServiceIdMinReply);
  rpc SetSdTypes(SomeIpFilterSetSdTypesRequest) returns (SomeIpFilterSetSdTypesReply);
  rpc SetServiceId(SomeIpFilterSetServiceIdRequest) returns (SomeIpFilterSetServiceIdReply);
  rpc SetServiceIdMax(SomeIpFilterSetServiceIdMaxRequest) returns (SomeIpFilterSetServiceIdMaxReply);
  rpc SetServiceIdMin(SomeIpFilterSetServiceIdMinRequest) returns (SomeIpFilterSetServiceIdMinReply);
  rpc SetTx(SomeIpFilterSetTxRequest) returns (SomeIpFilterSetTxReply);
}

service SomeIpMsg {
  rpc GetClientId(SomeIpMsgGetClientIdRequest) returns (SomeIpMsgGetClientIdReply);
  rpc GetInterfaceVersion(SomeIpMsgGetInterfaceVersionRequest) returns (SomeIpMsgGetInterfaceVersionReply);
  rpc GetMessageType(SomeIpMsgGetMessageTypeRequest) returns (SomeIpMsgGetMessageTypeReply);
  rpc GetMethodId(SomeIpMsgGetMethodIdRequest) returns (SomeIpMsgGetMethodIdReply);
  rpc GetProtocolVersion(SomeIpMsgGetProtocolVersionRequest) returns (SomeIpMsgGetProtocolVersionReply);
  rpc GetReturnCode(SomeIpMsgGetReturnCodeRequest) returns (SomeIpMsgGetReturnCodeReply);
  rpc GetServiceId(SomeIpMsgGetServiceIdRequest) returns (SomeIpMsgGetServiceIdReply);
  rpc GetSessionId(SomeIpMsgGetSessionIdRequest) returns (SomeIpMsgGetSessionIdReply);
  rpc SetClientId(SomeIpMsgSetClientIdRequest) returns (SomeIpMsgSetClientIdReply);
  rpc SetInterfaceVersion(SomeIpMsgSetInterfaceVersionRequest) returns (SomeIpMsgSetInterfaceVersionReply);
  rpc SetMessageType(SomeIpMsgSetMessageTypeRequest) returns (SomeIpMsgSetMessageTypeReply);
  rpc SetMethodId(SomeIpMsgSetMethodIdRequest) returns (SomeIpMsgSetMethodIdReply);
  rpc SetProtocolVersion(SomeIpMsgSetProtocolVersionRequest) returns (SomeIpMsgSetProtocolVersionReply);
  rpc SetReturnCode(SomeIpMsgSetReturnCodeRequest) returns (SomeIpMsgSetReturnCodeReply);
  rpc SetServiceId(SomeIpMsgSetServiceIdRequest) returns (SomeIpMsgSetServiceIdReply);
  rpc SetSessionId(SomeIpMsgSetSessionIdRequest) returns (SomeIpMsgSetSessionIdReply);
}

service System {
  rpc CaptureImage(SystemCaptureImageRequest) returns (SystemCaptureImageReply);
  rpc ChangeProtocol(SystemChangeProtocolRequest) returns (SystemChangeProtocolReply);
  rpc CreateRemoveSignals(SystemCreateRemoveSignalsRequest) returns (SystemCreateRemoveSignalsReply);
  rpc GetCompatibilityMode(SystemGetCompatibilityModeRequest) returns (SystemGetCompatibilityModeReply);
  rpc GetConfig(SystemGetConfigRequest) returns (SystemGetConfigReply);
  rpc GetConfigs(SystemGetConfigsRequest) returns (SystemGetConfigsReply);
  rpc GetDatabase(SystemGetDatabaseRequest) returns (SystemGetDatabaseReply);
  rpc GetGVar(SystemGetGVarRequest) returns (SystemGetGVarReply);
  rpc GetLoadedModelOutput(SystemGetLoadedModelOutputRequest) returns (SystemGetLoadedModelOutputReply);
  rpc GetModel(SystemGetModelRequest) returns (SystemGetModelReply);
  rpc GetModels(SystemGetModelsRequest) returns (SystemGetModelsReply);
  rpc GetProtocolName(SystemGetProtocolNameRequest) returns (SystemGetProtocolNameReply);
  rpc GetReplacementVar(SystemGetReplacementVarRequest) returns (SystemGetReplacementVarReply);
  rpc GetResult(SystemGetResultRequest) returns (SystemGetResultReply);
  rpc GetSignal(SystemGetSignalRequest) returns (SystemGetSignalReply);
  rpc GetSignalInfo(SystemGetSignalInfoRequest) returns (SystemGetSignalInfoReply);
  rpc GetTestSystemName(SystemGetTestSystemNameRequest) returns (SystemGetTestSystemNameReply);
  rpc GetUser(SystemGetUserRequest) returns (SystemGetUserReply);
  rpc GetValidSignalList(SystemGetValidSignalListRequest) returns (SystemGetValidSignalListReply);
  rpc GetVersion(SystemGetVersionRequest) returns (SystemGetVersionReply);
  rpc GetXcpConfig(SystemGetXcpConfigRequest) returns (SystemGetXcpConfigReply);
  rpc LoadConfig(SystemLoadConfigRequest) returns (SystemLoadConfigReply);
  rpc LoadModel(SystemLoadModelRequest) returns (SystemLoadModelReply);
  rpc LoadXcpParameterFile(SystemLoadXcpParameterFileRequest) returns (SystemLoadXcpParameterFileReply);
  rpc ModifyModelNodeConfig(SystemModifyModelNodeConfigRequest) returns (SystemModifyModelNodeConfigReply);
  rpc ModifyMsgConfig(SystemModifyMsgConfigRequest) returns (SystemModifyMsgConfigReply);
  rpc ModifyVideoAudioConfig(SystemModifyVideoAudioConfigRequest) returns (SystemModifyVideoAudioConfigReply);
  rpc ModifyXcpConfig(SystemModifyXcpConfigRequest) returns (SystemModifyXcpConfigReply);
  rpc ReadValues(SystemReadValuesRequest) returns (SystemReadValuesReply);
  rpc Remark(SystemRemarkRequest) returns (SystemRemarkReply);
  rpc Reset(SystemResetRequest) returns (SystemResetReply);
  rpc RestoreWritableSignals(SystemRestoreWritableSignalsRequest) returns (SystemRestoreWritableSignalsReply);
  rpc SetCompatibilityMode(SystemSetCompatibilityModeRequest) returns (SystemSetCompatibilityModeReply);
  rpc SetGVar(SystemSetGVarRequest) returns (SystemSetGVarReply);
  rpc SetReplacementVar(SystemSetReplacementVarRequest) returns (SystemSetReplacementVarReply);
  rpc SetResult(SystemSetResultRequest) returns (SystemSetResultReply);
  rpc SetSignal(SystemSetSignalRequest) returns (SystemSetSignalReply);
  rpc Shutdown(SystemShutdownRequest) returns (SystemShutdownReply);
  rpc StoreWritableSignals(SystemStoreWritableSignalsRequest) returns (SystemStoreWritableSignalsReply);
  rpc WriteValues(SystemWriteValuesRequest) returns (SystemWriteValuesReply);
}

service TestDocument {
  rpc Delete(TestDocumentDeleteRequest) returns (TestDocumentDeleteReply);
  rpc Export(TestDocumentExportRequest) returns (TestDocumentExportReply);
  rpc GetCompressedSize(TestDocumentGetCompressedSizeRequest) returns (TestDocumentGetCompressedSizeReply);
  rpc GetData(TestDocumentGetDataRequest) returns (TestDocumentGetDataReply);
  rpc GetDate(TestDocumentGetDateRequest) returns (TestDocumentGetDateReply);
  rpc GetExtension(TestDocumentGetExtensionRequest) returns (TestDocumentGetExtensionReply);
  rpc GetName(TestDocumentGetNameRequest) returns (TestDocumentGetNameReply);
  rpc GetPath(TestDocumentGetPathRequest) returns (TestDocumentGetPathReply);
  rpc GetSize(TestDocumentGetSizeRequest) returns (TestDocumentGetSizeReply);
  rpc Import(TestDocumentImportRequest) returns (TestDocumentImportReply);
  rpc SetData(TestDocumentSetDataRequest) returns (TestDocumentSetDataReply);
  rpc SetName(TestDocumentSetNameRequest) returns (TestDocumentSetNameReply);
}

service TestDocuments {
  rpc Add(TestDocumentsAddRequest) returns (TestDocumentsAddReply);
  rpc GetCount(TestDocumentsGetCountRequest) returns (TestDocumentsGetCountReply);
  rpc GetItem(TestDocumentsGetItemRequest) returns (TestDocumentsGetItemReply);
}

service TestItem {
  rpc Branch(TestItemBranchRequest) returns (TestItemBranchReply);
  rpc BreakLink(TestItemBreakLinkRequest) returns (TestItemBreakLinkReply);
  rpc Copy(TestItemCopyRequest) returns (TestItemCopyReply);
  rpc CreateChild(TestItemCreateChildRequest) returns (TestItemCreateChildReply);
  rpc CreateLink(TestItemCreateLinkRequest) returns (TestItemCreateLinkReply);
  rpc Delete(TestItemDeleteRequest) returns (TestItemDeleteReply);
  rpc ErasePersonalData(TestItemErasePersonalDataRequest) returns (TestItemErasePersonalDataReply);
  rpc Execute(TestItemExecuteRequest) returns (TestItemExecuteReply);
  rpc Export(TestItemExportRequest) returns (TestItemExportReply);
  rpc ExportData(TestItemExportDataRequest) returns (TestItemExportDataReply);
  rpc GetAccessRights(TestItemGetAccessRightsRequest) returns (TestItemGetAccessRightsReply);
  rpc GetAccessRightsUserGroup(TestItemGetAccessRightsUserGroupRequest) returns (TestItemGetAccessRightsUserGroupReply);
  rpc GetAuthor(TestItemGetAuthorRequest) returns (TestItemGetAuthorReply);
  rpc GetChildren(TestItemGetChildrenRequest) returns (TestItemGetChildrenReply);
  rpc GetDatabase(TestItemGetDatabaseRequest) returns (TestItemGetDatabaseReply);
  rpc GetDate(TestItemGetDateRequest) returns (TestItemGetDateReply);
  rpc GetDescription(TestItemGetDescriptionRequest) returns (TestItemGetDescriptionReply);
  rpc GetEstimatedExecutionTime(TestItemGetEstimatedExecutionTimeRequest) returns (TestItemGetEstimatedExecutionTimeReply);
  rpc GetKeepRelease(TestItemGetKeepReleaseRequest) returns (TestItemGetKeepReleaseReply);
  rpc GetLinks(TestItemGetLinksRequest) returns (TestItemGetLinksReply);
  rpc GetName(TestItemGetNameRequest) returns (TestItemGetNameReply);
  rpc GetNamePrefix(TestItemGetNamePrefixRequest) returns (TestItemGetNamePrefixReply);
  rpc GetNextVersions(TestItemGetNextVersionsRequest) returns (TestItemGetNextVersionsReply);
  rpc GetParent(TestItemGetParentRequest) returns (TestItemGetParentReply);
  rpc GetPath(TestItemGetPathRequest) returns (TestItemGetPathReply);
  rpc GetPrevVersion(TestItemGetPrevVersionRequest) returns (TestItemGetPrevVersionReply);
  rpc GetProgram(TestItemGetProgramRequest) returns (TestItemGetProgramReply);
  rpc GetReferencedModules(TestItemGetReferencedModulesRequest) returns (TestItemGetReferencedModulesReply);
  rpc GetResults(TestItemGetResultsRequest) returns (TestItemGetResultsReply);
  rpc GetStorageSpace(TestItemGetStorageSpaceRequest) returns (TestItemGetStorageSpaceReply);
  rpc GetSubTreeResults(TestItemGetSubTreeResultsRequest) returns (TestItemGetSubTreeResultsReply);
  rpc GetTestDocuments(TestItemGetTestDocumentsRequest) returns (TestItemGetTestDocumentsReply);
  rpc GetTestParameters(TestItemGetTestParametersRequest) returns (TestItemGetTestParametersReply);
  rpc GetTestSpec(TestItemGetTestSpecRequest) returns (TestItemGetTestSpecReply);
  rpc GetType(TestItemGetTypeRequest) returns (TestItemGetTypeReply);
  rpc GetTypeName(TestItemGetTypeNameRequest) returns (TestItemGetTypeNameReply);
  rpc GetVersion(TestItemGetVersionRequest) returns (TestItemGetVersionReply);
  rpc GetVersionDescription(TestItemGetVersionDescriptionRequest) returns (TestItemGetVersionDescriptionReply);
  rpc GetVersionHyperlink(TestItemGetVersionHyperlinkRequest) returns (TestItemGetVersionHyperlinkReply);
  rpc GetVersionLabel(TestItemGetVersionLabelRequest) returns (TestItemGetVersionLabelReply);
  rpc Import(TestItemImportRequest) returns (TestItemImportReply);
  rpc ImportData(TestItemImportDataRequest) returns (TestItemImportDataReply);
  rpc LinkTo(TestItemLinkToRequest) returns (TestItemLinkToReply);
  rpc Lock(TestItemLockRequest) returns (TestItemLockReply);
  rpc Move(TestItemMoveRequest) returns (TestItemMoveReply);
  rpc Release(TestItemReleaseRequest) returns (TestItemReleaseReply);
  rpc SetAccessRights(TestItemSetAccessRightsRequest) returns (TestItemSetAccessRightsReply);
  rpc SetAccessRightsUserGroup(TestItemSetAccessRightsUserGroupRequest) returns (TestItemSetAccessRightsUserGroupReply);
  rpc SetDescription(TestItemSetDescriptionRequest) returns (TestItemSetDescriptionReply);
  rpc SetKeepRelease(TestItemSetKeepReleaseRequest) returns (TestItemSetKeepReleaseReply);
  rpc SetName(TestItemSetNameRequest) returns (TestItemSetNameReply);
  rpc SetNamePrefix(TestItemSetNamePrefixRequest) returns (TestItemSetNamePrefixReply);
  rpc SetProgram(TestItemSetProgramRequest) returns (TestItemSetProgramReply);
  rpc SetTestParameters(TestItemSetTestParametersRequest) returns (TestItemSetTestParametersReply);
  rpc SetTestSpec(TestItemSetTestSpecRequest) returns (TestItemSetTestSpecReply);
  rpc SetType(TestItemSetTypeRequest) returns (TestItemSetTypeReply);
  rpc SetTypeName(TestItemSetTypeNameRequest) returns (TestItemSetTypeNameReply);
  rpc SetVersion(TestItemSetVersionRequest) returns (TestItemSetVersionReply);
  rpc SetVersionDescription(TestItemSetVersionDescriptionRequest) returns (TestItemSetVersionDescriptionReply);
  rpc SetVersionHyperlink(TestItemSetVersionHyperlinkRequest) returns (TestItemSetVersionHyperlinkReply);
  rpc SyntaxCheck(TestItemSyntaxCheckRequest) returns (TestItemSyntaxCheckReply);
}

service TestParameter {
  rpc Delete(TestParameterDeleteRequest) returns (TestParameterDeleteReply);
  rpc GetChoiceType(TestParameterGetChoiceTypeRequest) returns (TestParameterGetChoiceTypeReply);
  rpc GetDescription(TestParameterGetDescriptionRequest) returns (TestParameterGetDescriptionReply);
  rpc GetHyperlink(TestParameterGetHyperlinkRequest) returns (TestParameterGetHyperlinkReply);
  rpc GetInherited(TestParameterGetInheritedRequest) returns (TestParameterGetInheritedReply);
  rpc GetLastUpdate(TestParameterGetLastUpdateRequest) returns (TestParameterGetLastUpdateReply);
  rpc GetName(TestParameterGetNameRequest) returns (TestParameterGetNameReply);
  rpc GetType(TestParameterGetTypeRequest) returns (TestParameterGetTypeReply);
  rpc GetUnit(TestParameterGetUnitRequest) returns (TestParameterGetUnitReply);
  rpc GetUserData(TestParameterGetUserDataRequest) returns (TestParameterGetUserDataReply);
  rpc GetValue(TestParameterGetValueRequest) returns (TestParameterGetValueReply);
  rpc SetChoiceType(TestParameterSetChoiceTypeRequest) returns (TestParameterSetChoiceTypeReply);
  rpc SetDescription(TestParameterSetDescriptionRequest) returns (TestParameterSetDescriptionReply);
  rpc SetHyperlink(TestParameterSetHyperlinkRequest) returns (TestParameterSetHyperlinkReply);
  rpc SetType(TestParameterSetTypeRequest) returns (TestParameterSetTypeReply);
  rpc SetUnit(TestParameterSetUnitRequest) returns (TestParameterSetUnitReply);
  rpc SetUserData(TestParameterSetUserDataRequest) returns (TestParameterSetUserDataReply);
  rpc SetValue(TestParameterSetValueRequest) returns (TestParameterSetValueReply);
}

service TestParameters {
  rpc Add(TestParametersAddRequest) returns (TestParametersAddReply);
  rpc GetChoiceType(TestParametersGetChoiceTypeRequest) returns (TestParametersGetChoiceTypeReply);
  rpc GetChoiceTypes(TestParametersGetChoiceTypesRequest) returns (TestParametersGetChoiceTypesReply);
  rpc GetCount(TestParametersGetCountRequest) returns (TestParametersGetCountReply);
  rpc GetItem(TestParametersGetItemRequest) returns (TestParametersGetItemReply);
  rpc SetChoiceType(TestParametersSetChoiceTypeRequest) returns (TestParametersSetChoiceTypeReply);
}

service TestProtocol {
  rpc GetCompressedSize(TestProtocolGetCompressedSizeRequest) returns (TestProtocolGetCompressedSizeReply);
  rpc GetData(TestProtocolGetDataRequest) returns (TestProtocolGetDataReply);
  rpc GetExtension(TestProtocolGetExtensionRequest) returns (TestProtocolGetExtensionReply);
  rpc GetName(TestProtocolGetNameRequest) returns (TestProtocolGetNameReply);
  rpc GetResult(TestProtocolGetResultRequest) returns (TestProtocolGetResultReply);
  rpc GetSize(TestProtocolGetSizeRequest) returns (TestProtocolGetSizeReply);
}

service TestProtocols {
  rpc GetCount(TestProtocolsGetCountRequest) returns (TestProtocolsGetCountReply);
  rpc GetItem(TestProtocolsGetItemRequest) returns (TestProtocolsGetItemReply);
}

service TestResult {
  rpc AddAttachment(TestResultAddAttachmentRequest) returns (TestResultAddAttachmentReply);
  rpc Delete(TestResultDeleteRequest) returns (TestResultDeleteReply);
  rpc ErasePersonalData(TestResultErasePersonalDataRequest) returns (TestResultErasePersonalDataReply);
  rpc ExportProtocol(TestResultExportProtocolRequest) returns (TestResultExportProtocolReply);
  rpc GetAdditionalResultValue(TestResultGetAdditionalResultValueRequest) returns (TestResultGetAdditionalResultValueReply);
  rpc GetAttachments(TestResultGetAttachmentsRequest) returns (TestResultGetAttachmentsReply);
  rpc GetChildren(TestResultGetChildrenRequest) returns (TestResultGetChildrenReply);
  rpc GetComment(TestResultGetCommentRequest) returns (TestResultGetCommentReply);
  rpc GetCompressedSize(TestResultGetCompressedSizeRequest) returns (TestResultGetCompressedSizeReply);
  rpc GetComputer(TestResultGetComputerRequest) returns (TestResultGetComputerReply);
  rpc GetDate(TestResultGetDateRequest) returns (TestResultGetDateReply);
  rpc GetDeletionDate(TestResultGetDeletionDateRequest) returns (TestResultGetDeletionDateReply);
  rpc GetExecutionTime(TestResultGetExecutionTimeRequest) returns (TestResultGetExecutionTimeReply);
  rpc GetKeywordMap(TestResultGetKeywordMapRequest) returns (TestResultGetKeywordMapReply);
  rpc GetLinks(TestResultGetLinksRequest) returns (TestResultGetLinksReply);
  rpc GetName(TestResultGetNameRequest) returns (TestResultGetNameReply);
  rpc GetParent(TestResultGetParentRequest) returns (TestResultGetParentReply);
  rpc GetPath(TestResultGetPathRequest) returns (TestResultGetPathReply);
  rpc GetResult(TestResultGetResultRequest) returns (TestResultGetResultReply);
  rpc GetRuntimeErrors(TestResultGetRuntimeErrorsRequest) returns (TestResultGetRuntimeErrorsReply);
  rpc GetSize(TestResultGetSizeRequest) returns (TestResultGetSizeReply);
  rpc GetTester(TestResultGetTesterRequest) returns (TestResultGetTesterReply);
  rpc GetTestItem(TestResultGetTestItemRequest) returns (TestResultGetTestItemReply);
  rpc GetTestParameters(TestResultGetTestParametersRequest) returns (TestResultGetTestParametersReply);
  rpc GetTestProtocols(TestResultGetTestProtocolsRequest) returns (TestResultGetTestProtocolsReply);
  rpc GetValidated(TestResultGetValidatedRequest) returns (TestResultGetValidatedReply);
  rpc GetValidatedDate(TestResultGetValidatedDateRequest) returns (TestResultGetValidatedDateReply);
  rpc GetValidatedUser(TestResultGetValidatedUserRequest) returns (TestResultGetValidatedUserReply);
  rpc GetVersion(TestResultGetVersionRequest) returns (TestResultGetVersionReply);
  rpc GetVersionLabel(TestResultGetVersionLabelRequest) returns (TestResultGetVersionLabelReply);
  rpc Restore(TestResultRestoreRequest) returns (TestResultRestoreReply);
  rpc SetAdditionalResultValue(TestResultSetAdditionalResultValueRequest) returns (TestResultSetAdditionalResultValueReply);
  rpc SetComment(TestResultSetCommentRequest) returns (TestResultSetCommentReply);
  rpc SetComputer(TestResultSetComputerRequest) returns (TestResultSetComputerReply);
  rpc SetName(TestResultSetNameRequest) returns (TestResultSetNameReply);
  rpc SetResult(TestResultSetResultRequest) returns (TestResultSetResultReply);
  rpc SetTestParameters(TestResultSetTestParametersRequest) returns (TestResultSetTestParametersReply);
  rpc SetValidated(TestResultSetValidatedRequest) returns (TestResultSetValidatedReply);
}

service TestSequencerItem {
  rpc Delete(TestSequencerItemDeleteRequest) returns (TestSequencerItemDeleteReply);
  rpc GetSequencerServer(TestSequencerItemGetSequencerServerRequest) returns (TestSequencerItemGetSequencerServerReply);
  rpc GetSkip(TestSequencerItemGetSkipRequest) returns (TestSequencerItemGetSkipReply);
  rpc GetTestItem(TestSequencerItemGetTestItemRequest) returns (TestSequencerItemGetTestItemReply);
  rpc GetTestResult(TestSequencerItemGetTestResultRequest) returns (TestSequencerItemGetTestResultReply);
  rpc GetTimeout(TestSequencerItemGetTimeoutRequest) returns (TestSequencerItemGetTimeoutReply);
  rpc GetUser(TestSequencerItemGetUserRequest) returns (TestSequencerItemGetUserReply);
  rpc GetUserData(TestSequencerItemGetUserDataRequest) returns (TestSequencerItemGetUserDataReply);
  rpc Move(TestSequencerItemMoveRequest) returns (TestSequencerItemMoveReply);
  rpc SetSkip(TestSequencerItemSetSkipRequest) returns (TestSequencerItemSetSkipReply);
  rpc SetTimeout(TestSequencerItemSetTimeoutRequest) returns (TestSequencerItemSetTimeoutReply);
  rpc SetUserData(TestSequencerItemSetUserDataRequest) returns (TestSequencerItemSetUserDataReply);
}

service TestSequencerItems {
  rpc Add(TestSequencerItemsAddRequest) returns (TestSequencerItemsAddReply);
  rpc GetCount(TestSequencerItemsGetCountRequest) returns (TestSequencerItemsGetCountReply);
  rpc GetItem(TestSequencerItemsGetItemRequest) returns (TestSequencerItemsGetItemReply);
}

service TM {
  rpc AddKeywordValue(TMAddKeywordValueRequest) returns (TMAddKeywordValueReply);
  rpc AddRuntimeError(TMAddRuntimeErrorRequest) returns (TMAddRuntimeErrorReply);
  rpc ChoosePathDialog(TMChoosePathDialogRequest) returns (TMChoosePathDialogReply);
  rpc ClearCache(TMClearCacheRequest) returns (TMClearCacheReply);
  rpc Execute(TMExecuteRequest) returns (TMExecuteReply);
  rpc ExecuteAsync(TMExecuteAsyncRequest) returns (TMExecuteAsyncReply);
  rpc ExecuteThis(TMExecuteThisRequest) returns (TMExecuteThisReply);
  rpc ExecuteThisAsync(TMExecuteThisAsyncRequest) returns (TMExecuteThisAsyncReply);
  rpc FormatCode(TMFormatCodeRequest) returns (TMFormatCodeReply);
  rpc GetAttachment(TMGetAttachmentRequest) returns (TMGetAttachmentReply);
  rpc GetExecutedItems(TMGetExecutedItemsRequest) returns (TMGetExecutedItemsReply);
  rpc GetLoadedModules(TMGetLoadedModulesRequest) returns (TMGetLoadedModulesReply);
  rpc GetSequencerServers(TMGetSequencerServersRequest) returns (TMGetSequencerServersReply);
  rpc GetTestDocument(TMGetTestDocumentRequest) returns (TMGetTestDocumentReply);
  rpc GetTestItem(TMGetTestItemRequest) returns (TMGetTestItemReply);
  rpc GetTestItem2(TMGetTestItem2Request) returns (TMGetTestItem2Reply);
  rpc GetTestResult(TMGetTestResultRequest) returns (TMGetTestResultReply);
  rpc GetUserGroups(TMGetUserGroupsRequest) returns (TMGetUserGroupsReply);
  rpc GetUserItems(TMGetUserItemsRequest) returns (TMGetUserItemsReply);
  rpc Purge(TMPurgeRequest) returns (TMPurgeReply);
}

service UserCustomAttribute {
  rpc GetChoiceType(UserCustomAttributeGetChoiceTypeRequest) returns (UserCustomAttributeGetChoiceTypeReply);
  rpc GetDescription(UserCustomAttributeGetDescriptionRequest) returns (UserCustomAttributeGetDescriptionReply);
  rpc GetHyperlink(UserCustomAttributeGetHyperlinkRequest) returns (UserCustomAttributeGetHyperlinkReply);
  rpc GetName(UserCustomAttributeGetNameRequest) returns (UserCustomAttributeGetNameReply);
  rpc GetType(UserCustomAttributeGetTypeRequest) returns (UserCustomAttributeGetTypeReply);
  rpc GetValue(UserCustomAttributeGetValueRequest) returns (UserCustomAttributeGetValueReply);
  rpc SetDescription(UserCustomAttributeSetDescriptionRequest) returns (UserCustomAttributeSetDescriptionReply);
  rpc SetHyperlink(UserCustomAttributeSetHyperlinkRequest) returns (UserCustomAttributeSetHyperlinkReply);
  rpc SetValue(UserCustomAttributeSetValueRequest) returns (UserCustomAttributeSetValueReply);
}

service UserCustomAttributes {
  rpc GetChoiceType(UserCustomAttributesGetChoiceTypeRequest) returns (UserCustomAttributesGetChoiceTypeReply);
  rpc GetChoiceTypes(UserCustomAttributesGetChoiceTypesRequest) returns (UserCustomAttributesGetChoiceTypesReply);
  rpc GetCount(UserCustomAttributesGetCountRequest) returns (UserCustomAttributesGetCountReply);
  rpc GetItem(UserCustomAttributesGetItemRequest) returns (UserCustomAttributesGetItemReply);
  rpc GetTemplateName(UserCustomAttributesGetTemplateNameRequest) returns (UserCustomAttributesGetTemplateNameReply);
  rpc Init(UserCustomAttributesInitRequest) returns (UserCustomAttributesInitReply);
  rpc SetChoiceType(UserCustomAttributesSetChoiceTypeRequest) returns (UserCustomAttributesSetChoiceTypeReply);
}

service UserGroup {
  rpc Delete(UserGroupDeleteRequest) returns (UserGroupDeleteReply);
  rpc GetDescription(UserGroupGetDescriptionRequest) returns (UserGroupGetDescriptionReply);
  rpc GetName(UserGroupGetNameRequest) returns (UserGroupGetNameReply);
  rpc GetUserItems(UserGroupGetUserItemsRequest) returns (UserGroupGetUserItemsReply);
  rpc SetDescription(UserGroupSetDescriptionRequest) returns (UserGroupSetDescriptionReply);
  rpc SetName(UserGroupSetNameRequest) returns (UserGroupSetNameReply);
}

service UserGroups {
  rpc Add(UserGroupsAddRequest) returns (UserGroupsAddReply);
  rpc GetCount(UserGroupsGetCountRequest) returns (UserGroupsGetCountReply);
  rpc GetItem(UserGroupsGetItemRequest) returns (UserGroupsGetItemReply);
}

service UserItem {
  rpc Delete(UserItemDeleteRequest) returns (UserItemDeleteReply);
  rpc GetAccessManagedByGroup(UserItemGetAccessManagedByGroupRequest) returns (UserItemGetAccessManagedByGroupReply);
  rpc GetChangePasswordRequired(UserItemGetChangePasswordRequiredRequest) returns (UserItemGetChangePasswordRequiredReply);
  rpc GetCustomAttributes(UserItemGetCustomAttributesRequest) returns (UserItemGetCustomAttributesReply);
  rpc GetDomain(UserItemGetDomainRequest) returns (UserItemGetDomainReply);
  rpc GetEMail(UserItemGetEMailRequest) returns (UserItemGetEMailReply);
  rpc GetEnabled(UserItemGetEnabledRequest) returns (UserItemGetEnabledReply);
  rpc GetExpirationDate(UserItemGetExpirationDateRequest) returns (UserItemGetExpirationDateReply);
  rpc GetFullName(UserItemGetFullNameRequest) returns (UserItemGetFullNameReply);
  rpc GetGroup(UserItemGetGroupRequest) returns (UserItemGetGroupReply);
  rpc GetLastLogonDate(UserItemGetLastLogonDateRequest) returns (UserItemGetLastLogonDateReply);
  rpc GetName(UserItemGetNameRequest) returns (UserItemGetNameReply);
  rpc GetPhone(UserItemGetPhoneRequest) returns (UserItemGetPhoneReply);
  rpc SetAccessManagedByGroup(UserItemSetAccessManagedByGroupRequest) returns (UserItemSetAccessManagedByGroupReply);
  rpc SetChangePasswordRequired(UserItemSetChangePasswordRequiredRequest) returns (UserItemSetChangePasswordRequiredReply);
  rpc SetCustomAttributes(UserItemSetCustomAttributesRequest) returns (UserItemSetCustomAttributesReply);
  rpc SetDomain(UserItemSetDomainRequest) returns (UserItemSetDomainReply);
  rpc SetEMail(UserItemSetEMailRequest) returns (UserItemSetEMailReply);
  rpc SetEnabled(UserItemSetEnabledRequest) returns (UserItemSetEnabledReply);
  rpc SetExpirationDate(UserItemSetExpirationDateRequest) returns (UserItemSetExpirationDateReply);
  rpc SetFullName(UserItemSetFullNameRequest) returns (UserItemSetFullNameReply);
  rpc SetGroup(UserItemSetGroupRequest) returns (UserItemSetGroupReply);
  rpc SetName(UserItemSetNameRequest) returns (UserItemSetNameReply);
  rpc SetPhone(UserItemSetPhoneRequest) returns (UserItemSetPhoneReply);
}

service UserItems {
  rpc Add(UserItemsAddRequest) returns (UserItemsAddReply);
  rpc GetCount(UserItemsGetCountRequest) returns (UserItemsGetCountReply);
  rpc GetItem(UserItemsGetItemRequest) returns (UserItemsGetItemReply);
}

service VariantList {
  rpc AddHead(VariantListAddHeadRequest) returns (VariantListAddHeadReply);
  rpc AddTail(VariantListAddTailRequest) returns (VariantListAddTailReply);
  rpc Find(VariantListFindRequest) returns (VariantListFindReply);
  rpc FindIndex(VariantListFindIndexRequest) returns (VariantListFindIndexReply);
  rpc GetAt(VariantListGetAtRequest) returns (VariantListGetAtReply);
  rpc GetCount(VariantListGetCountRequest) returns (VariantListGetCountReply);
  rpc GetHead(VariantListGetHeadRequest) returns (VariantListGetHeadReply);
  rpc GetHeadPosition(VariantListGetHeadPositionRequest) returns (VariantListGetHeadPositionReply);
  rpc GetNext(VariantListGetNextRequest) returns (VariantListGetNextReply);
  rpc GetPrev(VariantListGetPrevRequest) returns (VariantListGetPrevReply);
  rpc GetTail(VariantListGetTailRequest) returns (VariantListGetTailReply);
  rpc GetTailPosition(VariantListGetTailPositionRequest) returns (VariantListGetTailPositionReply);
  rpc InsertAfter(VariantListInsertAfterRequest) returns (VariantListInsertAfterReply);
  rpc InsertBefore(VariantListInsertBeforeRequest) returns (VariantListInsertBeforeReply);
  rpc IsEmpty(VariantListIsEmptyRequest) returns (VariantListIsEmptyReply);
  rpc RemoveAll(VariantListRemoveAllRequest) returns (VariantListRemoveAllReply);
  rpc RemoveAt(VariantListRemoveAtRequest) returns (VariantListRemoveAtReply);
  rpc RemoveHead(VariantListRemoveHeadRequest) returns (VariantListRemoveHeadReply);
  rpc RemoveTail(VariantListRemoveTailRequest) returns (VariantListRemoveTailReply);
  rpc SetAt(VariantListSetAtRequest) returns (VariantListSetAtReply);
  rpc Sort(VariantListSortRequest) returns (VariantListSortReply);
  //events
  rpc EventSortCompare(stream VariantListEventSortCompareResult) returns (stream VariantListEventSortCompareParams);
}

service VideoAudioContainerInfo {
  rpc GetName(VideoAudioContainerInfoGetNameRequest) returns (VideoAudioContainerInfoGetNameReply);
  rpc GetTimeOffset(VideoAudioContainerInfoGetTimeOffsetRequest) returns (VideoAudioContainerInfoGetTimeOffsetReply);
}

message ApplicationGetExecutedBeforeWatchdogRestartRequest {
}

message ApplicationGetExecutedBeforeWatchdogRestartReply {
  repeated string RetVal = 1;
  uint32 puMissingPathCount = 2;
}

message ApplicationGetObjectRequest {
  string strName = 1;
}

message ApplicationGetObjectReply {
  fixed64 RetVal = 1;
}

message ApplicationGetStatusRequest {
}

message ApplicationGetStatusReply {
  ApplicationStatus RetVal = 1;
}

message ApplicationGetVisibleRequest {
}

message ApplicationGetVisibleReply {
  bool RetVal = 1;
}

message ApplicationInitRequest {
  string strParameters = 1;
}

message ApplicationInitReply {
}

message ApplicationLockRequest {
  string strText = 1;
}

message ApplicationLockReply {
  string RetVal = 1;
}

message ApplicationSetVisibleRequest {
  bool pbVisible = 1;
}

message ApplicationSetVisibleReply {
}

message ApplicationSetWatchdogRequest {
  sint32 lTimeoutInSeconds = 1;
  string strScriptPath = 2;
}

message ApplicationSetWatchdogReply {
}

message ApplicationUnlockRequest {
  string strToken = 1;
}

message ApplicationUnlockReply {
}

message ApplicationEventAfterLoadingConfigModelParams {
}

message ApplicationEventAfterLoadingConfigModelResult {
}

message ApplicationEventBeforeLoadingConfigModelParams {
  string strUserName = 1;
  string strConfigName = 2;
  string strModelName = 3;
}

message ApplicationEventBeforeLoadingConfigModelResult {
}

message ApplicationEventLoadXcpParameterFileDoneParams {
  string strErrorText = 1;
  uint32 uId = 2;
}

message ApplicationEventLoadXcpParameterFileDoneResult {
}

message ApplicationReleaseObjectRequest {
  fixed64 ObjectId = 1;
}

message ApplicationReleaseObjectReply {
}

message ApplicationKeepObjectAliveRequest {
  fixed64 ObjectId = 1;
  uint32 Seconds = 2;
}

message ApplicationKeepObjectAliveReply {
}

message ApplicationCreateReportRequest {
}

message ApplicationCreateReportReply {
  bytes RetVal = 1;
}

message AttachmentDeleteRequest {
  fixed64 ObjectId = 1;
}

message AttachmentDeleteReply {
}

message AttachmentExportRequest {
  fixed64 ObjectId = 1;
  string strFilePath = 2;
  bool bOverwrite = 3;
}

message AttachmentExportReply {
}

message AttachmentGetCompressedSizeRequest {
  fixed64 ObjectId = 1;
}

message AttachmentGetCompressedSizeReply {
  sint64 RetVal = 1;
}

message AttachmentGetDateRequest {
  fixed64 ObjectId = 1;
}

message AttachmentGetDateReply {
  double RetVal = 1;
}

message AttachmentGetLinkRequest {
  fixed64 ObjectId = 1;
}

message AttachmentGetLinkReply {
  string RetVal = 1;
}

message AttachmentGetNameRequest {
  fixed64 ObjectId = 1;
}

message AttachmentGetNameReply {
  string RetVal = 1;
}

message AttachmentGetPathRequest {
  fixed64 ObjectId = 1;
  bool bUseDatabaseId = 2;
}

message AttachmentGetPathReply {
  string RetVal = 1;
}

message AttachmentGetSizeRequest {
  fixed64 ObjectId = 1;
}

message AttachmentGetSizeReply {
  sint64 RetVal = 1;
}

message AttachmentGetTypeRequest {
  fixed64 ObjectId = 1;
}

message AttachmentGetTypeReply {
  string RetVal = 1;
}

message AttachmentSetNameRequest {
  fixed64 ObjectId = 1;
  string pVal = 2;
}

message AttachmentSetNameReply {
}

message BaseMsgGetChannelRequest {
  fixed64 ObjectId = 1;
}

message BaseMsgGetChannelReply {
  string RetVal = 1;
}

message BaseMsgGetHWTimeStampRequest {
  fixed64 ObjectId = 1;
}

message BaseMsgGetHWTimeStampReply {
  double RetVal = 1;
}

message BaseMsgGetRxRequest {
  fixed64 ObjectId = 1;
}

message BaseMsgGetRxReply {
  bool RetVal = 1;
}

message BaseMsgGetSWTimeStampRequest {
  fixed64 ObjectId = 1;
}

message BaseMsgGetSWTimeStampReply {
  double RetVal = 1;
}

message BaseMsgSetChannelRequest {
  fixed64 ObjectId = 1;
  string pstrChannel = 2;
}

message BaseMsgSetChannelReply {
}

message BranchSelectionAddRequest {
  fixed64 pCurrent = 1;
}

message BranchSelectionAddReply {
}

message BranchSelectionGetOriginRequest {
  fixed64 pTestItem = 1;
}

message BranchSelectionGetOriginReply {
  fixed64 RetVal = 1;
}

message BranchSelectionGetTestVersionsRequest {
}

message BranchSelectionGetTestVersionsReply {
  repeated fixed64 RetVal = 1;
}

message BranchSelectionLoadRequest {
  string strPath = 1;
}

message BranchSelectionLoadReply {
}

message BranchSelectionRemoveRequest {
}

message BranchSelectionRemoveReply {
}

message BranchSelectionResetRequest {
}

message BranchSelectionResetReply {
}

message BranchSelectionSaveRequest {
  string strPath = 1;
  bool bOverwrite = 2;
}

message BranchSelectionSaveReply {
}

message CalculatedSignalGetDescriptionRequest {
  fixed64 ObjectId = 1;
}

message CalculatedSignalGetDescriptionReply {
  string RetVal = 1;
}

message CalculatedSignalGetExpressionRequest {
  fixed64 ObjectId = 1;
}

message CalculatedSignalGetExpressionReply {
  string RetVal = 1;
}

message CalculatedSignalGetLowerLimitRequest {
  fixed64 ObjectId = 1;
}

message CalculatedSignalGetLowerLimitReply {
  oneof RetVal {
    double RetVal_double = 31;
    sint64 RetVal_int64 = 33;
    uint64 RetVal_uint64 = 35;
  }
}

message CalculatedSignalGetSignalRequest {
  fixed64 ObjectId = 1;
}

message CalculatedSignalGetSignalReply {
  string RetVal = 1;
}

message CalculatedSignalGetUnitRequest {
  fixed64 ObjectId = 1;
}

message CalculatedSignalGetUnitReply {
  string RetVal = 1;
}

message CalculatedSignalGetUpperLimitRequest {
  fixed64 ObjectId = 1;
}

message CalculatedSignalGetUpperLimitReply {
  oneof RetVal {
    double RetVal_double = 31;
    sint64 RetVal_int64 = 33;
    uint64 RetVal_uint64 = 35;
  }
}

message CalculatedSignalSetDescriptionRequest {
  fixed64 ObjectId = 1;
  string pstrDescription = 2;
}

message CalculatedSignalSetDescriptionReply {
}

message CalculatedSignalSetExpressionRequest {
  fixed64 ObjectId = 1;
  string pstrExpression = 2;
}

message CalculatedSignalSetExpressionReply {
}

message CalculatedSignalSetLowerLimitRequest {
  fixed64 ObjectId = 1;
  oneof pvLowerLimit {
    double pvLowerLimit_double = 31;
    sint64 pvLowerLimit_int64 = 33;
    uint64 pvLowerLimit_uint64 = 35;
  }
}

message CalculatedSignalSetLowerLimitReply {
}

message CalculatedSignalSetSignalRequest {
  fixed64 ObjectId = 1;
  string pstrSignalName = 2;
}

message CalculatedSignalSetSignalReply {
}

message CalculatedSignalSetUnitRequest {
  fixed64 ObjectId = 1;
  string pstrUnit = 2;
}

message CalculatedSignalSetUnitReply {
}

message CalculatedSignalSetUpperLimitRequest {
  fixed64 ObjectId = 1;
  oneof pvUpperLimit {
    double pvUpperLimit_double = 31;
    sint64 pvUpperLimit_int64 = 33;
    uint64 pvUpperLimit_uint64 = 35;
  }
}

message CalculatedSignalSetUpperLimitReply {
}

message CanEventFilterGetEventMaskRequest {
  fixed64 ObjectId = 1;
}

message CanEventFilterGetEventMaskReply {
  CanEventMsgType RetVal = 1;
}

message CanEventFilterGetPassRequest {
  fixed64 ObjectId = 1;
}

message CanEventFilterGetPassReply {
  bool RetVal = 1;
}

message CanEventFilterGetRxRequest {
  fixed64 ObjectId = 1;
}

message CanEventFilterGetRxReply {
  bool RetVal = 1;
}

message CanEventFilterGetTxRequest {
  fixed64 ObjectId = 1;
}

message CanEventFilterGetTxReply {
  bool RetVal = 1;
}

message CanEventFilterSetEventMaskRequest {
  fixed64 ObjectId = 1;
  CanEventMsgType peMask = 2;
}

message CanEventFilterSetEventMaskReply {
}

message CanEventFilterSetPassRequest {
  fixed64 ObjectId = 1;
  bool pbPass = 2;
}

message CanEventFilterSetPassReply {
}

message CanEventFilterSetRxRequest {
  fixed64 ObjectId = 1;
  bool pbRx = 2;
}

message CanEventFilterSetRxReply {
}

message CanEventFilterSetTxRequest {
  fixed64 ObjectId = 1;
  bool pbTx = 2;
}

message CanEventFilterSetTxReply {
}

message CanEventMsgGetErrorFrameTypeRequest {
  fixed64 ObjectId = 1;
}

message CanEventMsgGetErrorFrameTypeReply {
  sint32 RetVal = 1;
}

message CanEventMsgGetEventRequest {
  fixed64 ObjectId = 1;
}

message CanEventMsgGetEventReply {
  CanEventMsgType RetVal = 1;
}

message CanEventMsgSendRequest {
  fixed64 ObjectId = 1;
}

message CanEventMsgSendReply {
}

message CanEventMsgSetEventRequest {
  fixed64 ObjectId = 1;
  CanEventMsgType peEvent = 2;
}

message CanEventMsgSetEventReply {
}

message CanFilterApplyRequest {
  fixed64 ObjectId = 1;
  fixed64 pEvaluation = 2;
}

message CanFilterApplyReply {
}

message CanFilterGetIdMaxRequest {
  fixed64 ObjectId = 1;
}

message CanFilterGetIdMaxReply {
  sint32 RetVal = 1;
}

message CanFilterGetIdMinRequest {
  fixed64 ObjectId = 1;
}

message CanFilterGetIdMinReply {
  sint32 RetVal = 1;
}

message CanFilterGetPassRequest {
  fixed64 ObjectId = 1;
}

message CanFilterGetPassReply {
  bool RetVal = 1;
}

message CanFilterGetRxRequest {
  fixed64 ObjectId = 1;
}

message CanFilterGetRxReply {
  bool RetVal = 1;
}

message CanFilterGetTxRequest {
  fixed64 ObjectId = 1;
}

message CanFilterGetTxReply {
  bool RetVal = 1;
}

message CanFilterSetIdRequest {
  fixed64 ObjectId = 1;
  sint32 Id = 2;
}

message CanFilterSetIdReply {
}

message CanFilterSetIdMaxRequest {
  fixed64 ObjectId = 1;
  sint32 plIdMax = 2;
}

message CanFilterSetIdMaxReply {
}

message CanFilterSetIdMinRequest {
  fixed64 ObjectId = 1;
  sint32 plIdMin = 2;
}

message CanFilterSetIdMinReply {
}

message CanFilterSetNameRequest {
  fixed64 ObjectId = 1;
  string strChannel = 2;
  string Name = 3;
}

message CanFilterSetNameReply {
}

message CanFilterSetPassRequest {
  fixed64 ObjectId = 1;
  bool pbPass = 2;
}

message CanFilterSetPassReply {
}

message CanFilterSetRxRequest {
  fixed64 ObjectId = 1;
  bool pbRx = 2;
}

message CanFilterSetRxReply {
}

message CanFilterSetTxRequest {
  fixed64 ObjectId = 1;
  bool pbTx = 2;
}

message CanFilterSetTxReply {
}

message CanMsgGetBitRateSwitchRequest {
  fixed64 ObjectId = 1;
}

message CanMsgGetBitRateSwitchReply {
  bool RetVal = 1;
}

message CanMsgGetDataRequest {
  fixed64 ObjectId = 1;
}

message CanMsgGetDataReply {
  bytes RetVal = 1;
}

message CanMsgGetErrorStateIndicatorRequest {
  fixed64 ObjectId = 1;
}

message CanMsgGetErrorStateIndicatorReply {
  bool RetVal = 1;
}

message CanMsgGetExtendedDataLengthRequest {
  fixed64 ObjectId = 1;
}

message CanMsgGetExtendedDataLengthReply {
  bool RetVal = 1;
}

message CanMsgGetIdRequest {
  fixed64 ObjectId = 1;
  optional bool bInitData = 2;
}

message CanMsgGetIdReply {
  sint32 RetVal = 1;
}

message CanMsgGetNameRequest {
  fixed64 ObjectId = 1;
  optional bool bInitData = 2;
}

message CanMsgGetNameReply {
  string RetVal = 1;
}

message CanMsgGetSignalRequest {
  fixed64 ObjectId = 1;
  oneof Signal {
    sint32 Signal_int32 = 39;
    string Signal_string = 40;
  }
}

message CanMsgGetSignalReply {
  fixed64 RetVal = 1;
}

message CanMsgGetSignalCountRequest {
  fixed64 ObjectId = 1;
}

message CanMsgGetSignalCountReply {
  sint32 RetVal = 1;
}

message CanMsgSendRequest {
  fixed64 ObjectId = 1;
}

message CanMsgSendReply {
}

message CanMsgSetBitRateSwitchRequest {
  fixed64 ObjectId = 1;
  bool pbBitRateSwitch = 2;
}

message CanMsgSetBitRateSwitchReply {
}

message CanMsgSetDataRequest {
  fixed64 ObjectId = 1;
  bytes paData = 2;
}

message CanMsgSetDataReply {
}

message CanMsgSetExtendedDataLengthRequest {
  fixed64 ObjectId = 1;
  bool pExtendedDataLength = 2;
}

message CanMsgSetExtendedDataLengthReply {
}

message CanMsgSetIdRequest {
  fixed64 ObjectId = 1;
  optional bool bInitData = 2;
  sint32 plId = 3;
}

message CanMsgSetIdReply {
}

message CanMsgSetNameRequest {
  fixed64 ObjectId = 1;
  optional bool bInitData = 2;
  string pstrName = 3;
}

message CanMsgSetNameReply {
}

message CanRemoteMsgGetIdRequest {
  fixed64 ObjectId = 1;
  optional bool bInitLength = 2;
}

message CanRemoteMsgGetIdReply {
  sint32 RetVal = 1;
}

message CanRemoteMsgGetLengthRequest {
  fixed64 ObjectId = 1;
}

message CanRemoteMsgGetLengthReply {
  uint32 RetVal = 1;
}

message CanRemoteMsgGetNameRequest {
  fixed64 ObjectId = 1;
  optional bool bInitLength = 2;
}

message CanRemoteMsgGetNameReply {
  string RetVal = 1;
}

message CanRemoteMsgSendRequest {
  fixed64 ObjectId = 1;
}

message CanRemoteMsgSendReply {
}

message CanRemoteMsgSetIdRequest {
  fixed64 ObjectId = 1;
  optional bool bInitLength = 2;
  sint32 plId = 3;
}

message CanRemoteMsgSetIdReply {
}

message CanRemoteMsgSetLengthRequest {
  fixed64 ObjectId = 1;
  uint32 pbyLength = 2;
}

message CanRemoteMsgSetLengthReply {
}

message CanRemoteMsgSetNameRequest {
  fixed64 ObjectId = 1;
  optional bool bInitLength = 2;
  string pstrName = 3;
}

message CanRemoteMsgSetNameReply {
}

message CanSignalGetCommentRequest {
  fixed64 ObjectId = 1;
}

message CanSignalGetCommentReply {
  string RetVal = 1;
}

message CanSignalGetNameRequest {
  fixed64 ObjectId = 1;
}

message CanSignalGetNameReply {
  string RetVal = 1;
}

message CanSignalGetRawValueRequest {
  fixed64 ObjectId = 1;
}

message CanSignalGetRawValueReply {
  oneof RetVal {
    uint64 RetVal_uint64 = 35;
    bytes RetVal_uint8array = 37;
  }
}

message CanSignalGetUnitRequest {
  fixed64 ObjectId = 1;
}

message CanSignalGetUnitReply {
  string RetVal = 1;
}

message CanSignalGetValueRequest {
  fixed64 ObjectId = 1;
}

message CanSignalGetValueReply {
  oneof RetVal {
    double RetVal_double = 31;
    sint64 RetVal_int64 = 33;
    uint64 RetVal_uint64 = 35;
    bytes RetVal_uint8array = 37;
    string RetVal_string = 40;
  }
}

message CanSignalSetRawValueRequest {
  fixed64 ObjectId = 1;
  oneof pVal {
    sint64 pVal_int64 = 33;
    uint64 pVal_uint64 = 35;
    bytes pVal_uint8array = 37;
  }
}

message CanSignalSetRawValueReply {
}

message CanSignalSetValueRequest {
  fixed64 ObjectId = 1;
  oneof pVal {
    double pVal_double = 31;
    sint64 pVal_int64 = 33;
    uint64 pVal_uint64 = 35;
    bytes pVal_uint8array = 37;
    string pVal_string = 40;
  }
}

message CanSignalSetValueReply {
}

message CreateRemoveSignalGetAddressRequest {
  fixed64 ObjectId = 1;
}

message CreateRemoveSignalGetAddressReply {
  uint64 RetVal = 1;
}

message CreateRemoveSignalGetAttributesRequest {
  fixed64 ObjectId = 1;
}

message CreateRemoveSignalGetAttributesReply {
  fixed64 RetVal = 1;
}

message CreateRemoveSignalGetCoefficientsRequest {
  fixed64 ObjectId = 1;
}

message CreateRemoveSignalGetCoefficientsReply {
  repeated double RetVal = 1;
}

message CreateRemoveSignalGetDataTypeRequest {
  fixed64 ObjectId = 1;
}

message CreateRemoveSignalGetDataTypeReply {
  DataType RetVal = 1;
}

message CreateRemoveSignalGetDescriptionRequest {
  fixed64 ObjectId = 1;
}

message CreateRemoveSignalGetDescriptionReply {
  string RetVal = 1;
}

message CreateRemoveSignalGetDimensionsRequest {
  fixed64 ObjectId = 1;
}

message CreateRemoveSignalGetDimensionsReply {
  repeated sint32 RetVal = 1;
}

message CreateRemoveSignalGetHiddenRequest {
  fixed64 ObjectId = 1;
}

message CreateRemoveSignalGetHiddenReply {
  bool RetVal = 1;
}

message CreateRemoveSignalGetLowerLimitRequest {
  fixed64 ObjectId = 1;
}

message CreateRemoveSignalGetLowerLimitReply {
  oneof RetVal {
    double RetVal_double = 31;
    sint64 RetVal_int64 = 33;
    uint64 RetVal_uint64 = 35;
  }
}

message CreateRemoveSignalGetProcessorIndexRequest {
  fixed64 ObjectId = 1;
}

message CreateRemoveSignalGetProcessorIndexReply {
  sint32 RetVal = 1;
}

message CreateRemoveSignalGetReadOnlyRequest {
  fixed64 ObjectId = 1;
}

message CreateRemoveSignalGetReadOnlyReply {
  bool RetVal = 1;
}

message CreateRemoveSignalGetResetValueRequest {
  fixed64 ObjectId = 1;
}

message CreateRemoveSignalGetResetValueReply {
  oneof RetVal {
    double RetVal_double = 31;
    sint64 RetVal_int64 = 33;
    uint64 RetVal_uint64 = 35;
  }
}

message CreateRemoveSignalGetSignalRequest {
  fixed64 ObjectId = 1;
}

message CreateRemoveSignalGetSignalReply {
  string RetVal = 1;
}

message CreateRemoveSignalGetSignalValueTextMappingRequest {
  fixed64 ObjectId = 1;
}

message CreateRemoveSignalGetSignalValueTextMappingReply {
  repeated fixed64 RetVal = 1;
}

message CreateRemoveSignalGetUnitRequest {
  fixed64 ObjectId = 1;
}

message CreateRemoveSignalGetUnitReply {
  string RetVal = 1;
}

message CreateRemoveSignalGetUpperLimitRequest {
  fixed64 ObjectId = 1;
}

message CreateRemoveSignalGetUpperLimitReply {
  oneof RetVal {
    double RetVal_double = 31;
    sint64 RetVal_int64 = 33;
    uint64 RetVal_uint64 = 35;
  }
}

message CreateRemoveSignalSetAddressRequest {
  fixed64 ObjectId = 1;
  uint64 puAddress = 2;
}

message CreateRemoveSignalSetAddressReply {
}

message CreateRemoveSignalSetDataTypeRequest {
  fixed64 ObjectId = 1;
  DataType pDataType = 2;
}

message CreateRemoveSignalSetDataTypeReply {
}

message CreateRemoveSignalSetDescriptionRequest {
  fixed64 ObjectId = 1;
  string pstrDescription = 2;
}

message CreateRemoveSignalSetDescriptionReply {
}

message CreateRemoveSignalSetDimensionsRequest {
  fixed64 ObjectId = 1;
  repeated sint32 plaDimensions = 2;
}

message CreateRemoveSignalSetDimensionsReply {
}

message CreateRemoveSignalSetHiddenRequest {
  fixed64 ObjectId = 1;
  bool pbHidden = 2;
}

message CreateRemoveSignalSetHiddenReply {
}

message CreateRemoveSignalSetLowerLimitRequest {
  fixed64 ObjectId = 1;
  oneof pvLowerLimit {
    double pvLowerLimit_double = 31;
    sint64 pvLowerLimit_int64 = 33;
    uint64 pvLowerLimit_uint64 = 35;
  }
}

message CreateRemoveSignalSetLowerLimitReply {
}

message CreateRemoveSignalSetProcessorIndexRequest {
  fixed64 ObjectId = 1;
  sint32 plProcessorIndex = 2;
}

message CreateRemoveSignalSetProcessorIndexReply {
}

message CreateRemoveSignalSetReadOnlyRequest {
  fixed64 ObjectId = 1;
  bool pbReadOnly = 2;
}

message CreateRemoveSignalSetReadOnlyReply {
}

message CreateRemoveSignalSetResetValueRequest {
  fixed64 ObjectId = 1;
  oneof pvResetValue {
    double pvResetValue_double = 31;
    sint64 pvResetValue_int64 = 33;
    uint64 pvResetValue_uint64 = 35;
  }
}

message CreateRemoveSignalSetResetValueReply {
}

message CreateRemoveSignalSetSignalRequest {
  fixed64 ObjectId = 1;
  string pstrSignalName = 2;
}

message CreateRemoveSignalSetSignalReply {
}

message CreateRemoveSignalSetSignalValueTextMappingRequest {
  fixed64 ObjectId = 1;
  repeated fixed64 ppaSignalValueTextMapping = 2;
}

message CreateRemoveSignalSetSignalValueTextMappingReply {
}

message CreateRemoveSignalSetUnitRequest {
  fixed64 ObjectId = 1;
  string pstrUnit = 2;
}

message CreateRemoveSignalSetUnitReply {
}

message CreateRemoveSignalSetUpperLimitRequest {
  fixed64 ObjectId = 1;
  oneof pvUpperLimit {
    double pvUpperLimit_double = 31;
    sint64 pvUpperLimit_int64 = 33;
    uint64 pvUpperLimit_uint64 = 35;
  }
}

message CreateRemoveSignalSetUpperLimitReply {
}

message DgnActivateRequest {
  string strECUName = 1;
  optional bool bActivate = 2;
  uint32 uTimeoutSec = 3;
}

message DgnActivateReply {
}

message DgnGetDiagServerVersionRequest {
}

message DgnGetDiagServerVersionReply {
  sint32 RetVal = 1;
  sint32 plMinorVersion = 2;
  sint32 plRevision = 3;
}

message DgnGetDoIPInfoRequest {
}

message DgnGetDoIPInfoReply {
  string RetVal = 1;
}

message DgnGetDtcsRequest {
  string strECUName = 1;
}

message DgnGetDtcsReply {
  fixed64 RetVal = 1;
}

message DgnGetEcusRequest {
}

message DgnGetEcusReply {
  fixed64 RetVal = 1;
}

message DgnGetInterfaceResourcesRequest {
  string strInterface = 1;
}

message DgnGetInterfaceResourcesReply {
  repeated string RetVal = 1;
}

message DgnGetInterfacesRequest {
  optional InterfaceType itType = 1;
}

message DgnGetInterfacesReply {
  repeated string RetVal = 1;
}

message DgnGetIsStartedRequest {
}

message DgnGetIsStartedReply {
  bool RetVal = 1;
}

message DgnGetJobRequest {
  string strECUName = 1;
  string strJobName = 2;
}

message DgnGetJobReply {
  fixed64 RetVal = 1;
}

message DgnGetJobsRequest {
  string strECUName = 1;
}

message DgnGetJobsReply {
  fixed64 RetVal = 1;
}

message DgnGetProjectsRequest {
}

message DgnGetProjectsReply {
  repeated string RetVal = 1;
}

message DgnGetServiceRequest {
  string strECUName = 1;
  string strServiceName = 2;
}

message DgnGetServiceReply {
  fixed64 RetVal = 1;
}

message DgnGetServicesRequest {
  string strECUName = 1;
}

message DgnGetServicesReply {
  fixed64 RetVal = 1;
}

message DgnGetVehicleInformationsRequest {
  string strProject = 1;
  uint32 uTimeoutSec = 2;
}

message DgnGetVehicleInformationsReply {
  repeated string RetVal = 1;
}

message DgnLoadAedRequest {
  string strFilePath = 1;
  bool bIncludePrefix = 2;
}

message DgnLoadAedReply {
  fixed64 RetVal = 1;
}

message DgnLoadFlashFileRequest {
  string strPath = 1;
}

message DgnLoadFlashFileReply {
  repeated string RetVal = 1;
}

message DgnLoadProjectRequest {
  string strProject = 1;
  string strVehicleInfo = 2;
  uint32 uTimeoutSec = 3;
}

message DgnLoadProjectReply {
}

message DgnReinitDoIPRequest {
  uint32 uTimeoutSec = 1;
}

message DgnReinitDoIPReply {
}

message DgnResetRequest {
  optional bool bRestart = 1;
  uint32 uTimeoutSec = 2;
}

message DgnResetReply {
}

message DgnSaveAedRequest {
  string strFilePath = 1;
  string strConfigName = 2;
  string strDomainName = 3;
  bytes byaCodeString = 4;
}

message DgnSaveAedReply {
}

message DgnStartMonitoringDoIPRequest {
  string strNetAdapter = 1;
  string strPath = 2;
}

message DgnStartMonitoringDoIPReply {
}

message DgnStopMonitoringDoIPRequest {
}

message DgnStopMonitoringDoIPReply {
}

message DgnUnloadFlashFilesRequest {
}

message DgnUnloadFlashFilesReply {
}

message DgnCodingDomainGetCodeStringRequest {
  fixed64 ObjectId = 1;
}

message DgnCodingDomainGetCodeStringReply {
  bytes RetVal = 1;
}

message DgnCodingDomainGetDescriptionRequest {
  fixed64 ObjectId = 1;
}

message DgnCodingDomainGetDescriptionReply {
  string RetVal = 1;
}

message DgnCodingDomainGetDIDRequest {
  fixed64 ObjectId = 1;
}

message DgnCodingDomainGetDIDReply {
  uint32 RetVal = 1;
}

message DgnCodingDomainGetDomainNameRequest {
  fixed64 ObjectId = 1;
}

message DgnCodingDomainGetDomainNameReply {
  string RetVal = 1;
}

message DgnCodingDomainGetFragmentsRequest {
  fixed64 ObjectId = 1;
}

message DgnCodingDomainGetFragmentsReply {
  fixed64 RetVal = 1;
}

message DgnCodingDomainGetLastResultReadRequest {
  fixed64 ObjectId = 1;
}

message DgnCodingDomainGetLastResultReadReply {
  fixed64 RetVal = 1;
}

message DgnCodingDomainGetLastResultWriteRequest {
  fixed64 ObjectId = 1;
}

message DgnCodingDomainGetLastResultWriteReply {
  fixed64 RetVal = 1;
}

message DgnCodingDomainGetLongNameRequest {
  fixed64 ObjectId = 1;
}

message DgnCodingDomainGetLongNameReply {
  string RetVal = 1;
}

message DgnCodingDomainGetNameRequest {
  fixed64 ObjectId = 1;
}

message DgnCodingDomainGetNameReply {
  string RetVal = 1;
}

message DgnCodingDomainGetSIDRequest {
  fixed64 ObjectId = 1;
}

message DgnCodingDomainGetSIDReply {
  uint32 RetVal = 1;
}

message DgnCodingDomainGetSyncRequest {
  fixed64 ObjectId = 1;
}

message DgnCodingDomainGetSyncReply {
  bool RetVal = 1;
}

message DgnCodingDomainGetVcdQualifierRequest {
  fixed64 ObjectId = 1;
}

message DgnCodingDomainGetVcdQualifierReply {
  string RetVal = 1;
}

message DgnCodingDomainReadCodingRequest {
  fixed64 ObjectId = 1;
  uint32 uTimeoutSec = 2;
}

message DgnCodingDomainReadCodingReply {
  fixed64 RetVal = 1;
}

message DgnCodingDomainReadCodingAsyncRequest {
  fixed64 ObjectId = 1;
}

message DgnCodingDomainReadCodingAsyncReply {
}

message DgnCodingDomainSetCodeStringRequest {
  fixed64 ObjectId = 1;
  bytes pbaCodeString = 2;
}

message DgnCodingDomainSetCodeStringReply {
}

message DgnCodingDomainWaitForResultReadRequest {
  fixed64 ObjectId = 1;
}

message DgnCodingDomainWaitForResultReadReply {
  fixed64 RetVal = 1;
}

message DgnCodingDomainWaitForResultWriteRequest {
  fixed64 ObjectId = 1;
}

message DgnCodingDomainWaitForResultWriteReply {
  fixed64 RetVal = 1;
}

message DgnCodingDomainWriteCodingRequest {
  fixed64 ObjectId = 1;
  uint32 uTimeoutSec = 2;
}

message DgnCodingDomainWriteCodingReply {
  fixed64 RetVal = 1;
}

message DgnCodingDomainWriteCodingAsyncRequest {
  fixed64 ObjectId = 1;
}

message DgnCodingDomainWriteCodingAsyncReply {
}

message DgnCodingDomainsGetCountRequest {
  fixed64 ObjectId = 1;
}

message DgnCodingDomainsGetCountReply {
  sint32 RetVal = 1;
}

message DgnCodingDomainsGetItemRequest {
  fixed64 ObjectId = 1;
  oneof vIndex {
    sint32 vIndex_int32 = 39;
    string vIndex_string = 40;
  }
}

message DgnCodingDomainsGetItemReply {
  fixed64 RetVal = 1;
}

message DgnCodingDomainsReadCodingsRequest {
  fixed64 ObjectId = 1;
  string strListOfDomains = 2;
  uint32 uTimeoutSec = 3;
}

message DgnCodingDomainsReadCodingsReply {
  repeated fixed64 RetVal = 1;
}

message DgnCodingDomainsWriteCodingsRequest {
  fixed64 ObjectId = 1;
  string strListOfDomains = 2;
  uint32 uTimeoutSec = 3;
}

message DgnCodingDomainsWriteCodingsReply {
  repeated fixed64 RetVal = 1;
}

message DgnDbResponseGetCountRequest {
  fixed64 ObjectId = 1;
}

message DgnDbResponseGetCountReply {
  sint32 RetVal = 1;
}

message DgnDbResponseGetDescriptionRequest {
  fixed64 ObjectId = 1;
}

message DgnDbResponseGetDescriptionReply {
  string RetVal = 1;
}

message DgnDbResponseGetLongNameRequest {
  fixed64 ObjectId = 1;
}

message DgnDbResponseGetLongNameReply {
  string RetVal = 1;
}

message DgnDbResponseGetNameRequest {
  fixed64 ObjectId = 1;
}

message DgnDbResponseGetNameReply {
  string RetVal = 1;
}

message DgnDbResponseGetParamRequest {
  fixed64 ObjectId = 1;
  oneof vParameter {
    sint32 vParameter_int32 = 39;
    string vParameter_string = 40;
  }
}

message DgnDbResponseGetParamReply {
  fixed64 RetVal = 1;
}

message DgnDbResponseGetTypeRequest {
  fixed64 ObjectId = 1;
}

message DgnDbResponseGetTypeReply {
  ResponseType RetVal = 1;
}

message DgnDbResponseParamGetCountRequest {
  fixed64 ObjectId = 1;
}

message DgnDbResponseParamGetCountReply {
  sint32 RetVal = 1;
}

message DgnDbResponseParamGetDescriptionRequest {
  fixed64 ObjectId = 1;
}

message DgnDbResponseParamGetDescriptionReply {
  string RetVal = 1;
}

message DgnDbResponseParamGetIndexRequest {
  fixed64 ObjectId = 1;
}

message DgnDbResponseParamGetIndexReply {
  sint32 RetVal = 1;
}

message DgnDbResponseParamGetLongNameRequest {
  fixed64 ObjectId = 1;
}

message DgnDbResponseParamGetLongNameReply {
  string RetVal = 1;
}

message DgnDbResponseParamGetNameRequest {
  fixed64 ObjectId = 1;
}

message DgnDbResponseParamGetNameReply {
  string RetVal = 1;
}

message DgnDbResponseParamGetParamRequest {
  fixed64 ObjectId = 1;
  oneof vParameter {
    sint32 vParameter_int32 = 39;
    string vParameter_string = 40;
  }
}

message DgnDbResponseParamGetParamReply {
  fixed64 RetVal = 1;
}

message DgnDbResponseParamGetTypeRequest {
  fixed64 ObjectId = 1;
}

message DgnDbResponseParamGetTypeReply {
  DgnDataType RetVal = 1;
}

message DgnDbResponseParamGetUnitRequest {
  fixed64 ObjectId = 1;
}

message DgnDbResponseParamGetUnitReply {
  string RetVal = 1;
}

message DgnDbResponseParamGetValidValuesRequest {
  fixed64 ObjectId = 1;
}

message DgnDbResponseParamGetValidValuesReply {
  repeated string RetVal = 1;
}

message DgnDtcGetCodeRequest {
  fixed64 ObjectId = 1;
}

message DgnDtcGetCodeReply {
  sint32 RetVal = 1;
}

message DgnDtcGetDescriptionRequest {
  fixed64 ObjectId = 1;
}

message DgnDtcGetDescriptionReply {
  string RetVal = 1;
}

message DgnDtcGetLevelRequest {
  fixed64 ObjectId = 1;
}

message DgnDtcGetLevelReply {
  sint32 RetVal = 1;
}

message DgnDtcGetLongNameRequest {
  fixed64 ObjectId = 1;
}

message DgnDtcGetLongNameReply {
  string RetVal = 1;
}

message DgnDtcGetNameRequest {
  fixed64 ObjectId = 1;
}

message DgnDtcGetNameReply {
  string RetVal = 1;
}

message DgnDtcGetTextRequest {
  fixed64 ObjectId = 1;
}

message DgnDtcGetTextReply {
  string RetVal = 1;
}

message DgnDtcsGetCountRequest {
  fixed64 ObjectId = 1;
}

message DgnDtcsGetCountReply {
  sint32 RetVal = 1;
}

message DgnDtcsGetItemRequest {
  fixed64 ObjectId = 1;
  oneof vIndex {
    sint32 vIndex_int32 = 39;
    string vIndex_string = 40;
  }
}

message DgnDtcsGetItemReply {
  fixed64 RetVal = 1;
}

message DgnEcuGetActivatedRequest {
  fixed64 ObjectId = 1;
}

message DgnEcuGetActivatedReply {
  bool RetVal = 1;
}

message DgnEcuGetCheckVariantOnActivationRequest {
  fixed64 ObjectId = 1;
}

message DgnEcuGetCheckVariantOnActivationReply {
  CheckVariantOnActivation RetVal = 1;
}

message DgnEcuGetCodingDomainsRequest {
  fixed64 ObjectId = 1;
}

message DgnEcuGetCodingDomainsReply {
  fixed64 RetVal = 1;
}

message DgnEcuGetDataVersionRequest {
  fixed64 ObjectId = 1;
}

message DgnEcuGetDataVersionReply {
  string RetVal = 1;
}

message DgnEcuGetDescriptionRequest {
  fixed64 ObjectId = 1;
}

message DgnEcuGetDescriptionReply {
  string RetVal = 1;
}

message DgnEcuGetDtcsRequest {
  fixed64 ObjectId = 1;
}

message DgnEcuGetDtcsReply {
  fixed64 RetVal = 1;
}

message DgnEcuGetExtendedSessionRequest {
  fixed64 ObjectId = 1;
  uint32 uTimeoutSec = 2;
}

message DgnEcuGetExtendedSessionReply {
  bool RetVal = 1;
}

message DgnEcuGetJobsRequest {
  fixed64 ObjectId = 1;
}

message DgnEcuGetJobsReply {
  fixed64 RetVal = 1;
}

message DgnEcuGetLogicalLinkRequest {
  fixed64 ObjectId = 1;
}

message DgnEcuGetLogicalLinkReply {
  string RetVal = 1;
}

message DgnEcuGetLogicalLinksRequest {
  fixed64 ObjectId = 1;
}

message DgnEcuGetLogicalLinksReply {
  repeated string RetVal = 1;
}

message DgnEcuGetLongNameRequest {
  fixed64 ObjectId = 1;
}

message DgnEcuGetLongNameReply {
  string RetVal = 1;
}

message DgnEcuGetNameRequest {
  fixed64 ObjectId = 1;
}

message DgnEcuGetNameReply {
  string RetVal = 1;
}

message DgnEcuGetServicesRequest {
  fixed64 ObjectId = 1;
}

message DgnEcuGetServicesReply {
  fixed64 RetVal = 1;
}

message DgnEcuGetSyncRequest {
  fixed64 ObjectId = 1;
}

message DgnEcuGetSyncReply {
  bool RetVal = 1;
}

message DgnEcuGetVariantRequest {
  fixed64 ObjectId = 1;
  uint32 uTimeoutSec = 2;
}

message DgnEcuGetVariantReply {
  string RetVal = 1;
}

message DgnEcuGetVariantsRequest {
  fixed64 ObjectId = 1;
}

message DgnEcuGetVariantsReply {
  repeated string RetVal = 1;
}

message DgnEcuResetSyncRequest {
  fixed64 ObjectId = 1;
}

message DgnEcuResetSyncReply {
}

message DgnEcuSetCheckVariantOnActivationRequest {
  fixed64 ObjectId = 1;
  CheckVariantOnActivation peCheckVariant = 2;
}

message DgnEcuSetCheckVariantOnActivationReply {
}

message DgnEcuSetExtendedSessionRequest {
  fixed64 ObjectId = 1;
  uint32 uTimeoutSec = 2;
  bool pbExtendedSession = 3;
}

message DgnEcuSetExtendedSessionReply {
}

message DgnEcuSetLogicalLinkRequest {
  fixed64 ObjectId = 1;
  string pstrLogicalLink = 2;
}

message DgnEcuSetLogicalLinkReply {
}

message DgnEcuSetVariantRequest {
  fixed64 ObjectId = 1;
  uint32 uTimeoutSec = 2;
  string pstrVariant = 3;
}

message DgnEcuSetVariantReply {
}

message DgnEcusGetCountRequest {
  fixed64 ObjectId = 1;
}

message DgnEcusGetCountReply {
  sint32 RetVal = 1;
}

message DgnEcusGetItemRequest {
  fixed64 ObjectId = 1;
  oneof vIndex {
    sint32 vIndex_int32 = 39;
    string vIndex_string = 40;
  }
}

message DgnEcusGetItemReply {
  fixed64 RetVal = 1;
}

message DgnErrorGetCodeRequest {
  fixed64 ObjectId = 1;
}

message DgnErrorGetCodeReply {
  sint32 RetVal = 1;
}

message DgnErrorGetDescriptionRequest {
  fixed64 ObjectId = 1;
}

message DgnErrorGetDescriptionReply {
  string RetVal = 1;
}

message DgnErrorGetVendorCodeRequest {
  fixed64 ObjectId = 1;
}

message DgnErrorGetVendorCodeReply {
  sint32 RetVal = 1;
}

message DgnErrorGetVendorDescriptionRequest {
  fixed64 ObjectId = 1;
}

message DgnErrorGetVendorDescriptionReply {
  string RetVal = 1;
}

message DgnFragmentsGetCountRequest {
  fixed64 ObjectId = 1;
}

message DgnFragmentsGetCountReply {
  sint32 RetVal = 1;
}

message DgnFragmentsGetItemRequest {
  fixed64 ObjectId = 1;
  oneof vIndex {
    sint32 vIndex_int32 = 39;
    string vIndex_string = 40;
  }
}

message DgnFragmentsGetItemReply {
  fixed64 RetVal = 1;
}

message DgnJobExecuteRequest {
  fixed64 ObjectId = 1;
  uint32 uTimeoutSec = 2;
}

message DgnJobExecuteReply {
  fixed64 RetVal = 1;
}

message DgnJobExecuteAsyncRequest {
  fixed64 ObjectId = 1;
}

message DgnJobExecuteAsyncReply {
}

message DgnJobGetCountRequest {
  fixed64 ObjectId = 1;
}

message DgnJobGetCountReply {
  sint32 RetVal = 1;
}

message DgnJobGetDbResponseRequest {
  fixed64 ObjectId = 1;
  oneof vResponse {
    sint32 vResponse_int32 = 39;
    string vResponse_string = 40;
  }
}

message DgnJobGetDbResponseReply {
  fixed64 RetVal = 1;
}

message DgnJobGetDbResponseCountRequest {
  fixed64 ObjectId = 1;
}

message DgnJobGetDbResponseCountReply {
  sint32 RetVal = 1;
}

message DgnJobGetDescriptionRequest {
  fixed64 ObjectId = 1;
}

message DgnJobGetDescriptionReply {
  string RetVal = 1;
}

message DgnJobGetEcuNameRequest {
  fixed64 ObjectId = 1;
}

message DgnJobGetEcuNameReply {
  string RetVal = 1;
}

message DgnJobGetFlashPriorityRequest {
  fixed64 ObjectId = 1;
  string strFlashkey = 2;
}

message DgnJobGetFlashPriorityReply {
  sint32 RetVal = 1;
}

message DgnJobGetLastResultRequest {
  fixed64 ObjectId = 1;
}

message DgnJobGetLastResultReply {
  fixed64 RetVal = 1;
}

message DgnJobGetLongNameRequest {
  fixed64 ObjectId = 1;
}

message DgnJobGetLongNameReply {
  string RetVal = 1;
}

message DgnJobGetNameRequest {
  fixed64 ObjectId = 1;
}

message DgnJobGetNameReply {
  string RetVal = 1;
}

message DgnJobGetParamRequest {
  fixed64 ObjectId = 1;
  oneof vParameter {
    sint32 vParameter_int32 = 39;
    string vParameter_string = 40;
  }
}

message DgnJobGetParamReply {
  fixed64 RetVal = 1;
}

message DgnJobGetProgressRequest {
  fixed64 ObjectId = 1;
}

message DgnJobGetProgressReply {
  sint32 RetVal = 1;
}

message DgnJobGetSemanticRequest {
  fixed64 ObjectId = 1;
}

message DgnJobGetSemanticReply {
  string RetVal = 1;
}

message DgnJobGetSpecialDataKeysRequest {
  fixed64 ObjectId = 1;
}

message DgnJobGetSpecialDataKeysReply {
  repeated string RetVal = 1;
}

message DgnJobGetSpecialDataValueRequest {
  fixed64 ObjectId = 1;
  oneof vIndex {
    sint32 vIndex_int32 = 39;
    string vIndex_string = 40;
  }
}

message DgnJobGetSpecialDataValueReply {
  string RetVal = 1;
}

message DgnJobWaitForResultRequest {
  fixed64 ObjectId = 1;
}

message DgnJobWaitForResultReply {
  fixed64 RetVal = 1;
}

message DgnJobsGetCountRequest {
  fixed64 ObjectId = 1;
}

message DgnJobsGetCountReply {
  sint32 RetVal = 1;
}

message DgnJobsGetItemRequest {
  fixed64 ObjectId = 1;
  oneof vIndex {
    sint32 vIndex_int32 = 39;
    string vIndex_string = 40;
  }
}

message DgnJobsGetItemReply {
  fixed64 RetVal = 1;
}

message DgnParamGetBitLengthRequest {
  fixed64 ObjectId = 1;
}

message DgnParamGetBitLengthReply {
  sint32 RetVal = 1;
}

message DgnParamGetBitPositionRequest {
  fixed64 ObjectId = 1;
}

message DgnParamGetBitPositionReply {
  sint32 RetVal = 1;
}

message DgnParamGetByteLengthRequest {
  fixed64 ObjectId = 1;
}

message DgnParamGetByteLengthReply {
  sint32 RetVal = 1;
}

message DgnParamGetBytePositionRequest {
  fixed64 ObjectId = 1;
}

message DgnParamGetBytePositionReply {
  sint32 RetVal = 1;
}

message DgnParamGetCountRequest {
  fixed64 ObjectId = 1;
}

message DgnParamGetCountReply {
  sint32 RetVal = 1;
}

message DgnParamGetDefaultValueRequest {
  fixed64 ObjectId = 1;
}

message DgnParamGetDefaultValueReply {
  oneof RetVal {
    double RetVal_double = 31;
    sint64 RetVal_int64 = 33;
    uint64 RetVal_uint64 = 35;
    string RetVal_string = 40;
    bool RetVal_bool = 38;
    bytes RetVal_uint8array = 37;
  }
}

message DgnParamGetDescriptionRequest {
  fixed64 ObjectId = 1;
}

message DgnParamGetDescriptionReply {
  string RetVal = 1;
}

message DgnParamGetIndexRequest {
  fixed64 ObjectId = 1;
}

message DgnParamGetIndexReply {
  sint32 RetVal = 1;
}

message DgnParamGetLongNameRequest {
  fixed64 ObjectId = 1;
}

message DgnParamGetLongNameReply {
  string RetVal = 1;
}

message DgnParamGetMaxValueRequest {
  fixed64 ObjectId = 1;
}

message DgnParamGetMaxValueReply {
  oneof RetVal {
    double RetVal_double = 31;
    sint64 RetVal_int64 = 33;
    uint64 RetVal_uint64 = 35;
    string RetVal_string = 40;
    bool RetVal_bool = 38;
    bytes RetVal_uint8array = 37;
  }
}

message DgnParamGetMinValueRequest {
  fixed64 ObjectId = 1;
}

message DgnParamGetMinValueReply {
  oneof RetVal {
    double RetVal_double = 31;
    sint64 RetVal_int64 = 33;
    uint64 RetVal_uint64 = 35;
    string RetVal_string = 40;
    bool RetVal_bool = 38;
    bytes RetVal_uint8array = 37;
  }
}

message DgnParamGetNameRequest {
  fixed64 ObjectId = 1;
}

message DgnParamGetNameReply {
  string RetVal = 1;
}

message DgnParamGetParamRequest {
  fixed64 ObjectId = 1;
  oneof vParameter {
    sint32 vParameter_int32 = 39;
    string vParameter_string = 40;
  }
}

message DgnParamGetParamReply {
  fixed64 RetVal = 1;
}

message DgnParamGetReadOnlyRequest {
  fixed64 ObjectId = 1;
}

message DgnParamGetReadOnlyReply {
  bool RetVal = 1;
}

message DgnParamGetTypeRequest {
  fixed64 ObjectId = 1;
}

message DgnParamGetTypeReply {
  DgnDataType RetVal = 1;
}

message DgnParamGetUnitRequest {
  fixed64 ObjectId = 1;
}

message DgnParamGetUnitReply {
  string RetVal = 1;
}

message DgnParamGetValidValuesRequest {
  fixed64 ObjectId = 1;
}

message DgnParamGetValidValuesReply {
  repeated string RetVal = 1;
}

message DgnParamGetValueRequest {
  fixed64 ObjectId = 1;
}

message DgnParamGetValueReply {
  oneof RetVal {
    double RetVal_double = 31;
    sint64 RetVal_int64 = 33;
    uint64 RetVal_uint64 = 35;
    string RetVal_string = 40;
    bool RetVal_bool = 38;
    bytes RetVal_uint8array = 37;
  }
}

message DgnParamSetValueRequest {
  fixed64 ObjectId = 1;
  oneof pvValue {
    double pvValue_double = 31;
    sint64 pvValue_int64 = 33;
    uint64 pvValue_uint64 = 35;
    string pvValue_string = 40;
    bool pvValue_bool = 38;
    bytes pvValue_uint8array = 37;
  }
}

message DgnParamSetValueReply {
}

message DgnResponseGetCountRequest {
  fixed64 ObjectId = 1;
}

message DgnResponseGetCountReply {
  sint32 RetVal = 1;
}

message DgnResponseGetDescriptionRequest {
  fixed64 ObjectId = 1;
}

message DgnResponseGetDescriptionReply {
  string RetVal = 1;
}

message DgnResponseGetErrorRequest {
  fixed64 ObjectId = 1;
}

message DgnResponseGetErrorReply {
  fixed64 RetVal = 1;
}

message DgnResponseGetLongNameRequest {
  fixed64 ObjectId = 1;
}

message DgnResponseGetLongNameReply {
  string RetVal = 1;
}

message DgnResponseGetNameRequest {
  fixed64 ObjectId = 1;
}

message DgnResponseGetNameReply {
  string RetVal = 1;
}

message DgnResponseGetParamRequest {
  fixed64 ObjectId = 1;
  oneof vParameter {
    sint32 vParameter_int32 = 39;
    string vParameter_string = 40;
  }
}

message DgnResponseGetParamReply {
  fixed64 RetVal = 1;
}

message DgnResponseGetResponseMessageRequest {
  fixed64 ObjectId = 1;
}

message DgnResponseGetResponseMessageReply {
  string RetVal = 1;
}

message DgnResponseGetTypeRequest {
  fixed64 ObjectId = 1;
}

message DgnResponseGetTypeReply {
  ResponseType RetVal = 1;
}

message DgnResponseParamGetCountRequest {
  fixed64 ObjectId = 1;
}

message DgnResponseParamGetCountReply {
  sint32 RetVal = 1;
}

message DgnResponseParamGetDescriptionRequest {
  fixed64 ObjectId = 1;
}

message DgnResponseParamGetDescriptionReply {
  string RetVal = 1;
}

message DgnResponseParamGetDtcRequest {
  fixed64 ObjectId = 1;
}

message DgnResponseParamGetDtcReply {
  fixed64 RetVal = 1;
}

message DgnResponseParamGetDTCTextRequest {
  fixed64 ObjectId = 1;
}

message DgnResponseParamGetDTCTextReply {
  string RetVal = 1;
}

message DgnResponseParamGetErrorRequest {
  fixed64 ObjectId = 1;
}

message DgnResponseParamGetErrorReply {
  fixed64 RetVal = 1;
}

message DgnResponseParamGetIndexRequest {
  fixed64 ObjectId = 1;
}

message DgnResponseParamGetIndexReply {
  sint32 RetVal = 1;
}

message DgnResponseParamGetLongNameRequest {
  fixed64 ObjectId = 1;
}

message DgnResponseParamGetLongNameReply {
  string RetVal = 1;
}

message DgnResponseParamGetNameRequest {
  fixed64 ObjectId = 1;
}

message DgnResponseParamGetNameReply {
  string RetVal = 1;
}

message DgnResponseParamGetParamRequest {
  fixed64 ObjectId = 1;
  oneof vParameter {
    sint32 vParameter_int32 = 39;
    string vParameter_string = 40;
  }
}

message DgnResponseParamGetParamReply {
  fixed64 RetVal = 1;
}

message DgnResponseParamGetTypeRequest {
  fixed64 ObjectId = 1;
}

message DgnResponseParamGetTypeReply {
  DgnDataType RetVal = 1;
}

message DgnResponseParamGetUnitRequest {
  fixed64 ObjectId = 1;
}

message DgnResponseParamGetUnitReply {
  string RetVal = 1;
}

message DgnResponseParamGetValueRequest {
  fixed64 ObjectId = 1;
}

message DgnResponseParamGetValueReply {
  oneof RetVal {
    double RetVal_double = 31;
    sint64 RetVal_int64 = 33;
    uint64 RetVal_uint64 = 35;
    string RetVal_string = 40;
    bool RetVal_bool = 38;
    bytes RetVal_uint8array = 37;
  }
}

message DgnResponseParamGetValueAsStringRequest {
  fixed64 ObjectId = 1;
}

message DgnResponseParamGetValueAsStringReply {
  string RetVal = 1;
}

message DgnResponseParamGetValueRangeInfoRequest {
  fixed64 ObjectId = 1;
}

message DgnResponseParamGetValueRangeInfoReply {
  ValueRangeInfo RetVal = 1;
}

message DgnResultGetCountRequest {
  fixed64 ObjectId = 1;
}

message DgnResultGetCountReply {
  sint32 RetVal = 1;
}

message DgnResultGetErrorRequest {
  fixed64 ObjectId = 1;
}

message DgnResultGetErrorReply {
  fixed64 RetVal = 1;
}

message DgnResultGetExecutionStateRequest {
  fixed64 ObjectId = 1;
}

message DgnResultGetExecutionStateReply {
  ExecutionState RetVal = 1;
}

message DgnResultGetResponseRequest {
  fixed64 ObjectId = 1;
  oneof vResponse {
    sint32 vResponse_int32 = 39;
    string vResponse_string = 40;
  }
}

message DgnResultGetResponseReply {
  fixed64 RetVal = 1;
}

message DgnResultGetTypeRequest {
  fixed64 ObjectId = 1;
}

message DgnResultGetTypeReply {
  ServiceResultType RetVal = 1;
}

message DgnServiceExecuteRequest {
  fixed64 ObjectId = 1;
  uint32 uTimeoutSec = 2;
}

message DgnServiceExecuteReply {
  fixed64 RetVal = 1;
}

message DgnServiceExecuteAsyncRequest {
  fixed64 ObjectId = 1;
}

message DgnServiceExecuteAsyncReply {
}

message DgnServiceGetCountRequest {
  fixed64 ObjectId = 1;
}

message DgnServiceGetCountReply {
  sint32 RetVal = 1;
}

message DgnServiceGetDbResponseRequest {
  fixed64 ObjectId = 1;
  oneof vResponse {
    sint32 vResponse_int32 = 39;
    string vResponse_string = 40;
  }
}

message DgnServiceGetDbResponseReply {
  fixed64 RetVal = 1;
}

message DgnServiceGetDbResponseCountRequest {
  fixed64 ObjectId = 1;
}

message DgnServiceGetDbResponseCountReply {
  sint32 RetVal = 1;
}

message DgnServiceGetDescriptionRequest {
  fixed64 ObjectId = 1;
}

message DgnServiceGetDescriptionReply {
  string RetVal = 1;
}

message DgnServiceGetEcuNameRequest {
  fixed64 ObjectId = 1;
}

message DgnServiceGetEcuNameReply {
  string RetVal = 1;
}

message DgnServiceGetLastResultRequest {
  fixed64 ObjectId = 1;
}

message DgnServiceGetLastResultReply {
  fixed64 RetVal = 1;
}

message DgnServiceGetLongNameRequest {
  fixed64 ObjectId = 1;
}

message DgnServiceGetLongNameReply {
  string RetVal = 1;
}

message DgnServiceGetNameRequest {
  fixed64 ObjectId = 1;
}

message DgnServiceGetNameReply {
  string RetVal = 1;
}

message DgnServiceGetParamRequest {
  fixed64 ObjectId = 1;
  oneof vParameter {
    sint32 vParameter_int32 = 39;
    string vParameter_string = 40;
  }
}

message DgnServiceGetParamReply {
  fixed64 RetVal = 1;
}

message DgnServiceGetRequestMessageRequest {
  fixed64 ObjectId = 1;
}

message DgnServiceGetRequestMessageReply {
  string RetVal = 1;
}

message DgnServiceGetSemanticRequest {
  fixed64 ObjectId = 1;
}

message DgnServiceGetSemanticReply {
  string RetVal = 1;
}

message DgnServiceGetSpecialDataKeysRequest {
  fixed64 ObjectId = 1;
}

message DgnServiceGetSpecialDataKeysReply {
  repeated string RetVal = 1;
}

message DgnServiceGetSpecialDataValueRequest {
  fixed64 ObjectId = 1;
  oneof vIndex {
    sint32 vIndex_int32 = 39;
    string vIndex_string = 40;
  }
}

message DgnServiceGetSpecialDataValueReply {
  string RetVal = 1;
}

message DgnServiceSetRequestMessageRequest {
  fixed64 ObjectId = 1;
  string pstrRequestMessage = 2;
}

message DgnServiceSetRequestMessageReply {
}

message DgnServiceWaitForResultRequest {
  fixed64 ObjectId = 1;
}

message DgnServiceWaitForResultReply {
  fixed64 RetVal = 1;
}

message DgnServicesGetCountRequest {
  fixed64 ObjectId = 1;
}

message DgnServicesGetCountReply {
  sint32 RetVal = 1;
}

message DgnServicesGetItemRequest {
  fixed64 ObjectId = 1;
  oneof vIndex {
    sint32 vIndex_int32 = 39;
    string vIndex_string = 40;
  }
}

message DgnServicesGetItemReply {
  fixed64 RetVal = 1;
}

message DltControlRequestMsgGetDataRequest {
  fixed64 ObjectId = 1;
}

message DltControlRequestMsgGetDataReply {
  bytes RetVal = 1;
}

message DltControlRequestMsgSendRequest {
  fixed64 ObjectId = 1;
}

message DltControlRequestMsgSendReply {
}

message DltControlRequestMsgSetApplicationIdRequest {
  fixed64 ObjectId = 1;
  string ApplicationId = 2;
}

message DltControlRequestMsgSetApplicationIdReply {
}

message DltControlRequestMsgSetContextIdRequest {
  fixed64 ObjectId = 1;
  string ContextId = 2;
}

message DltControlRequestMsgSetContextIdReply {
}

message DltControlRequestMsgSetEcuIdRequest {
  fixed64 ObjectId = 1;
  string EcuId = 2;
}

message DltControlRequestMsgSetEcuIdReply {
}

message DltControlRequestMsgSetMostSignificantByteFirstRequest {
  fixed64 ObjectId = 1;
  bool MostSignificantByteFirst = 2;
}

message DltControlRequestMsgSetMostSignificantByteFirstReply {
}

message DltControlRequestMsgSetParametersRequest {
  fixed64 ObjectId = 1;
  bytes Parameters = 2;
}

message DltControlRequestMsgSetParametersReply {
}

message DltControlRequestMsgSetServiceIdRequest {
  fixed64 ObjectId = 1;
  DltControlRequestServiceId ServiceId = 2;
}

message DltControlRequestMsgSetServiceIdReply {
}

message DltControlRequestMsgSetSessionIdRequest {
  fixed64 ObjectId = 1;
  uint32 SessionId = 2;
}

message DltControlRequestMsgSetSessionIdReply {
}

message DltControlRequestMsgSetTimeStampRequest {
  fixed64 ObjectId = 1;
  double TimeStamp = 2;
}

message DltControlRequestMsgSetTimeStampReply {
}

message DltFilterGetApplicationIdRequest {
  fixed64 ObjectId = 1;
}

message DltFilterGetApplicationIdReply {
  string RetVal = 1;
}

message DltFilterGetContextIdRequest {
  fixed64 ObjectId = 1;
}

message DltFilterGetContextIdReply {
  string RetVal = 1;
}

message DltFilterGetEcuIdRequest {
  fixed64 ObjectId = 1;
}

message DltFilterGetEcuIdReply {
  string RetVal = 1;
}

message DltFilterGetPassRequest {
  fixed64 ObjectId = 1;
}

message DltFilterGetPassReply {
  bool RetVal = 1;
}

message DltFilterGetRxRequest {
  fixed64 ObjectId = 1;
}

message DltFilterGetRxReply {
  bool RetVal = 1;
}

message DltFilterGetSessionIdMaxRequest {
  fixed64 ObjectId = 1;
}

message DltFilterGetSessionIdMaxReply {
  uint32 RetVal = 1;
}

message DltFilterGetSessionIdMinRequest {
  fixed64 ObjectId = 1;
}

message DltFilterGetSessionIdMinReply {
  uint32 RetVal = 1;
}

message DltFilterGetTxRequest {
  fixed64 ObjectId = 1;
}

message DltFilterGetTxReply {
  bool RetVal = 1;
}

message DltFilterSetApplicationIdRequest {
  fixed64 ObjectId = 1;
  string pstrApplicationId = 2;
}

message DltFilterSetApplicationIdReply {
}

message DltFilterSetContextIdRequest {
  fixed64 ObjectId = 1;
  string pstrContextId = 2;
}

message DltFilterSetContextIdReply {
}

message DltFilterSetEcuIdRequest {
  fixed64 ObjectId = 1;
  string pstrEcuId = 2;
}

message DltFilterSetEcuIdReply {
}

message DltFilterSetPassRequest {
  fixed64 ObjectId = 1;
  bool pbPass = 2;
}

message DltFilterSetPassReply {
}

message DltFilterSetRxRequest {
  fixed64 ObjectId = 1;
  bool pbRx = 2;
}

message DltFilterSetRxReply {
}

message DltFilterSetSessionIdRequest {
  fixed64 ObjectId = 1;
  uint32 SessionId = 2;
}

message DltFilterSetSessionIdReply {
}

message DltFilterSetSessionIdMaxRequest {
  fixed64 ObjectId = 1;
  uint32 puSessionIdMax = 2;
}

message DltFilterSetSessionIdMaxReply {
}

message DltFilterSetSessionIdMinRequest {
  fixed64 ObjectId = 1;
  uint32 puSessionIdMin = 2;
}

message DltFilterSetSessionIdMinReply {
}

message DltFilterSetTxRequest {
  fixed64 ObjectId = 1;
  bool pbTx = 2;
}

message DltFilterSetTxReply {
}

message DltMsgGetApplicationIdRequest {
  fixed64 ObjectId = 1;
}

message DltMsgGetApplicationIdReply {
  string RetVal = 1;
}

message DltMsgGetContextIdRequest {
  fixed64 ObjectId = 1;
}

message DltMsgGetContextIdReply {
  string RetVal = 1;
}

message DltMsgGetDataRequest {
  fixed64 ObjectId = 1;
}

message DltMsgGetDataReply {
  bytes RetVal = 1;
}

message DltMsgGetEcuIdRequest {
  fixed64 ObjectId = 1;
}

message DltMsgGetEcuIdReply {
  string RetVal = 1;
}

message DltMsgGetSessionIdRequest {
  fixed64 ObjectId = 1;
}

message DltMsgGetSessionIdReply {
  uint32 RetVal = 1;
}

message DltMsgGetTextRequest {
  fixed64 ObjectId = 1;
}

message DltMsgGetTextReply {
  string RetVal = 1;
}

message DltMsgGetTimeStampRequest {
  fixed64 ObjectId = 1;
}

message DltMsgGetTimeStampReply {
  double RetVal = 1;
}

message EvaluationAddSignalsToExtractFromMessagesRequest {
  fixed64 ObjectId = 1;
  string strChannel = 2;
  oneof vPdu {
    string vPdu_string = 40;
    fixed64 vPdu_obj = 30;
  }
  repeated string straSignals = 3;
}

message EvaluationAddSignalsToExtractFromMessagesReply {
}

message EvaluationCloseRequest {
  fixed64 ObjectId = 1;
}

message EvaluationCloseReply {
  bool RetVal = 1;
}

message EvaluationConvertRequest {
  fixed64 ObjectId = 1;
  string strDestinationFile = 2;
  string strSignalList = 3;
  sint64 lStartSample = 4;
  sint64 lSampleCount = 5;
  string strAdditionalOptions = 6;
}

message EvaluationConvertReply {
  bool RetVal = 1;
}

message EvaluationExtractSignalsFromMessagesRequest {
  fixed64 ObjectId = 1;
  string strDestinationFile = 2;
  double dStartTime = 3;
  double dDuration = 4;
}

message EvaluationExtractSignalsFromMessagesReply {
}

message EvaluationGetDateRequest {
  fixed64 ObjectId = 1;
}

message EvaluationGetDateReply {
  double RetVal = 1;
}

message EvaluationGetMessageRequest {
  fixed64 ObjectId = 1;
  optional sint64 lStartSample = 2;
}

message EvaluationGetMessageReply {
  bool RetVal = 1;
  fixed64 pMessage = 2;
}

message EvaluationGetMessageChannelsRequest {
  fixed64 ObjectId = 1;
}

message EvaluationGetMessageChannelsReply {
  repeated MessageChannelInfo RetVal = 1;
}

message EvaluationGetRemarksRequest {
  fixed64 ObjectId = 1;
}

message EvaluationGetRemarksReply {
  string RetVal = 1;
}

message EvaluationGetSampleCountRequest {
  fixed64 ObjectId = 1;
  oneof vSignalOrGroup {
    sint32 vSignalOrGroup_int32 = 39;
    string vSignalOrGroup_string = 40;
  }
}

message EvaluationGetSampleCountReply {
  sint64 RetVal = 1;
}

message EvaluationGetSamplingRateRequest {
  fixed64 ObjectId = 1;
  oneof vSignalOrGroup {
    sint32 vSignalOrGroup_int32 = 39;
    string vSignalOrGroup_string = 40;
  }
}

message EvaluationGetSamplingRateReply {
  double RetVal = 1;
}

message EvaluationGetSignalArrayRequest {
  fixed64 ObjectId = 1;
  string strSignalList = 2;
  sint64 lStartSample = 3;
  sint32 lSampleCount = 4;
}

message EvaluationGetSignalArrayReply {
  bool RetVal = 1;
  repeated ValueArray paValues = 2;
}

message EvaluationGetSignalsRequest {
  fixed64 ObjectId = 1;
}

message EvaluationGetSignalsReply {
  repeated string RetVal = 1;
}

message EvaluationGetStartTimeRequest {
  fixed64 ObjectId = 1;
  oneof vSignalOrGroup {
    sint32 vSignalOrGroup_int32 = 39;
    string vSignalOrGroup_string = 40;
  }
  bool bIgnoreTriggerTime = 2;
}

message EvaluationGetStartTimeReply {
  double RetVal = 1;
}

message EvaluationGetTitleRequest {
  fixed64 ObjectId = 1;
}

message EvaluationGetTitleReply {
  string RetVal = 1;
}

message EvaluationGetVideoAudioContainersRequest {
  fixed64 ObjectId = 1;
}

message EvaluationGetVideoAudioContainersReply {
  repeated fixed64 RetVal = 1;
}

message EvaluationOpenRequest {
  fixed64 ObjectId = 1;
  string strFileName = 2;
}

message EvaluationOpenReply {
  bool RetVal = 1;
}

message EvaluationSetMessageFilterRequest {
  fixed64 ObjectId = 1;
  string strChannel = 2;
  string strSubType = 3;
  bool bDefaultPass = 4;
  repeated fixed64 filters = 5;
}

message EvaluationSetMessageFilterReply {
  bool RetVal = 1;
}

message EvaluationEventChangePropertiesParams {
  repeated string straPropertyNames = 1;
  repeated string pstraPropertyValues = 2;
}

message EvaluationEventChangePropertiesResult {
  repeated string pstraPropertyValues = 2;
}

message ExecutedItemGetExecutionModeRequest {
  fixed64 ObjectId = 1;
}

message ExecutedItemGetExecutionModeReply {
  sint32 RetVal = 1;
}

message ExecutedItemGetPathRequest {
  fixed64 ObjectId = 1;
}

message ExecutedItemGetPathReply {
  string RetVal = 1;
}

message ExecutedItemGetRunningRequest {
  fixed64 ObjectId = 1;
}

message ExecutedItemGetRunningReply {
  bool RetVal = 1;
}

message ExecutedItemGetTestResultRequest {
  fixed64 ObjectId = 1;
}

message ExecutedItemGetTestResultReply {
  fixed64 RetVal = 1;
}

message ExecutedItemStopRequest {
  fixed64 ObjectId = 1;
  bool bTimeout = 2;
}

message ExecutedItemStopReply {
}

message FaultSimActivateRequest {
  optional bool bActivate = 1;
  string strSystemName = 2;
}

message FaultSimActivateReply {
}

message FaultSimBusSetFaultRequest {
  string strBusName = 1;
  optional ConnectionBus eConnections = 2;
  oneof vPotentialA0 {
    sint32 vPotentialA0_int32 = 39;
    string vPotentialA0_string = 40;
  }
  oneof vPotentialA1 {
    sint32 vPotentialA1_int32 = 69;
    string vPotentialA1_string = 70;
  }
  oneof vPotentialB0 {
    sint32 vPotentialB0_int32 = 99;
    string vPotentialB0_string = 100;
  }
  oneof vPotentialB1 {
    sint32 vPotentialB1_int32 = 129;
    string vPotentialB1_string = 130;
  }
}

message FaultSimBusSetFaultReply {
}

message FaultSimCANConnectMemberRequest {
  string strCANMemberList = 1;
  optional ConnectionCANMember eConnection = 2;
}

message FaultSimCANConnectMemberReply {
}

message FaultSimCANSetFaultRequest {
  string strCANMember = 1;
  optional ConnectionCAN eConnections = 2;
  oneof vPotentialMemberH {
    sint32 vPotentialMemberH_int32 = 39;
    string vPotentialMemberH_string = 40;
  }
  oneof vPotentialMemberL {
    sint32 vPotentialMemberL_int32 = 69;
    string vPotentialMemberL_string = 70;
  }
  oneof vPotentialSegmentH {
    sint32 vPotentialSegmentH_int32 = 99;
    string vPotentialSegmentH_string = 100;
  }
  oneof vPotentialSegmentL {
    sint32 vPotentialSegmentL_int32 = 129;
    string vPotentialSegmentL_string = 130;
  }
}

message FaultSimCANSetFaultReply {
}

message FaultSimCANSetFault2Request {
  string strCANName = 1;
  CANFaults2 eConnections = 2;
}

message FaultSimCANSetFault2Reply {
}

message FaultSimConnectAuxRequest {
  AuxType eAux = 1;
  ConnectionAux eRailPlus = 2;
  ConnectionAux eRailMinus = 3;
  string strSystemName = 4;
}

message FaultSimConnectAuxReply {
}

message FaultSimConnectAux2Request {
  ConnectionAux2 eConnections = 1;
  string strSystemName = 2;
}

message FaultSimConnectAux2Reply {
}

message FaultSimConnectCableRequest {
  string strCableKey = 1;
  ConnectionCable eConnection = 2;
  optional bool bSet = 3;
}

message FaultSimConnectCableReply {
}

message FaultSimConnectMeasureRequest {
  ConnectionMeasure eConnections = 1;
  string strSystemName = 2;
}

message FaultSimConnectMeasureReply {
}

message FaultSimConnectRailRequest {
  ConnectionRail eRail = 1;
  oneof vPot {
    sint32 vPot_int32 = 39;
    string vPot_string = 40;
  }
  string strSystemName = 2;
}

message FaultSimConnectRailReply {
}

message FaultSimLoadPatternRequest {
  string strFileName = 1;
}

message FaultSimLoadPatternReply {
}

message FaultSimResetRequest {
  optional FaultSimResetType eResetType = 1;
  string strSystemName = 2;
}

message FaultSimResetReply {
}

message FaultSimSavePatternRequest {
  string strFileName = 1;
}

message FaultSimSavePatternReply {
}

message FaultSimSetResistanceRequest {
  sint32 lResistance = 1;
  FaultSimResistor eResistor = 2;
  string strSystemName = 3;
}

message FaultSimSetResistanceReply {
}

message FaultSimSetTimingsRequest {
  sint32 lDuration = 1;
  optional sint32 lFrequency = 2;
  optional sint32 lDutyCycle = 3;
  string strSystemName = 4;
}

message FaultSimSetTimingsReply {
}

message FlexRayFilterGetBaseCycleRequest {
  fixed64 ObjectId = 1;
}

message FlexRayFilterGetBaseCycleReply {
  uint32 RetVal = 1;
}

message FlexRayFilterGetBitsRequest {
  fixed64 ObjectId = 1;
}

message FlexRayFilterGetBitsReply {
  FlexRayBits RetVal = 1;
}

message FlexRayFilterGetCycleRepetitionRequest {
  fixed64 ObjectId = 1;
}

message FlexRayFilterGetCycleRepetitionReply {
  uint32 RetVal = 1;
}

message FlexRayFilterGetMaskRequest {
  fixed64 ObjectId = 1;
}

message FlexRayFilterGetMaskReply {
  FlexRayBits RetVal = 1;
}

message FlexRayFilterGetNameRequest {
  fixed64 ObjectId = 1;
}

message FlexRayFilterGetNameReply {
  string RetVal = 1;
}

message FlexRayFilterGetPassRequest {
  fixed64 ObjectId = 1;
}

message FlexRayFilterGetPassReply {
  bool RetVal = 1;
}

message FlexRayFilterGetRxRequest {
  fixed64 ObjectId = 1;
}

message FlexRayFilterGetRxReply {
  bool RetVal = 1;
}

message FlexRayFilterGetSlotIdMaxRequest {
  fixed64 ObjectId = 1;
}

message FlexRayFilterGetSlotIdMaxReply {
  sint32 RetVal = 1;
}

message FlexRayFilterGetSlotIdMinRequest {
  fixed64 ObjectId = 1;
}

message FlexRayFilterGetSlotIdMinReply {
  sint32 RetVal = 1;
}

message FlexRayFilterGetTxRequest {
  fixed64 ObjectId = 1;
}

message FlexRayFilterGetTxReply {
  bool RetVal = 1;
}

message FlexRayFilterSetBaseCycleRequest {
  fixed64 ObjectId = 1;
  uint32 pbyBaseCycle = 2;
}

message FlexRayFilterSetBaseCycleReply {
}

message FlexRayFilterSetBitsRequest {
  fixed64 ObjectId = 1;
  FlexRayBits peBits = 2;
}

message FlexRayFilterSetBitsReply {
}

message FlexRayFilterSetCycleRepetitionRequest {
  fixed64 ObjectId = 1;
  uint32 pbyCycleRepetition = 2;
}

message FlexRayFilterSetCycleRepetitionReply {
}

message FlexRayFilterSetMaskRequest {
  fixed64 ObjectId = 1;
  FlexRayBits peMask = 2;
}

message FlexRayFilterSetMaskReply {
}

message FlexRayFilterSetNameRequest {
  fixed64 ObjectId = 1;
  string strName = 2;
}

message FlexRayFilterSetNameReply {
}

message FlexRayFilterSetPassRequest {
  fixed64 ObjectId = 1;
  bool pbPass = 2;
}

message FlexRayFilterSetPassReply {
}

message FlexRayFilterSetRxRequest {
  fixed64 ObjectId = 1;
  bool pbRx = 2;
}

message FlexRayFilterSetRxReply {
}

message FlexRayFilterSetSlotIdRequest {
  fixed64 ObjectId = 1;
  sint32 SlotId = 2;
}

message FlexRayFilterSetSlotIdReply {
}

message FlexRayFilterSetSlotIdMaxRequest {
  fixed64 ObjectId = 1;
  sint32 piSlotIdMax = 2;
}

message FlexRayFilterSetSlotIdMaxReply {
}

message FlexRayFilterSetSlotIdMinRequest {
  fixed64 ObjectId = 1;
  sint32 piSlotIdMin = 2;
}

message FlexRayFilterSetSlotIdMinReply {
}

message FlexRayFilterSetTxRequest {
  fixed64 ObjectId = 1;
  bool pbTx = 2;
}

message FlexRayFilterSetTxReply {
}

message FlexRayMsgGetBitsRequest {
  fixed64 ObjectId = 1;
}

message FlexRayMsgGetBitsReply {
  FlexRayBits RetVal = 1;
}

message FlexRayMsgGetCycleRequest {
  fixed64 ObjectId = 1;
}

message FlexRayMsgGetCycleReply {
  uint32 RetVal = 1;
}

message FlexRayMsgGetDataRequest {
  fixed64 ObjectId = 1;
}

message FlexRayMsgGetDataReply {
  bytes RetVal = 1;
}

message FlexRayMsgGetNameRequest {
  fixed64 ObjectId = 1;
}

message FlexRayMsgGetNameReply {
  string RetVal = 1;
}

message FlexRayMsgGetSignalRequest {
  fixed64 ObjectId = 1;
  oneof Signal {
    sint32 Signal_int32 = 39;
    string Signal_string = 40;
  }
}

message FlexRayMsgGetSignalReply {
  fixed64 RetVal = 1;
}

message FlexRayMsgGetSignalCountRequest {
  fixed64 ObjectId = 1;
}

message FlexRayMsgGetSignalCountReply {
  sint32 RetVal = 1;
}

message FlexRayMsgGetSlotIdRequest {
  fixed64 ObjectId = 1;
}

message FlexRayMsgGetSlotIdReply {
  sint32 RetVal = 1;
}

message FlexRayMsgGetUpdateIndicationRequest {
  fixed64 ObjectId = 1;
  oneof pdu {
    sint32 pdu_int32 = 39;
    string pdu_string = 40;
  }
}

message FlexRayMsgGetUpdateIndicationReply {
  bool RetVal = 1;
}

message FlexRaySignalGetDescriptionRequest {
  fixed64 ObjectId = 1;
}

message FlexRaySignalGetDescriptionReply {
  string RetVal = 1;
}

message FlexRaySignalGetNameRequest {
  fixed64 ObjectId = 1;
}

message FlexRaySignalGetNameReply {
  string RetVal = 1;
}

message FlexRaySignalGetRawValueRequest {
  fixed64 ObjectId = 1;
}

message FlexRaySignalGetRawValueReply {
  oneof RetVal {
    uint64 RetVal_uint64 = 35;
    bytes RetVal_uint8array = 37;
  }
}

message FlexRaySignalGetUnitRequest {
  fixed64 ObjectId = 1;
}

message FlexRaySignalGetUnitReply {
  string RetVal = 1;
}

message FlexRaySignalGetValueRequest {
  fixed64 ObjectId = 1;
}

message FlexRaySignalGetValueReply {
  oneof RetVal {
    double RetVal_double = 31;
    sint64 RetVal_int64 = 33;
    uint64 RetVal_uint64 = 35;
    bytes RetVal_uint8array = 37;
    string RetVal_string = 40;
  }
}

message GenericFilterGetIdMaxRequest {
  fixed64 ObjectId = 1;
}

message GenericFilterGetIdMaxReply {
  uint32 RetVal = 1;
}

message GenericFilterGetIdMinRequest {
  fixed64 ObjectId = 1;
}

message GenericFilterGetIdMinReply {
  uint32 RetVal = 1;
}

message GenericFilterGetPassRequest {
  fixed64 ObjectId = 1;
}

message GenericFilterGetPassReply {
  bool RetVal = 1;
}

message GenericFilterGetRxRequest {
  fixed64 ObjectId = 1;
}

message GenericFilterGetRxReply {
  bool RetVal = 1;
}

message GenericFilterGetTxRequest {
  fixed64 ObjectId = 1;
}

message GenericFilterGetTxReply {
  bool RetVal = 1;
}

message GenericFilterSetIdRequest {
  fixed64 ObjectId = 1;
  uint32 Id = 2;
}

message GenericFilterSetIdReply {
}

message GenericFilterSetIdMaxRequest {
  fixed64 ObjectId = 1;
  uint32 pludMax = 2;
}

message GenericFilterSetIdMaxReply {
}

message GenericFilterSetIdMinRequest {
  fixed64 ObjectId = 1;
  uint32 puIdMin = 2;
}

message GenericFilterSetIdMinReply {
}

message GenericFilterSetNameRequest {
  fixed64 ObjectId = 1;
  string strChannel = 2;
  string Name = 3;
}

message GenericFilterSetNameReply {
}

message GenericFilterSetPassRequest {
  fixed64 ObjectId = 1;
  bool pbPass = 2;
}

message GenericFilterSetPassReply {
}

message GenericFilterSetRxRequest {
  fixed64 ObjectId = 1;
  bool pbRx = 2;
}

message GenericFilterSetRxReply {
}

message GenericFilterSetTxRequest {
  fixed64 ObjectId = 1;
  bool pbTx = 2;
}

message GenericFilterSetTxReply {
}

message GenericMsgGetDataRequest {
  fixed64 ObjectId = 1;
}

message GenericMsgGetDataReply {
  bytes RetVal = 1;
}

message GenericMsgGetIdRequest {
  fixed64 ObjectId = 1;
}

message GenericMsgGetIdReply {
  uint32 RetVal = 1;
}

message GenericMsgGetNameRequest {
  fixed64 ObjectId = 1;
}

message GenericMsgGetNameReply {
  string RetVal = 1;
}

message GenericMsgGetTextRequest {
  fixed64 ObjectId = 1;
}

message GenericMsgGetTextReply {
  string RetVal = 1;
}

message GenericMsgSendRequest {
  fixed64 ObjectId = 1;
}

message GenericMsgSendReply {
}

message GenericMsgSetDataRequest {
  fixed64 ObjectId = 1;
  bytes paData = 2;
}

message GenericMsgSetDataReply {
}

message GenericMsgSetIdRequest {
  fixed64 ObjectId = 1;
  uint32 puId = 2;
}

message GenericMsgSetIdReply {
}

message GenericMsgSetNameRequest {
  fixed64 ObjectId = 1;
  string pstrName = 2;
}

message GenericMsgSetNameReply {
}

message GenericMsgSetTextRequest {
  fixed64 ObjectId = 1;
  string pstrText = 2;
}

message GenericMsgSetTextReply {
}

message GraphTemplateCalculateMinMaxRequest {
  fixed64 ObjectId = 1;
  oneof aValues {
    DoubleArray aValues_doublearray = 32;
    Int64Array aValues_int64array = 34;
    UInt64Array aValues_uint64array = 36;
  }
}

message GraphTemplateCalculateMinMaxReply {
  oneof pMin {
    double pMin_double = 61;
    sint64 pMin_int64 = 63;
    uint64 pMin_uint64 = 65;
  }
  oneof pMax {
    double pMax_double = 91;
    sint64 pMax_int64 = 93;
    uint64 pMax_uint64 = 95;
  }
}

message GraphTemplateCreatePlotAreaRequest {
  fixed64 ObjectId = 1;
}

message GraphTemplateCreatePlotAreaReply {
  fixed64 RetVal = 1;
}

message GraphTemplateGetAxesBackColorRequest {
  fixed64 ObjectId = 1;
}

message GraphTemplateGetAxesBackColorReply {
  sint32 RetVal = 1;
}

message GraphTemplateGetFontSizeRequest {
  fixed64 ObjectId = 1;
}

message GraphTemplateGetFontSizeReply {
  float RetVal = 1;
}

message GraphTemplateGetHeightRequest {
  fixed64 ObjectId = 1;
}

message GraphTemplateGetHeightReply {
  sint32 RetVal = 1;
}

message GraphTemplateGetPlotBackColorRequest {
  fixed64 ObjectId = 1;
}

message GraphTemplateGetPlotBackColorReply {
  sint32 RetVal = 1;
}

message GraphTemplateGetWidthRequest {
  fixed64 ObjectId = 1;
}

message GraphTemplateGetWidthReply {
  sint32 RetVal = 1;
}

message GraphTemplateGetXAxisMajorColorRequest {
  fixed64 ObjectId = 1;
}

message GraphTemplateGetXAxisMajorColorReply {
  sint32 RetVal = 1;
}

message GraphTemplateGetXAxisMinorColorRequest {
  fixed64 ObjectId = 1;
}

message GraphTemplateGetXAxisMinorColorReply {
  sint32 RetVal = 1;
}

message GraphTemplateGetXAxisNumberColorRequest {
  fixed64 ObjectId = 1;
}

message GraphTemplateGetXAxisNumberColorReply {
  sint32 RetVal = 1;
}

message GraphTemplateGetXAxisTickColorRequest {
  fixed64 ObjectId = 1;
}

message GraphTemplateGetXAxisTickColorReply {
  sint32 RetVal = 1;
}

message GraphTemplateGetYAxisLabelRequest {
  fixed64 ObjectId = 1;
  sint32 lYAxisNo = 2;
}

message GraphTemplateGetYAxisLabelReply {
  string RetVal = 1;
}

message GraphTemplateGetYAxisLabelColorRequest {
  fixed64 ObjectId = 1;
  sint32 lYAxisNo = 2;
}

message GraphTemplateGetYAxisLabelColorReply {
  sint32 RetVal = 1;
}

message GraphTemplateGetYAxisMajorColorRequest {
  fixed64 ObjectId = 1;
  sint32 lYAxisNo = 2;
}

message GraphTemplateGetYAxisMajorColorReply {
  sint32 RetVal = 1;
}

message GraphTemplateGetYAxisMinorColorRequest {
  fixed64 ObjectId = 1;
  sint32 lYAxisNo = 2;
}

message GraphTemplateGetYAxisMinorColorReply {
  sint32 RetVal = 1;
}

message GraphTemplateGetYAxisNumberColorRequest {
  fixed64 ObjectId = 1;
  sint32 lYAxisNo = 2;
}

message GraphTemplateGetYAxisNumberColorReply {
  sint32 RetVal = 1;
}

message GraphTemplateGetYAxisRightRequest {
  fixed64 ObjectId = 1;
  sint32 lYAxisNo = 2;
}

message GraphTemplateGetYAxisRightReply {
  bool RetVal = 1;
}

message GraphTemplateGetYAxisTickColorRequest {
  fixed64 ObjectId = 1;
  sint32 lYAxisNo = 2;
}

message GraphTemplateGetYAxisTickColorReply {
  sint32 RetVal = 1;
}

message GraphTemplateSetAxesBackColorRequest {
  fixed64 ObjectId = 1;
  sint32 plHeight = 2;
}

message GraphTemplateSetAxesBackColorReply {
}

message GraphTemplateSetFontSizeRequest {
  fixed64 ObjectId = 1;
  float pfFontSize = 2;
}

message GraphTemplateSetFontSizeReply {
}

message GraphTemplateSetHeightRequest {
  fixed64 ObjectId = 1;
  sint32 plHeight = 2;
}

message GraphTemplateSetHeightReply {
}

message GraphTemplateSetPlotBackColorRequest {
  fixed64 ObjectId = 1;
  sint32 plHeight = 2;
}

message GraphTemplateSetPlotBackColorReply {
}

message GraphTemplateSetWidthRequest {
  fixed64 ObjectId = 1;
  sint32 plWidth = 2;
}

message GraphTemplateSetWidthReply {
}

message GraphTemplateSetXAxisMajorColorRequest {
  fixed64 ObjectId = 1;
  sint32 plColor = 2;
}

message GraphTemplateSetXAxisMajorColorReply {
}

message GraphTemplateSetXAxisMinorColorRequest {
  fixed64 ObjectId = 1;
  sint32 plColor = 2;
}

message GraphTemplateSetXAxisMinorColorReply {
}

message GraphTemplateSetXAxisNumberColorRequest {
  fixed64 ObjectId = 1;
  sint32 plColor = 2;
}

message GraphTemplateSetXAxisNumberColorReply {
}

message GraphTemplateSetXAxisRangeRequest {
  fixed64 ObjectId = 1;
  double dMin = 2;
  double dMax = 3;
}

message GraphTemplateSetXAxisRangeReply {
}

message GraphTemplateSetXAxisTickColorRequest {
  fixed64 ObjectId = 1;
  sint32 plColor = 2;
}

message GraphTemplateSetXAxisTickColorReply {
}

message GraphTemplateSetYAxisLabelRequest {
  fixed64 ObjectId = 1;
  sint32 lYAxisNo = 2;
  string pstrLabel = 3;
}

message GraphTemplateSetYAxisLabelReply {
}

message GraphTemplateSetYAxisLabelColorRequest {
  fixed64 ObjectId = 1;
  sint32 lYAxisNo = 2;
  sint32 plColor = 3;
}

message GraphTemplateSetYAxisLabelColorReply {
}

message GraphTemplateSetYAxisMajorColorRequest {
  fixed64 ObjectId = 1;
  sint32 lYAxisNo = 2;
  sint32 plColor = 3;
}

message GraphTemplateSetYAxisMajorColorReply {
}

message GraphTemplateSetYAxisMinorColorRequest {
  fixed64 ObjectId = 1;
  sint32 lYAxisNo = 2;
  sint32 plColor = 3;
}

message GraphTemplateSetYAxisMinorColorReply {
}

message GraphTemplateSetYAxisNumberColorRequest {
  fixed64 ObjectId = 1;
  sint32 lYAxisNo = 2;
  sint32 plColor = 3;
}

message GraphTemplateSetYAxisNumberColorReply {
}

message GraphTemplateSetYAxisRangeRequest {
  fixed64 ObjectId = 1;
  double dMin = 2;
  double dMax = 3;
  sint32 lYAxisNo = 4;
}

message GraphTemplateSetYAxisRangeReply {
}

message GraphTemplateSetYAxisRightRequest {
  fixed64 ObjectId = 1;
  sint32 lYAxisNo = 2;
  bool pbRight = 3;
}

message GraphTemplateSetYAxisRightReply {
}

message GraphTemplateSetYAxisTickColorRequest {
  fixed64 ObjectId = 1;
  sint32 lYAxisNo = 2;
  sint32 plColor = 3;
}

message GraphTemplateSetYAxisTickColorReply {
}

message GUICreateImageRequest {
  string strSourcePath = 1;
  string strDestinationPath = 2;
}

message GUICreateImageReply {
  bool RetVal = 1;
}

message GUIGetChartTimeAxisRequest {
}

message GUIGetChartTimeAxisReply {
  double RetVal = 1;
}

message GUIGetCockpitRequest {
}

message GUIGetCockpitReply {
  string RetVal = 1;
}

message GUIGetPanelNamesRequest {
}

message GUIGetPanelNamesReply {
  bool RetVal = 1;
  repeated string paPanelNames = 2;
}

message GUIGetWorkpageRequest {
}

message GUIGetWorkpageReply {
  string RetVal = 1;
}

message GUIGoOfflineRequest {
  bool bOfflineMode = 1;
}

message GUIGoOfflineReply {
  bool RetVal = 1;
}

message GUILoadCockpitRequest {
  string strCockpit = 1;
}

message GUILoadCockpitReply {
  bool RetVal = 1;
}

message GUILoadWorkpageRequest {
  string strWorkpage = 1;
}

message GUILoadWorkpageReply {
  bool RetVal = 1;
}

message GUIReloadLinksRequest {
}

message GUIReloadLinksReply {
}

message GUISaveCockpitRequest {
  string strCockpit = 1;
}

message GUISaveCockpitReply {
  bool RetVal = 1;
}

message GUISaveWorkpageRequest {
  string strWorkpage = 1;
}

message GUISaveWorkpageReply {
  bool RetVal = 1;
}

message GUISetChartTimeAxisRequest {
  double pVal = 1;
}

message GUISetChartTimeAxisReply {
}

message GUIShowMeasureRequest {
  string strFileName = 1;
  uint64 uStartSample = 2;
  uint64 uSampleCount = 3;
  string strTimeBase = 4;
}

message GUIShowMeasureReply {
  bool RetVal = 1;
}

message GUIShowPanelRequest {
  oneof panel {
    sint32 panel_int32 = 39;
    string panel_string = 40;
  }
  optional bool bLeftWorkpage = 1;
}

message GUIShowPanelReply {
  bool RetVal = 1;
}

message IPduFilterGetNameRequest {
  fixed64 ObjectId = 1;
}

message IPduFilterGetNameReply {
  string RetVal = 1;
}

message IPduFilterGetPassRequest {
  fixed64 ObjectId = 1;
}

message IPduFilterGetPassReply {
  bool RetVal = 1;
}

message IPduFilterGetRxRequest {
  fixed64 ObjectId = 1;
}

message IPduFilterGetRxReply {
  bool RetVal = 1;
}

message IPduFilterGetTxRequest {
  fixed64 ObjectId = 1;
}

message IPduFilterGetTxReply {
  bool RetVal = 1;
}

message IPduFilterSetNameRequest {
  fixed64 ObjectId = 1;
  string pstrName = 2;
}

message IPduFilterSetNameReply {
}

message IPduFilterSetPassRequest {
  fixed64 ObjectId = 1;
  bool pbPass = 2;
}

message IPduFilterSetPassReply {
}

message IPduFilterSetRxRequest {
  fixed64 ObjectId = 1;
  bool pbRx = 2;
}

message IPduFilterSetRxReply {
}

message IPduFilterSetTxRequest {
  fixed64 ObjectId = 1;
  bool pbTx = 2;
}

message IPduFilterSetTxReply {
}

message IPduMsgGetDataRequest {
  fixed64 ObjectId = 1;
}

message IPduMsgGetDataReply {
  bytes RetVal = 1;
}

message IPduMsgGetNameRequest {
  fixed64 ObjectId = 1;
}

message IPduMsgGetNameReply {
  string RetVal = 1;
}

message IPduMsgGetSignalRequest {
  fixed64 ObjectId = 1;
  oneof Signal {
    sint32 Signal_int32 = 39;
    string Signal_string = 40;
  }
}

message IPduMsgGetSignalReply {
  fixed64 RetVal = 1;
}

message IPduMsgGetSignalCountRequest {
  fixed64 ObjectId = 1;
}

message IPduMsgGetSignalCountReply {
  sint32 RetVal = 1;
}

message IPduOnIpFilterGetSourceIpMaxRequest {
  fixed64 ObjectId = 1;
}

message IPduOnIpFilterGetSourceIpMaxReply {
  string RetVal = 1;
}

message IPduOnIpFilterGetSourceIpMinRequest {
  fixed64 ObjectId = 1;
}

message IPduOnIpFilterGetSourceIpMinReply {
  string RetVal = 1;
}

message IPduOnIpFilterGetSourcePortMaxRequest {
  fixed64 ObjectId = 1;
}

message IPduOnIpFilterGetSourcePortMaxReply {
  uint32 RetVal = 1;
}

message IPduOnIpFilterGetSourcePortMinRequest {
  fixed64 ObjectId = 1;
}

message IPduOnIpFilterGetSourcePortMinReply {
  uint32 RetVal = 1;
}

message IPduOnIpFilterGetTargetIpMaxRequest {
  fixed64 ObjectId = 1;
}

message IPduOnIpFilterGetTargetIpMaxReply {
  string RetVal = 1;
}

message IPduOnIpFilterGetTargetIpMinRequest {
  fixed64 ObjectId = 1;
}

message IPduOnIpFilterGetTargetIpMinReply {
  string RetVal = 1;
}

message IPduOnIpFilterGetTargetPortMaxRequest {
  fixed64 ObjectId = 1;
}

message IPduOnIpFilterGetTargetPortMaxReply {
  uint32 RetVal = 1;
}

message IPduOnIpFilterGetTargetPortMinRequest {
  fixed64 ObjectId = 1;
}

message IPduOnIpFilterGetTargetPortMinReply {
  uint32 RetVal = 1;
}

message IPduOnIpFilterGetTransportProtocolRequest {
  fixed64 ObjectId = 1;
}

message IPduOnIpFilterGetTransportProtocolReply {
  string RetVal = 1;
}

message IPduOnIpFilterSetSourceIpRequest {
  fixed64 ObjectId = 1;
  string SourceIp = 2;
}

message IPduOnIpFilterSetSourceIpReply {
}

message IPduOnIpFilterSetSourceIpMaxRequest {
  fixed64 ObjectId = 1;
  string pstrSourceIpMax = 2;
}

message IPduOnIpFilterSetSourceIpMaxReply {
}

message IPduOnIpFilterSetSourceIpMinRequest {
  fixed64 ObjectId = 1;
  string pstrSourceIpMin = 2;
}

message IPduOnIpFilterSetSourceIpMinReply {
}

message IPduOnIpFilterSetSourcePortRequest {
  fixed64 ObjectId = 1;
  uint32 SourcePort = 2;
}

message IPduOnIpFilterSetSourcePortReply {
}

message IPduOnIpFilterSetSourcePortMaxRequest {
  fixed64 ObjectId = 1;
  uint32 puSourcePortMax = 2;
}

message IPduOnIpFilterSetSourcePortMaxReply {
}

message IPduOnIpFilterSetSourcePortMinRequest {
  fixed64 ObjectId = 1;
  uint32 puSourcePortMin = 2;
}

message IPduOnIpFilterSetSourcePortMinReply {
}

message IPduOnIpFilterSetTargetIpRequest {
  fixed64 ObjectId = 1;
  string TargetIp = 2;
}

message IPduOnIpFilterSetTargetIpReply {
}

message IPduOnIpFilterSetTargetIpMaxRequest {
  fixed64 ObjectId = 1;
  string pstrTargetIpMax = 2;
}

message IPduOnIpFilterSetTargetIpMaxReply {
}

message IPduOnIpFilterSetTargetIpMinRequest {
  fixed64 ObjectId = 1;
  string pstrTargetIpMin = 2;
}

message IPduOnIpFilterSetTargetIpMinReply {
}

message IPduOnIpFilterSetTargetPortRequest {
  fixed64 ObjectId = 1;
  uint32 TargetPort = 2;
}

message IPduOnIpFilterSetTargetPortReply {
}

message IPduOnIpFilterSetTargetPortMaxRequest {
  fixed64 ObjectId = 1;
  uint32 puTargetPortMax = 2;
}

message IPduOnIpFilterSetTargetPortMaxReply {
}

message IPduOnIpFilterSetTargetPortMinRequest {
  fixed64 ObjectId = 1;
  uint32 puTargetPortMin = 2;
}

message IPduOnIpFilterSetTargetPortMinReply {
}

message IPduOnIpFilterSetTransportProtocolRequest {
  fixed64 ObjectId = 1;
  string pstrTransportProtocol = 2;
}

message IPduOnIpFilterSetTransportProtocolReply {
}

message IPduSignalGetDescriptionRequest {
  fixed64 ObjectId = 1;
}

message IPduSignalGetDescriptionReply {
  string RetVal = 1;
}

message IPduSignalGetNameRequest {
  fixed64 ObjectId = 1;
}

message IPduSignalGetNameReply {
  string RetVal = 1;
}

message IPduSignalGetRawValueRequest {
  fixed64 ObjectId = 1;
}

message IPduSignalGetRawValueReply {
  oneof RetVal {
    uint64 RetVal_uint64 = 35;
    bytes RetVal_uint8array = 37;
  }
}

message IPduSignalGetUnitRequest {
  fixed64 ObjectId = 1;
}

message IPduSignalGetUnitReply {
  string RetVal = 1;
}

message IPduSignalGetValueRequest {
  fixed64 ObjectId = 1;
}

message IPduSignalGetValueReply {
  oneof RetVal {
    double RetVal_double = 31;
    sint64 RetVal_int64 = 33;
    uint64 RetVal_uint64 = 35;
    bytes RetVal_uint8array = 37;
    string RetVal_string = 40;
  }
}

message IsoTpFilterApplyRequest {
  fixed64 ObjectId = 1;
  fixed64 pEvaluation = 2;
}

message IsoTpFilterApplyReply {
}

message IsoTpFilterGetAddressExtensionMaxRequest {
  fixed64 ObjectId = 1;
}

message IsoTpFilterGetAddressExtensionMaxReply {
  uint32 RetVal = 1;
}

message IsoTpFilterGetAddressExtensionMinRequest {
  fixed64 ObjectId = 1;
}

message IsoTpFilterGetAddressExtensionMinReply {
  uint32 RetVal = 1;
}

message IsoTpFilterGetIdRequest {
  fixed64 ObjectId = 1;
}

message IsoTpFilterGetIdReply {
  sint32 RetVal = 1;
}

message IsoTpFilterGetPassRequest {
  fixed64 ObjectId = 1;
}

message IsoTpFilterGetPassReply {
  bool RetVal = 1;
}

message IsoTpFilterGetRxRequest {
  fixed64 ObjectId = 1;
}

message IsoTpFilterGetRxReply {
  bool RetVal = 1;
}

message IsoTpFilterGetTxRequest {
  fixed64 ObjectId = 1;
}

message IsoTpFilterGetTxReply {
  bool RetVal = 1;
}

message IsoTpFilterSetAddressExtensionRequest {
  fixed64 ObjectId = 1;
  uint32 AddressExtension = 2;
}

message IsoTpFilterSetAddressExtensionReply {
}

message IsoTpFilterSetAddressExtensionMaxRequest {
  fixed64 ObjectId = 1;
  uint32 pbyAddressExtensionMax = 2;
}

message IsoTpFilterSetAddressExtensionMaxReply {
}

message IsoTpFilterSetAddressExtensionMinRequest {
  fixed64 ObjectId = 1;
  uint32 pbyAddressExtensionMin = 2;
}

message IsoTpFilterSetAddressExtensionMinReply {
}

message IsoTpFilterSetIdRequest {
  fixed64 ObjectId = 1;
  sint32 plId = 2;
}

message IsoTpFilterSetIdReply {
}

message IsoTpFilterSetNameRequest {
  fixed64 ObjectId = 1;
  string strChannel = 2;
  string Name = 3;
}

message IsoTpFilterSetNameReply {
}

message IsoTpFilterSetPassRequest {
  fixed64 ObjectId = 1;
  bool pbPass = 2;
}

message IsoTpFilterSetPassReply {
}

message IsoTpFilterSetRxRequest {
  fixed64 ObjectId = 1;
  bool pbRx = 2;
}

message IsoTpFilterSetRxReply {
}

message IsoTpFilterSetTxRequest {
  fixed64 ObjectId = 1;
  bool pbTx = 2;
}

message IsoTpFilterSetTxReply {
}

message IsoTpMsgGetAddressExtensionRequest {
  fixed64 ObjectId = 1;
}

message IsoTpMsgGetAddressExtensionReply {
  uint32 RetVal = 1;
}

message IsoTpMsgGetDataRequest {
  fixed64 ObjectId = 1;
}

message IsoTpMsgGetDataReply {
  bytes RetVal = 1;
}

message IsoTpMsgGetIdRequest {
  fixed64 ObjectId = 1;
}

message IsoTpMsgGetIdReply {
  sint32 RetVal = 1;
}

message IsoTpMsgGetNameRequest {
  fixed64 ObjectId = 1;
}

message IsoTpMsgGetNameReply {
  string RetVal = 1;
}

message IsoTpMsgGetStatusRequest {
  fixed64 ObjectId = 1;
}

message IsoTpMsgGetStatusReply {
  IsoTpMsgStatus RetVal = 1;
}

message IsoTpMsgSendRequest {
  fixed64 ObjectId = 1;
}

message IsoTpMsgSendReply {
}

message IsoTpMsgSetAddressExtensionRequest {
  fixed64 ObjectId = 1;
  uint32 pbyAddressExtension = 2;
}

message IsoTpMsgSetAddressExtensionReply {
}

message IsoTpMsgSetDataRequest {
  fixed64 ObjectId = 1;
  bytes paData = 2;
}

message IsoTpMsgSetDataReply {
}

message IsoTpMsgSetIdRequest {
  fixed64 ObjectId = 1;
  sint32 plId = 2;
}

message IsoTpMsgSetIdReply {
}

message IsoTpMsgSetNameRequest {
  fixed64 ObjectId = 1;
  string pstrName = 2;
}

message IsoTpMsgSetNameReply {
}

message J1939FilterGetDestinationAddressMaxRequest {
  fixed64 ObjectId = 1;
}

message J1939FilterGetDestinationAddressMaxReply {
  uint32 RetVal = 1;
}

message J1939FilterGetDestinationAddressMinRequest {
  fixed64 ObjectId = 1;
}

message J1939FilterGetDestinationAddressMinReply {
  uint32 RetVal = 1;
}

message J1939FilterGetParameterGroupNumberMaxRequest {
  fixed64 ObjectId = 1;
}

message J1939FilterGetParameterGroupNumberMaxReply {
  sint32 RetVal = 1;
}

message J1939FilterGetParameterGroupNumberMinRequest {
  fixed64 ObjectId = 1;
}

message J1939FilterGetParameterGroupNumberMinReply {
  sint32 RetVal = 1;
}

message J1939FilterGetPassRequest {
  fixed64 ObjectId = 1;
}

message J1939FilterGetPassReply {
  bool RetVal = 1;
}

message J1939FilterGetPriorityMaxRequest {
  fixed64 ObjectId = 1;
}

message J1939FilterGetPriorityMaxReply {
  uint32 RetVal = 1;
}

message J1939FilterGetPriorityMinRequest {
  fixed64 ObjectId = 1;
}

message J1939FilterGetPriorityMinReply {
  uint32 RetVal = 1;
}

message J1939FilterGetRxRequest {
  fixed64 ObjectId = 1;
}

message J1939FilterGetRxReply {
  bool RetVal = 1;
}

message J1939FilterGetSourceAddressMaxRequest {
  fixed64 ObjectId = 1;
}

message J1939FilterGetSourceAddressMaxReply {
  uint32 RetVal = 1;
}

message J1939FilterGetSourceAddressMinRequest {
  fixed64 ObjectId = 1;
}

message J1939FilterGetSourceAddressMinReply {
  uint32 RetVal = 1;
}

message J1939FilterGetTxRequest {
  fixed64 ObjectId = 1;
}

message J1939FilterGetTxReply {
  bool RetVal = 1;
}

message J1939FilterSetDestinationAddressRequest {
  fixed64 ObjectId = 1;
  uint32 DestinationAddress = 2;
}

message J1939FilterSetDestinationAddressReply {
}

message J1939FilterSetDestinationAddressMaxRequest {
  fixed64 ObjectId = 1;
  uint32 pbyDestinationAddressMax = 2;
}

message J1939FilterSetDestinationAddressMaxReply {
}

message J1939FilterSetDestinationAddressMinRequest {
  fixed64 ObjectId = 1;
  uint32 pbyDestinationAddressMin = 2;
}

message J1939FilterSetDestinationAddressMinReply {
}

message J1939FilterSetParameterGroupNumberRequest {
  fixed64 ObjectId = 1;
  sint32 ParameterGroupNumber = 2;
}

message J1939FilterSetParameterGroupNumberReply {
}

message J1939FilterSetParameterGroupNumberMaxRequest {
  fixed64 ObjectId = 1;
  sint32 plParameterGroupNumberMax = 2;
}

message J1939FilterSetParameterGroupNumberMaxReply {
}

message J1939FilterSetParameterGroupNumberMinRequest {
  fixed64 ObjectId = 1;
  sint32 plParameterGroupNumberMin = 2;
}

message J1939FilterSetParameterGroupNumberMinReply {
}

message J1939FilterSetPassRequest {
  fixed64 ObjectId = 1;
  bool pbPass = 2;
}

message J1939FilterSetPassReply {
}

message J1939FilterSetPriorityRequest {
  fixed64 ObjectId = 1;
  uint32 Priority = 2;
}

message J1939FilterSetPriorityReply {
}

message J1939FilterSetPriorityMaxRequest {
  fixed64 ObjectId = 1;
  uint32 pbyPriorityMax = 2;
}

message J1939FilterSetPriorityMaxReply {
}

message J1939FilterSetPriorityMinRequest {
  fixed64 ObjectId = 1;
  uint32 pbyPriorityMin = 2;
}

message J1939FilterSetPriorityMinReply {
}

message J1939FilterSetRxRequest {
  fixed64 ObjectId = 1;
  bool pbRx = 2;
}

message J1939FilterSetRxReply {
}

message J1939FilterSetSourceAddressRequest {
  fixed64 ObjectId = 1;
  uint32 SourceAddress = 2;
}

message J1939FilterSetSourceAddressReply {
}

message J1939FilterSetSourceAddressMaxRequest {
  fixed64 ObjectId = 1;
  uint32 pbySourceAddressMax = 2;
}

message J1939FilterSetSourceAddressMaxReply {
}

message J1939FilterSetSourceAddressMinRequest {
  fixed64 ObjectId = 1;
  uint32 pbySourceAddressMin = 2;
}

message J1939FilterSetSourceAddressMinReply {
}

message J1939FilterSetTxRequest {
  fixed64 ObjectId = 1;
  bool pbTx = 2;
}

message J1939FilterSetTxReply {
}

message J1939MsgGetDestinationAddressRequest {
  fixed64 ObjectId = 1;
}

message J1939MsgGetDestinationAddressReply {
  uint32 RetVal = 1;
}

message J1939MsgGetParameterGroupNumberRequest {
  fixed64 ObjectId = 1;
}

message J1939MsgGetParameterGroupNumberReply {
  sint32 RetVal = 1;
}

message J1939MsgGetPriorityRequest {
  fixed64 ObjectId = 1;
}

message J1939MsgGetPriorityReply {
  uint32 RetVal = 1;
}

message J1939MsgGetSourceAddressRequest {
  fixed64 ObjectId = 1;
}

message J1939MsgGetSourceAddressReply {
  uint32 RetVal = 1;
}

message J1939MsgGetStatusRequest {
  fixed64 ObjectId = 1;
}

message J1939MsgGetStatusReply {
  J1939MsgStatus RetVal = 1;
}

message J1939MsgSetDestinationAddressRequest {
  fixed64 ObjectId = 1;
  uint32 pbyDestinationAddress = 2;
}

message J1939MsgSetDestinationAddressReply {
}

message J1939MsgSetParameterGroupNumberRequest {
  fixed64 ObjectId = 1;
  sint32 plParameterGroupNumber = 2;
}

message J1939MsgSetParameterGroupNumberReply {
}

message J1939MsgSetPriorityRequest {
  fixed64 ObjectId = 1;
  uint32 pbyPriority = 2;
}

message J1939MsgSetPriorityReply {
}

message J1939MsgSetSourceAddressRequest {
  fixed64 ObjectId = 1;
  uint32 pbySourceAddress = 2;
}

message J1939MsgSetSourceAddressReply {
}

message KeywordGetDescriptionRequest {
  fixed64 ObjectId = 1;
}

message KeywordGetDescriptionReply {
  string RetVal = 1;
}

message KeywordGetNameRequest {
  fixed64 ObjectId = 1;
}

message KeywordGetNameReply {
  string RetVal = 1;
}

message KeywordGetTypeRequest {
  fixed64 ObjectId = 1;
}

message KeywordGetTypeReply {
  KeywordType RetVal = 1;
}

message KeywordGetValueRequest {
  fixed64 ObjectId = 1;
}

message KeywordGetValueReply {
  string RetVal = 1;
}

message KeywordSetDescriptionRequest {
  fixed64 ObjectId = 1;
  string pVal = 2;
}

message KeywordSetDescriptionReply {
}

message KeywordSetValueRequest {
  fixed64 ObjectId = 1;
  string pVal = 2;
}

message KeywordSetValueReply {
}

message LinEventFilterGetEventMaskRequest {
  fixed64 ObjectId = 1;
}

message LinEventFilterGetEventMaskReply {
  LinEventMsgType RetVal = 1;
}

message LinEventFilterGetPassRequest {
  fixed64 ObjectId = 1;
}

message LinEventFilterGetPassReply {
  bool RetVal = 1;
}

message LinEventFilterGetRxRequest {
  fixed64 ObjectId = 1;
}

message LinEventFilterGetRxReply {
  bool RetVal = 1;
}

message LinEventFilterGetTxRequest {
  fixed64 ObjectId = 1;
}

message LinEventFilterGetTxReply {
  bool RetVal = 1;
}

message LinEventFilterSetEventMaskRequest {
  fixed64 ObjectId = 1;
  LinEventMsgType peMask = 2;
}

message LinEventFilterSetEventMaskReply {
}

message LinEventFilterSetPassRequest {
  fixed64 ObjectId = 1;
  bool pbPass = 2;
}

message LinEventFilterSetPassReply {
}

message LinEventFilterSetRxRequest {
  fixed64 ObjectId = 1;
  bool pbRx = 2;
}

message LinEventFilterSetRxReply {
}

message LinEventFilterSetTxRequest {
  fixed64 ObjectId = 1;
  bool pbTx = 2;
}

message LinEventFilterSetTxReply {
}

message LinEventMsgGetEventRequest {
  fixed64 ObjectId = 1;
}

message LinEventMsgGetEventReply {
  LinEventMsgType RetVal = 1;
}

message LinFilterGetIdMaxRequest {
  fixed64 ObjectId = 1;
}

message LinFilterGetIdMaxReply {
  uint32 RetVal = 1;
}

message LinFilterGetIdMinRequest {
  fixed64 ObjectId = 1;
}

message LinFilterGetIdMinReply {
  uint32 RetVal = 1;
}

message LinFilterGetPassRequest {
  fixed64 ObjectId = 1;
}

message LinFilterGetPassReply {
  bool RetVal = 1;
}

message LinFilterGetRxRequest {
  fixed64 ObjectId = 1;
}

message LinFilterGetRxReply {
  bool RetVal = 1;
}

message LinFilterGetTxRequest {
  fixed64 ObjectId = 1;
}

message LinFilterGetTxReply {
  bool RetVal = 1;
}

message LinFilterSetIdRequest {
  fixed64 ObjectId = 1;
  uint32 Id = 2;
}

message LinFilterSetIdReply {
}

message LinFilterSetIdMaxRequest {
  fixed64 ObjectId = 1;
  uint32 pbyIdMax = 2;
}

message LinFilterSetIdMaxReply {
}

message LinFilterSetIdMinRequest {
  fixed64 ObjectId = 1;
  uint32 pbyIdMin = 2;
}

message LinFilterSetIdMinReply {
}

message LinFilterSetNameRequest {
  fixed64 ObjectId = 1;
  string strChannel = 2;
  string Name = 3;
}

message LinFilterSetNameReply {
}

message LinFilterSetPassRequest {
  fixed64 ObjectId = 1;
  bool pbPass = 2;
}

message LinFilterSetPassReply {
}

message LinFilterSetRxRequest {
  fixed64 ObjectId = 1;
  bool pbRx = 2;
}

message LinFilterSetRxReply {
}

message LinFilterSetTxRequest {
  fixed64 ObjectId = 1;
  bool pbTx = 2;
}

message LinFilterSetTxReply {
}

message LinMsgGetCRCRequest {
  fixed64 ObjectId = 1;
}

message LinMsgGetCRCReply {
  uint32 RetVal = 1;
}

message LinMsgGetDataRequest {
  fixed64 ObjectId = 1;
}

message LinMsgGetDataReply {
  bytes RetVal = 1;
}

message LinMsgGetIdRequest {
  fixed64 ObjectId = 1;
}

message LinMsgGetIdReply {
  uint32 RetVal = 1;
}

message LinMsgGetNameRequest {
  fixed64 ObjectId = 1;
}

message LinMsgGetNameReply {
  string RetVal = 1;
}

message LinMsgGetSignalRequest {
  fixed64 ObjectId = 1;
  oneof Signal {
    sint32 Signal_int32 = 39;
    string Signal_string = 40;
  }
}

message LinMsgGetSignalReply {
  fixed64 RetVal = 1;
}

message LinMsgGetSignalCountRequest {
  fixed64 ObjectId = 1;
}

message LinMsgGetSignalCountReply {
  sint32 RetVal = 1;
}

message LinMsgGetStatusRequest {
  fixed64 ObjectId = 1;
}

message LinMsgGetStatusReply {
  LinMsgStatus RetVal = 1;
}

message LinSignalGetNameRequest {
  fixed64 ObjectId = 1;
}

message LinSignalGetNameReply {
  string RetVal = 1;
}

message LinSignalGetRawValueRequest {
  fixed64 ObjectId = 1;
}

message LinSignalGetRawValueReply {
  oneof RetVal {
    uint64 RetVal_uint64 = 35;
    bytes RetVal_uint8array = 37;
  }
}

message LinSignalGetValueRequest {
  fixed64 ObjectId = 1;
}

message LinSignalGetValueReply {
  oneof RetVal {
    double RetVal_double = 31;
    sint64 RetVal_int64 = 33;
    uint64 RetVal_uint64 = 35;
    bytes RetVal_uint8array = 37;
    string RetVal_string = 40;
  }
}

message MapLong2VariantGetCountRequest {
  fixed64 ObjectId = 1;
}

message MapLong2VariantGetCountReply {
  sint32 RetVal = 1;
}

message MapLong2VariantGetItemRequest {
  fixed64 ObjectId = 1;
  sint32 lKey = 2;
}

message MapLong2VariantGetItemReply {
  oneof RetVal {
    double RetVal_double = 31;
    sint64 RetVal_int64 = 33;
    uint64 RetVal_uint64 = 35;
    DoubleArray RetVal_doublearray = 32;
    Int64Array RetVal_int64array = 34;
    UInt64Array RetVal_uint64array = 36;
    string RetVal_string = 40;
    StringArray RetVal_stringarray = 41;
    bool RetVal_bool = 38;
    fixed64 RetVal_obj = 30;
    double RetVal_date = 42;
  }
}

message MapLong2VariantGetNextRequest {
  fixed64 ObjectId = 1;
  uint64 pPosition = 2;
}

message MapLong2VariantGetNextReply {
  oneof RetVal {
    double RetVal_double = 31;
    sint64 RetVal_int64 = 33;
    uint64 RetVal_uint64 = 35;
    DoubleArray RetVal_doublearray = 32;
    Int64Array RetVal_int64array = 34;
    UInt64Array RetVal_uint64array = 36;
    string RetVal_string = 40;
    StringArray RetVal_stringarray = 41;
    bool RetVal_bool = 38;
    fixed64 RetVal_obj = 30;
    double RetVal_date = 42;
  }
  uint64 pPosition = 2;
  sint32 plKey = 3;
}

message MapLong2VariantGetStartPositionRequest {
  fixed64 ObjectId = 1;
}

message MapLong2VariantGetStartPositionReply {
  uint64 RetVal = 1;
}

message MapLong2VariantIsEmptyRequest {
  fixed64 ObjectId = 1;
}

message MapLong2VariantIsEmptyReply {
  bool RetVal = 1;
}

message MapLong2VariantLookupRequest {
  fixed64 ObjectId = 1;
  sint32 lKey = 2;
}

message MapLong2VariantLookupReply {
  bool RetVal = 1;
  oneof pValue {
    double pValue_double = 31;
    sint64 pValue_int64 = 33;
    uint64 pValue_uint64 = 35;
    DoubleArray pValue_doublearray = 32;
    Int64Array pValue_int64array = 34;
    UInt64Array pValue_uint64array = 36;
    string pValue_string = 40;
    StringArray pValue_stringarray = 41;
    bool pValue_bool = 38;
    fixed64 pValue_obj = 30;
    double pValue_date = 42;
  }
}

message MapLong2VariantRemoveAllRequest {
  fixed64 ObjectId = 1;
}

message MapLong2VariantRemoveAllReply {
}

message MapLong2VariantRemoveKeyRequest {
  fixed64 ObjectId = 1;
  sint32 lKey = 2;
}

message MapLong2VariantRemoveKeyReply {
  bool RetVal = 1;
}

message MapLong2VariantSetAtRequest {
  fixed64 ObjectId = 1;
  sint32 lKey = 2;
  oneof value {
    double value_double = 31;
    sint64 value_int64 = 33;
    uint64 value_uint64 = 35;
    DoubleArray value_doublearray = 32;
    Int64Array value_int64array = 34;
    UInt64Array value_uint64array = 36;
    string value_string = 40;
    StringArray value_stringarray = 41;
    bool value_bool = 38;
    fixed64 value_obj = 30;
    double value_date = 42;
  }
}

message MapLong2VariantSetAtReply {
  bool RetVal = 1;
}

message MapLong2VariantSetItemRequest {
  fixed64 ObjectId = 1;
  sint32 lKey = 2;
  oneof retval {
    double retval_double = 31;
    sint64 retval_int64 = 33;
    uint64 retval_uint64 = 35;
    DoubleArray retval_doublearray = 32;
    Int64Array retval_int64array = 34;
    UInt64Array retval_uint64array = 36;
    string retval_string = 40;
    StringArray retval_stringarray = 41;
    bool retval_bool = 38;
    fixed64 retval_obj = 30;
    double retval_date = 42;
  }
}

message MapLong2VariantSetItemReply {
}

message MapObject2VariantGetCountRequest {
  fixed64 ObjectId = 1;
}

message MapObject2VariantGetCountReply {
  sint32 RetVal = 1;
}

message MapObject2VariantGetItemRequest {
  fixed64 ObjectId = 1;
  fixed64 key = 2;
}

message MapObject2VariantGetItemReply {
  oneof RetVal {
    double RetVal_double = 31;
    sint64 RetVal_int64 = 33;
    uint64 RetVal_uint64 = 35;
    DoubleArray RetVal_doublearray = 32;
    Int64Array RetVal_int64array = 34;
    UInt64Array RetVal_uint64array = 36;
    string RetVal_string = 40;
    StringArray RetVal_stringarray = 41;
    bool RetVal_bool = 38;
    fixed64 RetVal_obj = 30;
    double RetVal_date = 42;
  }
}

message MapObject2VariantGetNextRequest {
  fixed64 ObjectId = 1;
  uint64 pPosition = 2;
}

message MapObject2VariantGetNextReply {
  oneof RetVal {
    double RetVal_double = 31;
    sint64 RetVal_int64 = 33;
    uint64 RetVal_uint64 = 35;
    DoubleArray RetVal_doublearray = 32;
    Int64Array RetVal_int64array = 34;
    UInt64Array RetVal_uint64array = 36;
    string RetVal_string = 40;
    StringArray RetVal_stringarray = 41;
    bool RetVal_bool = 38;
    fixed64 RetVal_obj = 30;
    double RetVal_date = 42;
  }
  uint64 pPosition = 2;
  fixed64 pKey = 3;
}

message MapObject2VariantGetStartPositionRequest {
  fixed64 ObjectId = 1;
}

message MapObject2VariantGetStartPositionReply {
  uint64 RetVal = 1;
}

message MapObject2VariantIsEmptyRequest {
  fixed64 ObjectId = 1;
}

message MapObject2VariantIsEmptyReply {
  bool RetVal = 1;
}

message MapObject2VariantLookupRequest {
  fixed64 ObjectId = 1;
  fixed64 key = 2;
}

message MapObject2VariantLookupReply {
  bool RetVal = 1;
  oneof pValue {
    double pValue_double = 31;
    sint64 pValue_int64 = 33;
    uint64 pValue_uint64 = 35;
    DoubleArray pValue_doublearray = 32;
    Int64Array pValue_int64array = 34;
    UInt64Array pValue_uint64array = 36;
    string pValue_string = 40;
    StringArray pValue_stringarray = 41;
    bool pValue_bool = 38;
    fixed64 pValue_obj = 30;
    double pValue_date = 42;
  }
}

message MapObject2VariantRemoveAllRequest {
  fixed64 ObjectId = 1;
}

message MapObject2VariantRemoveAllReply {
}

message MapObject2VariantRemoveKeyRequest {
  fixed64 ObjectId = 1;
  fixed64 key = 2;
}

message MapObject2VariantRemoveKeyReply {
  bool RetVal = 1;
}

message MapObject2VariantSetAtRequest {
  fixed64 ObjectId = 1;
  fixed64 key = 2;
  oneof value {
    double value_double = 31;
    sint64 value_int64 = 33;
    uint64 value_uint64 = 35;
    DoubleArray value_doublearray = 32;
    Int64Array value_int64array = 34;
    UInt64Array value_uint64array = 36;
    string value_string = 40;
    StringArray value_stringarray = 41;
    bool value_bool = 38;
    fixed64 value_obj = 30;
    double value_date = 42;
  }
}

message MapObject2VariantSetAtReply {
  bool RetVal = 1;
}

message MapObject2VariantSetItemRequest {
  fixed64 ObjectId = 1;
  fixed64 key = 2;
  oneof retval {
    double retval_double = 31;
    sint64 retval_int64 = 33;
    uint64 retval_uint64 = 35;
    DoubleArray retval_doublearray = 32;
    Int64Array retval_int64array = 34;
    UInt64Array retval_uint64array = 36;
    string retval_string = 40;
    StringArray retval_stringarray = 41;
    bool retval_bool = 38;
    fixed64 retval_obj = 30;
    double retval_date = 42;
  }
}

message MapObject2VariantSetItemReply {
}

message MapString2VariantGetCountRequest {
  fixed64 ObjectId = 1;
}

message MapString2VariantGetCountReply {
  sint32 RetVal = 1;
}

message MapString2VariantGetItemRequest {
  fixed64 ObjectId = 1;
  string szKey = 2;
}

message MapString2VariantGetItemReply {
  oneof RetVal {
    double RetVal_double = 31;
    sint64 RetVal_int64 = 33;
    uint64 RetVal_uint64 = 35;
    DoubleArray RetVal_doublearray = 32;
    Int64Array RetVal_int64array = 34;
    UInt64Array RetVal_uint64array = 36;
    string RetVal_string = 40;
    StringArray RetVal_stringarray = 41;
    bool RetVal_bool = 38;
    fixed64 RetVal_obj = 30;
    double RetVal_date = 42;
  }
}

message MapString2VariantGetNextRequest {
  fixed64 ObjectId = 1;
  uint64 pPosition = 2;
}

message MapString2VariantGetNextReply {
  oneof RetVal {
    double RetVal_double = 31;
    sint64 RetVal_int64 = 33;
    uint64 RetVal_uint64 = 35;
    DoubleArray RetVal_doublearray = 32;
    Int64Array RetVal_int64array = 34;
    UInt64Array RetVal_uint64array = 36;
    string RetVal_string = 40;
    StringArray RetVal_stringarray = 41;
    bool RetVal_bool = 38;
    fixed64 RetVal_obj = 30;
    double RetVal_date = 42;
  }
  uint64 pPosition = 2;
  string pszKey = 3;
}

message MapString2VariantGetStartPositionRequest {
  fixed64 ObjectId = 1;
}

message MapString2VariantGetStartPositionReply {
  uint64 RetVal = 1;
}

message MapString2VariantIsEmptyRequest {
  fixed64 ObjectId = 1;
}

message MapString2VariantIsEmptyReply {
  bool RetVal = 1;
}

message MapString2VariantLookupRequest {
  fixed64 ObjectId = 1;
  string szKey = 2;
}

message MapString2VariantLookupReply {
  bool RetVal = 1;
  oneof pValue {
    double pValue_double = 31;
    sint64 pValue_int64 = 33;
    uint64 pValue_uint64 = 35;
    DoubleArray pValue_doublearray = 32;
    Int64Array pValue_int64array = 34;
    UInt64Array pValue_uint64array = 36;
    string pValue_string = 40;
    StringArray pValue_stringarray = 41;
    bool pValue_bool = 38;
    fixed64 pValue_obj = 30;
    double pValue_date = 42;
  }
}

message MapString2VariantRemoveAllRequest {
  fixed64 ObjectId = 1;
}

message MapString2VariantRemoveAllReply {
}

message MapString2VariantRemoveKeyRequest {
  fixed64 ObjectId = 1;
  string szKey = 2;
}

message MapString2VariantRemoveKeyReply {
  bool RetVal = 1;
}

message MapString2VariantSetAtRequest {
  fixed64 ObjectId = 1;
  string szKey = 2;
  oneof value {
    double value_double = 31;
    sint64 value_int64 = 33;
    uint64 value_uint64 = 35;
    DoubleArray value_doublearray = 32;
    Int64Array value_int64array = 34;
    UInt64Array value_uint64array = 36;
    string value_string = 40;
    StringArray value_stringarray = 41;
    bool value_bool = 38;
    fixed64 value_obj = 30;
    double value_date = 42;
  }
}

message MapString2VariantSetAtReply {
  bool RetVal = 1;
}

message MapString2VariantSetItemRequest {
  fixed64 ObjectId = 1;
  string szKey = 2;
  oneof retval {
    double retval_double = 31;
    sint64 retval_int64 = 33;
    uint64 retval_uint64 = 35;
    DoubleArray retval_doublearray = 32;
    Int64Array retval_int64array = 34;
    UInt64Array retval_uint64array = 36;
    string retval_string = 40;
    StringArray retval_stringarray = 41;
    bool retval_bool = 38;
    fixed64 retval_obj = 30;
    double retval_date = 42;
  }
}

message MapString2VariantSetItemReply {
}

message MeasureGetMessageFilterRequest {
}

message MeasureGetMessageFilterReply {
  fixed64 RetVal = 1;
}

message MeasureGetParametersRequest {
}

message MeasureGetParametersReply {
  bool pbCyclic = 2;
  double pdFrequency = 3;
  double pdAcquisitionTime = 4;
  TriggerType peTriggerType = 5;
  string pstrTriggerSignal = 6;
  oneof pvTriggerThreshold {
    double pvTriggerThreshold_double = 31;
    sint64 pvTriggerThreshold_int64 = 33;
    uint64 pvTriggerThreshold_uint64 = 35;
  }
  sint32 plMaxPreTriggerSamples = 7;
  TriggerType peEndTriggerType = 8;
  string pstrEndTriggerSignal = 9;
  oneof pvEndTriggerThreshold {
    double pvEndTriggerThreshold_double = 61;
    sint64 pvEndTriggerThreshold_int64 = 63;
    uint64 pvEndTriggerThreshold_uint64 = 65;
  }
  sint32 plMinPostTriggerSamples = 10;
  bool pbConvert64To32BitFloatingPoint = 11;
}

message MeasureGetSignalsRequest {
}

message MeasureGetSignalsReply {
  string RetVal = 1;
}

message MeasureIsRunningRequest {
}

message MeasureIsRunningReply {
  bool RetVal = 1;
}

message MeasurePauseVideoAudioRequest {
  string strName = 1;
  optional bool bPauseVideo = 2;
  optional bool bPauseAudio = 3;
}

message MeasurePauseVideoAudioReply {
  bool RetVal = 1;
}

message MeasureSaveRequest {
  string strLabel = 1;
  string strTitle = 2;
  string strComment = 3;
  string strAdditionalOptions = 4;
  bool bMessageBuffer = 5;
}

message MeasureSaveReply {
  bool RetVal = 1;
}

message MeasureSaveAsRequest {
  string strFileName = 1;
  string strTitle = 2;
  string strComment = 3;
  string strAdditionalOptions = 4;
  bool bMessageBuffer = 5;
}

message MeasureSaveAsReply {
  bool RetVal = 1;
}

message MeasureSaveFileRequest {
  string strLabel = 1;
  string strType = 2;
  string strFileName = 3;
}

message MeasureSaveFileReply {
  bool RetVal = 1;
}

message MeasureSetCalculatedSignalsRequest {
  repeated fixed64 aCalculatedSignals = 1;
}

message MeasureSetCalculatedSignalsReply {
  bool RetVal = 1;
}

message MeasureSetMessageFilterRequest {
  string strChannel = 1;
  string strSubType = 2;
  bool bDefaultPass = 3;
  repeated fixed64 filters = 4;
}

message MeasureSetMessageFilterReply {
  bool RetVal = 1;
}

message MeasureSetParametersRequest {
  bool bCyclic = 1;
  double dFrequency = 2;
  double dAcquisitionTime = 3;
  TriggerType eTriggerType = 4;
  string strTriggerSignal = 5;
  double dTriggerThreshold = 6;
  sint32 lMaxPreTriggerSamples = 7;
  TriggerType eEndTriggerType = 8;
  string strEndTriggerSignal = 9;
  double dEndTriggerThreshold = 10;
  sint32 lMinPostTriggerSamples = 11;
  bool bConvert64To32BitFloatingPoint = 12;
}

message MeasureSetParametersReply {
  bool RetVal = 1;
}

message MeasureSetSignalsRequest {
  string strSignalList = 1;
}

message MeasureSetSignalsReply {
  bool RetVal = 1;
}

message MeasureSetVideoAudioRequest {
  string strName = 1;
  optional bool bActivate = 2;
  bool bPauseVideoInitially = 3;
  bool bPauseAudioInitially = 4;
}

message MeasureSetVideoAudioReply {
  bool RetVal = 1;
}

message MeasureStartRequest {
  optional bool bSaveToDisk = 1;
}

message MeasureStartReply {
  bool RetVal = 1;
}

message MeasureStopRequest {
}

message MeasureStopReply {
  bool RetVal = 1;
}

message MessageSubTypeFilterGetDefaultPassRequest {
  fixed64 ObjectId = 1;
}

message MessageSubTypeFilterGetDefaultPassReply {
  bool RetVal = 1;
}

message MessageSubTypeFilterGetMessageFiltersRequest {
  fixed64 ObjectId = 1;
}

message MessageSubTypeFilterGetMessageFiltersReply {
  repeated fixed64 RetVal = 1;
}

message MostAmsFilterApplyRequest {
  fixed64 ObjectId = 1;
  fixed64 pEvaluation = 2;
}

message MostAmsFilterApplyReply {
}

message MostAmsFilterGetFBlockIdMaxRequest {
  fixed64 ObjectId = 1;
}

message MostAmsFilterGetFBlockIdMaxReply {
  uint32 RetVal = 1;
}

message MostAmsFilterGetFBlockIdMinRequest {
  fixed64 ObjectId = 1;
}

message MostAmsFilterGetFBlockIdMinReply {
  uint32 RetVal = 1;
}

message MostAmsFilterGetFctIdMaxRequest {
  fixed64 ObjectId = 1;
}

message MostAmsFilterGetFctIdMaxReply {
  sint32 RetVal = 1;
}

message MostAmsFilterGetFctIdMinRequest {
  fixed64 ObjectId = 1;
}

message MostAmsFilterGetFctIdMinReply {
  sint32 RetVal = 1;
}

message MostAmsFilterGetInstIdMaxRequest {
  fixed64 ObjectId = 1;
}

message MostAmsFilterGetInstIdMaxReply {
  uint32 RetVal = 1;
}

message MostAmsFilterGetInstIdMinRequest {
  fixed64 ObjectId = 1;
}

message MostAmsFilterGetInstIdMinReply {
  uint32 RetVal = 1;
}

message MostAmsFilterGetMsgTypeMaxRequest {
  fixed64 ObjectId = 1;
}

message MostAmsFilterGetMsgTypeMaxReply {
  uint32 RetVal = 1;
}

message MostAmsFilterGetMsgTypeMinRequest {
  fixed64 ObjectId = 1;
}

message MostAmsFilterGetMsgTypeMinReply {
  uint32 RetVal = 1;
}

message MostAmsFilterGetOpTypeMaxRequest {
  fixed64 ObjectId = 1;
}

message MostAmsFilterGetOpTypeMaxReply {
  uint32 RetVal = 1;
}

message MostAmsFilterGetOpTypeMinRequest {
  fixed64 ObjectId = 1;
}

message MostAmsFilterGetOpTypeMinReply {
  uint32 RetVal = 1;
}

message MostAmsFilterGetPassRequest {
  fixed64 ObjectId = 1;
}

message MostAmsFilterGetPassReply {
  bool RetVal = 1;
}

message MostAmsFilterGetRxRequest {
  fixed64 ObjectId = 1;
}

message MostAmsFilterGetRxReply {
  bool RetVal = 1;
}

message MostAmsFilterGetSourceMaxRequest {
  fixed64 ObjectId = 1;
}

message MostAmsFilterGetSourceMaxReply {
  sint32 RetVal = 1;
}

message MostAmsFilterGetSourceMinRequest {
  fixed64 ObjectId = 1;
}

message MostAmsFilterGetSourceMinReply {
  sint32 RetVal = 1;
}

message MostAmsFilterGetTargetMaxRequest {
  fixed64 ObjectId = 1;
}

message MostAmsFilterGetTargetMaxReply {
  sint32 RetVal = 1;
}

message MostAmsFilterGetTargetMinRequest {
  fixed64 ObjectId = 1;
}

message MostAmsFilterGetTargetMinReply {
  sint32 RetVal = 1;
}

message MostAmsFilterGetTxRequest {
  fixed64 ObjectId = 1;
}

message MostAmsFilterGetTxReply {
  bool RetVal = 1;
}

message MostAmsFilterInitByNameRequest {
  fixed64 ObjectId = 1;
  string strChannel = 2;
  string strFBlock = 3;
  string strFct = 4;
  string strOpType = 5;
}

message MostAmsFilterInitByNameReply {
}

message MostAmsFilterSetFBlockIdRequest {
  fixed64 ObjectId = 1;
  uint32 FBlockId = 2;
}

message MostAmsFilterSetFBlockIdReply {
}

message MostAmsFilterSetFBlockIdMaxRequest {
  fixed64 ObjectId = 1;
  uint32 pbyFBlockIdMax = 2;
}

message MostAmsFilterSetFBlockIdMaxReply {
}

message MostAmsFilterSetFBlockIdMinRequest {
  fixed64 ObjectId = 1;
  uint32 pbyFBlockIdMin = 2;
}

message MostAmsFilterSetFBlockIdMinReply {
}

message MostAmsFilterSetFctIdRequest {
  fixed64 ObjectId = 1;
  sint32 FctId = 2;
}

message MostAmsFilterSetFctIdReply {
}

message MostAmsFilterSetFctIdMaxRequest {
  fixed64 ObjectId = 1;
  sint32 piFctIdMax = 2;
}

message MostAmsFilterSetFctIdMaxReply {
}

message MostAmsFilterSetFctIdMinRequest {
  fixed64 ObjectId = 1;
  sint32 piFctIdMin = 2;
}

message MostAmsFilterSetFctIdMinReply {
}

message MostAmsFilterSetInstIdRequest {
  fixed64 ObjectId = 1;
  uint32 InstId = 2;
}

message MostAmsFilterSetInstIdReply {
}

message MostAmsFilterSetInstIdMaxRequest {
  fixed64 ObjectId = 1;
  uint32 pbyInstIdMax = 2;
}

message MostAmsFilterSetInstIdMaxReply {
}

message MostAmsFilterSetInstIdMinRequest {
  fixed64 ObjectId = 1;
  uint32 pbyInstIdMin = 2;
}

message MostAmsFilterSetInstIdMinReply {
}

message MostAmsFilterSetMsgTypeRequest {
  fixed64 ObjectId = 1;
  uint32 MsgType = 2;
}

message MostAmsFilterSetMsgTypeReply {
}

message MostAmsFilterSetMsgTypeMaxRequest {
  fixed64 ObjectId = 1;
  uint32 pbyMsgTypeMax = 2;
}

message MostAmsFilterSetMsgTypeMaxReply {
}

message MostAmsFilterSetMsgTypeMinRequest {
  fixed64 ObjectId = 1;
  uint32 pbyMsgTypeMin = 2;
}

message MostAmsFilterSetMsgTypeMinReply {
}

message MostAmsFilterSetOpTypeRequest {
  fixed64 ObjectId = 1;
  uint32 OpType = 2;
}

message MostAmsFilterSetOpTypeReply {
}

message MostAmsFilterSetOpTypeMaxRequest {
  fixed64 ObjectId = 1;
  uint32 pbyOpTypeMax = 2;
}

message MostAmsFilterSetOpTypeMaxReply {
}

message MostAmsFilterSetOpTypeMinRequest {
  fixed64 ObjectId = 1;
  uint32 pbyOpTypeMin = 2;
}

message MostAmsFilterSetOpTypeMinReply {
}

message MostAmsFilterSetPassRequest {
  fixed64 ObjectId = 1;
  bool pbPass = 2;
}

message MostAmsFilterSetPassReply {
}

message MostAmsFilterSetRxRequest {
  fixed64 ObjectId = 1;
  bool pbRx = 2;
}

message MostAmsFilterSetRxReply {
}

message MostAmsFilterSetSourceRequest {
  fixed64 ObjectId = 1;
  sint32 Source = 2;
}

message MostAmsFilterSetSourceReply {
}

message MostAmsFilterSetSourceMaxRequest {
  fixed64 ObjectId = 1;
  sint32 plSourceMax = 2;
}

message MostAmsFilterSetSourceMaxReply {
}

message MostAmsFilterSetSourceMinRequest {
  fixed64 ObjectId = 1;
  sint32 plSourceMin = 2;
}

message MostAmsFilterSetSourceMinReply {
}

message MostAmsFilterSetTargetRequest {
  fixed64 ObjectId = 1;
  sint32 Target = 2;
}

message MostAmsFilterSetTargetReply {
}

message MostAmsFilterSetTargetMaxRequest {
  fixed64 ObjectId = 1;
  sint32 plTargetMax = 2;
}

message MostAmsFilterSetTargetMaxReply {
}

message MostAmsFilterSetTargetMinRequest {
  fixed64 ObjectId = 1;
  sint32 plTargetMin = 2;
}

message MostAmsFilterSetTargetMinReply {
}

message MostAmsFilterSetTxRequest {
  fixed64 ObjectId = 1;
  bool pbTx = 2;
}

message MostAmsFilterSetTxReply {
}

message MostAmsMsgGetFBlockRequest {
  fixed64 ObjectId = 1;
}

message MostAmsMsgGetFBlockReply {
  string RetVal = 1;
}

message MostAmsMsgGetFBlockIdRequest {
  fixed64 ObjectId = 1;
}

message MostAmsMsgGetFBlockIdReply {
  uint32 RetVal = 1;
}

message MostAmsMsgGetFctRequest {
  fixed64 ObjectId = 1;
}

message MostAmsMsgGetFctReply {
  string RetVal = 1;
}

message MostAmsMsgGetFctIdRequest {
  fixed64 ObjectId = 1;
}

message MostAmsMsgGetFctIdReply {
  sint32 RetVal = 1;
}

message MostAmsMsgGetInstIdRequest {
  fixed64 ObjectId = 1;
}

message MostAmsMsgGetInstIdReply {
  uint32 RetVal = 1;
}

message MostAmsMsgGetMsgTypeRequest {
  fixed64 ObjectId = 1;
}

message MostAmsMsgGetMsgTypeReply {
  uint32 RetVal = 1;
}

message MostAmsMsgGetOpTypeRequest {
  fixed64 ObjectId = 1;
}

message MostAmsMsgGetOpTypeReply {
  uint32 RetVal = 1;
}

message MostAmsMsgGetParamDataRequest {
  fixed64 ObjectId = 1;
}

message MostAmsMsgGetParamDataReply {
  bytes RetVal = 1;
}

message MostAmsMsgGetSourceRequest {
  fixed64 ObjectId = 1;
}

message MostAmsMsgGetSourceReply {
  sint32 RetVal = 1;
}

message MostAmsMsgGetTargetRequest {
  fixed64 ObjectId = 1;
}

message MostAmsMsgGetTargetReply {
  sint32 RetVal = 1;
}

message MostAmsMsgSendRequest {
  fixed64 ObjectId = 1;
}

message MostAmsMsgSendReply {
}

message MostAmsMsgSetFBlockRequest {
  fixed64 ObjectId = 1;
  string pstrFBlock = 2;
}

message MostAmsMsgSetFBlockReply {
}

message MostAmsMsgSetFBlockIdRequest {
  fixed64 ObjectId = 1;
  uint32 pbyFBlockId = 2;
}

message MostAmsMsgSetFBlockIdReply {
}

message MostAmsMsgSetFctRequest {
  fixed64 ObjectId = 1;
  string pstrFct = 2;
}

message MostAmsMsgSetFctReply {
}

message MostAmsMsgSetFctIdRequest {
  fixed64 ObjectId = 1;
  sint32 piFct = 2;
}

message MostAmsMsgSetFctIdReply {
}

message MostAmsMsgSetInstIdRequest {
  fixed64 ObjectId = 1;
  uint32 pbyInstId = 2;
}

message MostAmsMsgSetInstIdReply {
}

message MostAmsMsgSetMsgTypeRequest {
  fixed64 ObjectId = 1;
  uint32 pbyMsgType = 2;
}

message MostAmsMsgSetMsgTypeReply {
}

message MostAmsMsgSetOpTypeRequest {
  fixed64 ObjectId = 1;
  uint32 pbyOpType = 2;
}

message MostAmsMsgSetOpTypeReply {
}

message MostAmsMsgSetParamDataRequest {
  fixed64 ObjectId = 1;
  bytes paData = 2;
}

message MostAmsMsgSetParamDataReply {
}

message MostAmsMsgSetTargetRequest {
  fixed64 ObjectId = 1;
  sint32 plTarget = 2;
}

message MostAmsMsgSetTargetReply {
}

message MostCmsFilterApplyRequest {
  fixed64 ObjectId = 1;
  fixed64 pEvaluation = 2;
}

message MostCmsFilterApplyReply {
}

message MostCmsFilterGetFBlockIdMaxRequest {
  fixed64 ObjectId = 1;
}

message MostCmsFilterGetFBlockIdMaxReply {
  uint32 RetVal = 1;
}

message MostCmsFilterGetFBlockIdMinRequest {
  fixed64 ObjectId = 1;
}

message MostCmsFilterGetFBlockIdMinReply {
  uint32 RetVal = 1;
}

message MostCmsFilterGetFctIdMaxRequest {
  fixed64 ObjectId = 1;
}

message MostCmsFilterGetFctIdMaxReply {
  sint32 RetVal = 1;
}

message MostCmsFilterGetFctIdMinRequest {
  fixed64 ObjectId = 1;
}

message MostCmsFilterGetFctIdMinReply {
  sint32 RetVal = 1;
}

message MostCmsFilterGetInstIdMaxRequest {
  fixed64 ObjectId = 1;
}

message MostCmsFilterGetInstIdMaxReply {
  uint32 RetVal = 1;
}

message MostCmsFilterGetInstIdMinRequest {
  fixed64 ObjectId = 1;
}

message MostCmsFilterGetInstIdMinReply {
  uint32 RetVal = 1;
}

message MostCmsFilterGetMsgTypeMaxRequest {
  fixed64 ObjectId = 1;
}

message MostCmsFilterGetMsgTypeMaxReply {
  uint32 RetVal = 1;
}

message MostCmsFilterGetMsgTypeMinRequest {
  fixed64 ObjectId = 1;
}

message MostCmsFilterGetMsgTypeMinReply {
  uint32 RetVal = 1;
}

message MostCmsFilterGetOpTypeMaxRequest {
  fixed64 ObjectId = 1;
}

message MostCmsFilterGetOpTypeMaxReply {
  uint32 RetVal = 1;
}

message MostCmsFilterGetOpTypeMinRequest {
  fixed64 ObjectId = 1;
}

message MostCmsFilterGetOpTypeMinReply {
  uint32 RetVal = 1;
}

message MostCmsFilterGetPassRequest {
  fixed64 ObjectId = 1;
}

message MostCmsFilterGetPassReply {
  bool RetVal = 1;
}

message MostCmsFilterGetRxRequest {
  fixed64 ObjectId = 1;
}

message MostCmsFilterGetRxReply {
  bool RetVal = 1;
}

message MostCmsFilterGetSourceMaxRequest {
  fixed64 ObjectId = 1;
}

message MostCmsFilterGetSourceMaxReply {
  sint32 RetVal = 1;
}

message MostCmsFilterGetSourceMinRequest {
  fixed64 ObjectId = 1;
}

message MostCmsFilterGetSourceMinReply {
  sint32 RetVal = 1;
}

message MostCmsFilterGetTargetMaxRequest {
  fixed64 ObjectId = 1;
}

message MostCmsFilterGetTargetMaxReply {
  sint32 RetVal = 1;
}

message MostCmsFilterGetTargetMinRequest {
  fixed64 ObjectId = 1;
}

message MostCmsFilterGetTargetMinReply {
  sint32 RetVal = 1;
}

message MostCmsFilterGetTxRequest {
  fixed64 ObjectId = 1;
}

message MostCmsFilterGetTxReply {
  bool RetVal = 1;
}

message MostCmsFilterInitByNameRequest {
  fixed64 ObjectId = 1;
  string strChannel = 2;
  string strFBlock = 3;
  string strFct = 4;
  string strOpType = 5;
}

message MostCmsFilterInitByNameReply {
}

message MostCmsFilterSetFBlockIdRequest {
  fixed64 ObjectId = 1;
  uint32 FBlockId = 2;
}

message MostCmsFilterSetFBlockIdReply {
}

message MostCmsFilterSetFBlockIdMaxRequest {
  fixed64 ObjectId = 1;
  uint32 pbyFBlockIdMax = 2;
}

message MostCmsFilterSetFBlockIdMaxReply {
}

message MostCmsFilterSetFBlockIdMinRequest {
  fixed64 ObjectId = 1;
  uint32 pbyFBlockIdMin = 2;
}

message MostCmsFilterSetFBlockIdMinReply {
}

message MostCmsFilterSetFctIdRequest {
  fixed64 ObjectId = 1;
  sint32 FctId = 2;
}

message MostCmsFilterSetFctIdReply {
}

message MostCmsFilterSetFctIdMaxRequest {
  fixed64 ObjectId = 1;
  sint32 piFctIdMax = 2;
}

message MostCmsFilterSetFctIdMaxReply {
}

message MostCmsFilterSetFctIdMinRequest {
  fixed64 ObjectId = 1;
  sint32 piFctIdMin = 2;
}

message MostCmsFilterSetFctIdMinReply {
}

message MostCmsFilterSetInstIdRequest {
  fixed64 ObjectId = 1;
  uint32 InstId = 2;
}

message MostCmsFilterSetInstIdReply {
}

message MostCmsFilterSetInstIdMaxRequest {
  fixed64 ObjectId = 1;
  uint32 pbyInstIdMax = 2;
}

message MostCmsFilterSetInstIdMaxReply {
}

message MostCmsFilterSetInstIdMinRequest {
  fixed64 ObjectId = 1;
  uint32 pbyInstIdMin = 2;
}

message MostCmsFilterSetInstIdMinReply {
}

message MostCmsFilterSetMsgTypeRequest {
  fixed64 ObjectId = 1;
  uint32 MsgType = 2;
}

message MostCmsFilterSetMsgTypeReply {
}

message MostCmsFilterSetMsgTypeMaxRequest {
  fixed64 ObjectId = 1;
  uint32 pbyMsgTypeMax = 2;
}

message MostCmsFilterSetMsgTypeMaxReply {
}

message MostCmsFilterSetMsgTypeMinRequest {
  fixed64 ObjectId = 1;
  uint32 pbyMsgTypeMin = 2;
}

message MostCmsFilterSetMsgTypeMinReply {
}

message MostCmsFilterSetOpTypeRequest {
  fixed64 ObjectId = 1;
  uint32 OpType = 2;
}

message MostCmsFilterSetOpTypeReply {
}

message MostCmsFilterSetOpTypeMaxRequest {
  fixed64 ObjectId = 1;
  uint32 pbyOpTypeMax = 2;
}

message MostCmsFilterSetOpTypeMaxReply {
}

message MostCmsFilterSetOpTypeMinRequest {
  fixed64 ObjectId = 1;
  uint32 pbyOpTypeMin = 2;
}

message MostCmsFilterSetOpTypeMinReply {
}

message MostCmsFilterSetPassRequest {
  fixed64 ObjectId = 1;
  bool pbPass = 2;
}

message MostCmsFilterSetPassReply {
}

message MostCmsFilterSetRxRequest {
  fixed64 ObjectId = 1;
  bool pbRx = 2;
}

message MostCmsFilterSetRxReply {
}

message MostCmsFilterSetSourceRequest {
  fixed64 ObjectId = 1;
  sint32 Source = 2;
}

message MostCmsFilterSetSourceReply {
}

message MostCmsFilterSetSourceMaxRequest {
  fixed64 ObjectId = 1;
  sint32 plSourceMax = 2;
}

message MostCmsFilterSetSourceMaxReply {
}

message MostCmsFilterSetSourceMinRequest {
  fixed64 ObjectId = 1;
  sint32 plSourceMin = 2;
}

message MostCmsFilterSetSourceMinReply {
}

message MostCmsFilterSetTargetRequest {
  fixed64 ObjectId = 1;
  sint32 Target = 2;
}

message MostCmsFilterSetTargetReply {
}

message MostCmsFilterSetTargetMaxRequest {
  fixed64 ObjectId = 1;
  sint32 plTargetMax = 2;
}

message MostCmsFilterSetTargetMaxReply {
}

message MostCmsFilterSetTargetMinRequest {
  fixed64 ObjectId = 1;
  sint32 plTargetMin = 2;
}

message MostCmsFilterSetTargetMinReply {
}

message MostCmsFilterSetTxRequest {
  fixed64 ObjectId = 1;
  bool pbTx = 2;
}

message MostCmsFilterSetTxReply {
}

message MostCmsMsgGetDataRequest {
  fixed64 ObjectId = 1;
}

message MostCmsMsgGetDataReply {
  bytes RetVal = 1;
}

message MostCmsMsgGetFBlockRequest {
  fixed64 ObjectId = 1;
}

message MostCmsMsgGetFBlockReply {
  string RetVal = 1;
}

message MostCmsMsgGetFBlockIdRequest {
  fixed64 ObjectId = 1;
}

message MostCmsMsgGetFBlockIdReply {
  uint32 RetVal = 1;
}

message MostCmsMsgGetFctRequest {
  fixed64 ObjectId = 1;
}

message MostCmsMsgGetFctReply {
  string RetVal = 1;
}

message MostCmsMsgGetFctIdRequest {
  fixed64 ObjectId = 1;
}

message MostCmsMsgGetFctIdReply {
  sint32 RetVal = 1;
}

message MostCmsMsgGetInstIdRequest {
  fixed64 ObjectId = 1;
}

message MostCmsMsgGetInstIdReply {
  uint32 RetVal = 1;
}

message MostCmsMsgGetMsgTypeRequest {
  fixed64 ObjectId = 1;
}

message MostCmsMsgGetMsgTypeReply {
  uint32 RetVal = 1;
}

message MostCmsMsgGetOpTypeRequest {
  fixed64 ObjectId = 1;
}

message MostCmsMsgGetOpTypeReply {
  uint32 RetVal = 1;
}

message MostCmsMsgGetParamDataRequest {
  fixed64 ObjectId = 1;
}

message MostCmsMsgGetParamDataReply {
  bytes RetVal = 1;
}

message MostCmsMsgGetSourceRequest {
  fixed64 ObjectId = 1;
}

message MostCmsMsgGetSourceReply {
  sint32 RetVal = 1;
}

message MostCmsMsgGetStatusFlagsRequest {
  fixed64 ObjectId = 1;
}

message MostCmsMsgGetStatusFlagsReply {
  sint32 RetVal = 1;
}

message MostCmsMsgGetTargetRequest {
  fixed64 ObjectId = 1;
}

message MostCmsMsgGetTargetReply {
  sint32 RetVal = 1;
}

message MostCmsMsgGetTxStatusRequest {
  fixed64 ObjectId = 1;
}

message MostCmsMsgGetTxStatusReply {
  sint32 RetVal = 1;
}

message MostCmsMsgSendRequest {
  fixed64 ObjectId = 1;
}

message MostCmsMsgSendReply {
}

message MostCmsMsgSetDataRequest {
  fixed64 ObjectId = 1;
  bytes paData = 2;
}

message MostCmsMsgSetDataReply {
}

message MostCmsMsgSetFBlockRequest {
  fixed64 ObjectId = 1;
  string pstrFBlock = 2;
}

message MostCmsMsgSetFBlockReply {
}

message MostCmsMsgSetFBlockIdRequest {
  fixed64 ObjectId = 1;
  uint32 pbyFBlockId = 2;
}

message MostCmsMsgSetFBlockIdReply {
}

message MostCmsMsgSetFctRequest {
  fixed64 ObjectId = 1;
  string pstrFct = 2;
}

message MostCmsMsgSetFctReply {
}

message MostCmsMsgSetFctIdRequest {
  fixed64 ObjectId = 1;
  sint32 piFct = 2;
}

message MostCmsMsgSetFctIdReply {
}

message MostCmsMsgSetInstIdRequest {
  fixed64 ObjectId = 1;
  uint32 pbyInstId = 2;
}

message MostCmsMsgSetInstIdReply {
}

message MostCmsMsgSetMsgTypeRequest {
  fixed64 ObjectId = 1;
  uint32 pbyMsgType = 2;
}

message MostCmsMsgSetMsgTypeReply {
}

message MostCmsMsgSetOpTypeRequest {
  fixed64 ObjectId = 1;
  uint32 pbyOpType = 2;
}

message MostCmsMsgSetOpTypeReply {
}

message MostCmsMsgSetParamDataRequest {
  fixed64 ObjectId = 1;
  bytes paData = 2;
}

message MostCmsMsgSetParamDataReply {
}

message MostCmsMsgSetTargetRequest {
  fixed64 ObjectId = 1;
  sint32 plTarget = 2;
}

message MostCmsMsgSetTargetReply {
}

message MostEventFilterGetEventMaskRequest {
  fixed64 ObjectId = 1;
}

message MostEventFilterGetEventMaskReply {
  MostEventMsgType RetVal = 1;
}

message MostEventFilterGetPassRequest {
  fixed64 ObjectId = 1;
}

message MostEventFilterGetPassReply {
  bool RetVal = 1;
}

message MostEventFilterSetEventMaskRequest {
  fixed64 ObjectId = 1;
  MostEventMsgType peMask = 2;
}

message MostEventFilterSetEventMaskReply {
}

message MostEventFilterSetPassRequest {
  fixed64 ObjectId = 1;
  bool pbPass = 2;
}

message MostEventFilterSetPassReply {
}

message MostEventMsgGetEventRequest {
  fixed64 ObjectId = 1;
}

message MostEventMsgGetEventReply {
  MostEventMsgType RetVal = 1;
}

message MsgQueueAddDltChannelRequest {
  fixed64 ObjectId = 1;
  string strModelNodeName = 2;
  string strChannelName = 3;
  string strAddress = 4;
  uint32 uPortNo = 5;
  bool bInitiallyEnabled = 6;
  string strEnableSignalName = 7;
  string strStatusSignalName = 8;
  repeated fixed64 aInitControlMessages = 9;
}

message MsgQueueAddDltChannelReply {
}

message MsgQueueGetMessageChannelsRequest {
  fixed64 ObjectId = 1;
}

message MsgQueueGetMessageChannelsReply {
  repeated MessageChannelInfo RetVal = 1;
}

message MsgQueueReceiveRequest {
  fixed64 ObjectId = 1;
}

message MsgQueueReceiveReply {
  MsgReceiveStatus RetVal = 1;
  fixed64 pMessage = 2;
}

message MsgQueueRemoveDltChannelRequest {
  fixed64 ObjectId = 1;
  string strChannelName = 2;
}

message MsgQueueRemoveDltChannelReply {
}

message MsgQueueSetFilterRequest {
  fixed64 ObjectId = 1;
  string strChannel = 2;
  string strSubType = 3;
  bool bDefaultPass = 4;
  repeated fixed64 filters = 5;
}

message MsgQueueSetFilterReply {
}

message MsgQueueEventMessageParams {
}

message MsgQueueEventMessageResult {
}

message PlotAreaPlotXYRequest {
  fixed64 ObjectId = 1;
  oneof aXValues {
    DoubleArray aXValues_doublearray = 32;
    Int64Array aXValues_int64array = 34;
    UInt64Array aXValues_uint64array = 36;
  }
  oneof aYValues {
    DoubleArray aYValues_doublearray = 62;
    Int64Array aYValues_int64array = 64;
    UInt64Array aYValues_uint64array = 66;
  }
  sint32 lColor = 2;
  PlotStyle ePlotStyle = 3;
  optional sint32 lLineWidth = 4;
  sint32 lYAxisNo = 5;
}

message PlotAreaPlotXYReply {
}

message PlotAreaPlotYRequest {
  fixed64 ObjectId = 1;
  double dStartX = 2;
  double dDeltaX = 3;
  oneof aYValues {
    DoubleArray aYValues_doublearray = 32;
    Int64Array aYValues_int64array = 34;
    UInt64Array aYValues_uint64array = 36;
  }
  sint32 lColor = 4;
  PlotStyle ePlotStyle = 5;
  optional sint32 lLineWidth = 6;
  sint32 lYAxisNo = 7;
}

message PlotAreaPlotYReply {
}

message PlotAreaSaveAttachmentRequest {
  fixed64 ObjectId = 1;
  string strName = 2;
}

message PlotAreaSaveAttachmentReply {
}

message PlotAreaSaveByteArrayRequest {
  fixed64 ObjectId = 1;
}

message PlotAreaSaveByteArrayReply {
  bytes RetVal = 1;
}

message PlotAreaSaveFileRequest {
  fixed64 ObjectId = 1;
  string strPath = 2;
}

message PlotAreaSaveFileReply {
}

message RawIp6FilterGetPassRequest {
  fixed64 ObjectId = 1;
}

message RawIp6FilterGetPassReply {
  bool RetVal = 1;
}

message RawIp6FilterGetRxRequest {
  fixed64 ObjectId = 1;
}

message RawIp6FilterGetRxReply {
  bool RetVal = 1;
}

message RawIp6FilterGetSourceIpMaxRequest {
  fixed64 ObjectId = 1;
}

message RawIp6FilterGetSourceIpMaxReply {
  string RetVal = 1;
}

message RawIp6FilterGetSourceIpMinRequest {
  fixed64 ObjectId = 1;
}

message RawIp6FilterGetSourceIpMinReply {
  string RetVal = 1;
}

message RawIp6FilterGetSourcePortMaxRequest {
  fixed64 ObjectId = 1;
}

message RawIp6FilterGetSourcePortMaxReply {
  uint32 RetVal = 1;
}

message RawIp6FilterGetSourcePortMinRequest {
  fixed64 ObjectId = 1;
}

message RawIp6FilterGetSourcePortMinReply {
  uint32 RetVal = 1;
}

message RawIp6FilterGetTargetIpMaxRequest {
  fixed64 ObjectId = 1;
}

message RawIp6FilterGetTargetIpMaxReply {
  string RetVal = 1;
}

message RawIp6FilterGetTargetIpMinRequest {
  fixed64 ObjectId = 1;
}

message RawIp6FilterGetTargetIpMinReply {
  string RetVal = 1;
}

message RawIp6FilterGetTargetPortMaxRequest {
  fixed64 ObjectId = 1;
}

message RawIp6FilterGetTargetPortMaxReply {
  uint32 RetVal = 1;
}

message RawIp6FilterGetTargetPortMinRequest {
  fixed64 ObjectId = 1;
}

message RawIp6FilterGetTargetPortMinReply {
  uint32 RetVal = 1;
}

message RawIp6FilterGetTransportProtocolRequest {
  fixed64 ObjectId = 1;
}

message RawIp6FilterGetTransportProtocolReply {
  string RetVal = 1;
}

message RawIp6FilterGetTxRequest {
  fixed64 ObjectId = 1;
}

message RawIp6FilterGetTxReply {
  bool RetVal = 1;
}

message RawIp6FilterSetPassRequest {
  fixed64 ObjectId = 1;
  bool pbPass = 2;
}

message RawIp6FilterSetPassReply {
}

message RawIp6FilterSetRxRequest {
  fixed64 ObjectId = 1;
  bool pbRx = 2;
}

message RawIp6FilterSetRxReply {
}

message RawIp6FilterSetSourceIpRequest {
  fixed64 ObjectId = 1;
  string SourceIp = 2;
}

message RawIp6FilterSetSourceIpReply {
}

message RawIp6FilterSetSourceIpMaxRequest {
  fixed64 ObjectId = 1;
  string pstrSourceIpMax = 2;
}

message RawIp6FilterSetSourceIpMaxReply {
}

message RawIp6FilterSetSourceIpMinRequest {
  fixed64 ObjectId = 1;
  string pstrSourceIpMin = 2;
}

message RawIp6FilterSetSourceIpMinReply {
}

message RawIp6FilterSetSourcePortRequest {
  fixed64 ObjectId = 1;
  uint32 SourcePort = 2;
}

message RawIp6FilterSetSourcePortReply {
}

message RawIp6FilterSetSourcePortMaxRequest {
  fixed64 ObjectId = 1;
  uint32 puSourcePortMax = 2;
}

message RawIp6FilterSetSourcePortMaxReply {
}

message RawIp6FilterSetSourcePortMinRequest {
  fixed64 ObjectId = 1;
  uint32 puSourcePortMin = 2;
}

message RawIp6FilterSetSourcePortMinReply {
}

message RawIp6FilterSetTargetIpRequest {
  fixed64 ObjectId = 1;
  string TargetIp = 2;
}

message RawIp6FilterSetTargetIpReply {
}

message RawIp6FilterSetTargetIpMaxRequest {
  fixed64 ObjectId = 1;
  string pstrTargetIpMax = 2;
}

message RawIp6FilterSetTargetIpMaxReply {
}

message RawIp6FilterSetTargetIpMinRequest {
  fixed64 ObjectId = 1;
  string pstrTargetIpMin = 2;
}

message RawIp6FilterSetTargetIpMinReply {
}

message RawIp6FilterSetTargetPortRequest {
  fixed64 ObjectId = 1;
  uint32 TargetPort = 2;
}

message RawIp6FilterSetTargetPortReply {
}

message RawIp6FilterSetTargetPortMaxRequest {
  fixed64 ObjectId = 1;
  uint32 puTargetPortMax = 2;
}

message RawIp6FilterSetTargetPortMaxReply {
}

message RawIp6FilterSetTargetPortMinRequest {
  fixed64 ObjectId = 1;
  uint32 puTargetPortMin = 2;
}

message RawIp6FilterSetTargetPortMinReply {
}

message RawIp6FilterSetTransportProtocolRequest {
  fixed64 ObjectId = 1;
  string pstrTransportProtocol = 2;
}

message RawIp6FilterSetTransportProtocolReply {
}

message RawIp6FilterSetTxRequest {
  fixed64 ObjectId = 1;
  bool pbTx = 2;
}

message RawIp6FilterSetTxReply {
}

message RawIpFilterGetPassRequest {
  fixed64 ObjectId = 1;
}

message RawIpFilterGetPassReply {
  bool RetVal = 1;
}

message RawIpFilterGetRxRequest {
  fixed64 ObjectId = 1;
}

message RawIpFilterGetRxReply {
  bool RetVal = 1;
}

message RawIpFilterGetSourceIpMaxRequest {
  fixed64 ObjectId = 1;
}

message RawIpFilterGetSourceIpMaxReply {
  string RetVal = 1;
}

message RawIpFilterGetSourceIpMinRequest {
  fixed64 ObjectId = 1;
}

message RawIpFilterGetSourceIpMinReply {
  string RetVal = 1;
}

message RawIpFilterGetSourcePortMaxRequest {
  fixed64 ObjectId = 1;
}

message RawIpFilterGetSourcePortMaxReply {
  uint32 RetVal = 1;
}

message RawIpFilterGetSourcePortMinRequest {
  fixed64 ObjectId = 1;
}

message RawIpFilterGetSourcePortMinReply {
  uint32 RetVal = 1;
}

message RawIpFilterGetTargetIpMaxRequest {
  fixed64 ObjectId = 1;
}

message RawIpFilterGetTargetIpMaxReply {
  string RetVal = 1;
}

message RawIpFilterGetTargetIpMinRequest {
  fixed64 ObjectId = 1;
}

message RawIpFilterGetTargetIpMinReply {
  string RetVal = 1;
}

message RawIpFilterGetTargetPortMaxRequest {
  fixed64 ObjectId = 1;
}

message RawIpFilterGetTargetPortMaxReply {
  uint32 RetVal = 1;
}

message RawIpFilterGetTargetPortMinRequest {
  fixed64 ObjectId = 1;
}

message RawIpFilterGetTargetPortMinReply {
  uint32 RetVal = 1;
}

message RawIpFilterGetTransportProtocolRequest {
  fixed64 ObjectId = 1;
}

message RawIpFilterGetTransportProtocolReply {
  string RetVal = 1;
}

message RawIpFilterGetTxRequest {
  fixed64 ObjectId = 1;
}

message RawIpFilterGetTxReply {
  bool RetVal = 1;
}

message RawIpFilterSetPassRequest {
  fixed64 ObjectId = 1;
  bool pbPass = 2;
}

message RawIpFilterSetPassReply {
}

message RawIpFilterSetRxRequest {
  fixed64 ObjectId = 1;
  bool pbRx = 2;
}

message RawIpFilterSetRxReply {
}

message RawIpFilterSetSourceIpRequest {
  fixed64 ObjectId = 1;
  string SourceIp = 2;
}

message RawIpFilterSetSourceIpReply {
}

message RawIpFilterSetSourceIpMaxRequest {
  fixed64 ObjectId = 1;
  string pstrSourceIpMax = 2;
}

message RawIpFilterSetSourceIpMaxReply {
}

message RawIpFilterSetSourceIpMinRequest {
  fixed64 ObjectId = 1;
  string pstrSourceIpMin = 2;
}

message RawIpFilterSetSourceIpMinReply {
}

message RawIpFilterSetSourcePortRequest {
  fixed64 ObjectId = 1;
  uint32 SourcePort = 2;
}

message RawIpFilterSetSourcePortReply {
}

message RawIpFilterSetSourcePortMaxRequest {
  fixed64 ObjectId = 1;
  uint32 puSourcePortMax = 2;
}

message RawIpFilterSetSourcePortMaxReply {
}

message RawIpFilterSetSourcePortMinRequest {
  fixed64 ObjectId = 1;
  uint32 puSourcePortMin = 2;
}

message RawIpFilterSetSourcePortMinReply {
}

message RawIpFilterSetTargetIpRequest {
  fixed64 ObjectId = 1;
  string TargetIp = 2;
}

message RawIpFilterSetTargetIpReply {
}

message RawIpFilterSetTargetIpMaxRequest {
  fixed64 ObjectId = 1;
  string pstrTargetIpMax = 2;
}

message RawIpFilterSetTargetIpMaxReply {
}

message RawIpFilterSetTargetIpMinRequest {
  fixed64 ObjectId = 1;
  string pstrTargetIpMin = 2;
}

message RawIpFilterSetTargetIpMinReply {
}

message RawIpFilterSetTargetPortRequest {
  fixed64 ObjectId = 1;
  uint32 TargetPort = 2;
}

message RawIpFilterSetTargetPortReply {
}

message RawIpFilterSetTargetPortMaxRequest {
  fixed64 ObjectId = 1;
  uint32 puTargetPortMax = 2;
}

message RawIpFilterSetTargetPortMaxReply {
}

message RawIpFilterSetTargetPortMinRequest {
  fixed64 ObjectId = 1;
  uint32 puTargetPortMin = 2;
}

message RawIpFilterSetTargetPortMinReply {
}

message RawIpFilterSetTransportProtocolRequest {
  fixed64 ObjectId = 1;
  string pstrTransportProtocol = 2;
}

message RawIpFilterSetTransportProtocolReply {
}

message RawIpFilterSetTxRequest {
  fixed64 ObjectId = 1;
  bool pbTx = 2;
}

message RawIpFilterSetTxReply {
}

message RawIpMsgGetPayloadRequest {
  fixed64 ObjectId = 1;
}

message RawIpMsgGetPayloadReply {
  bytes RetVal = 1;
}

message RawIpMsgGetSourceIpRequest {
  fixed64 ObjectId = 1;
}

message RawIpMsgGetSourceIpReply {
  string RetVal = 1;
}

message RawIpMsgGetSourcePortRequest {
  fixed64 ObjectId = 1;
}

message RawIpMsgGetSourcePortReply {
  uint32 RetVal = 1;
}

message RawIpMsgGetTargetIpRequest {
  fixed64 ObjectId = 1;
}

message RawIpMsgGetTargetIpReply {
  string RetVal = 1;
}

message RawIpMsgGetTargetPortRequest {
  fixed64 ObjectId = 1;
}

message RawIpMsgGetTargetPortReply {
  uint32 RetVal = 1;
}

message RawIpMsgGetTransportProtocolRequest {
  fixed64 ObjectId = 1;
}

message RawIpMsgGetTransportProtocolReply {
  string RetVal = 1;
}

message RawIpMsgSendRequest {
  fixed64 ObjectId = 1;
}

message RawIpMsgSendReply {
}

message RawIpMsgSetPayloadRequest {
  fixed64 ObjectId = 1;
  bytes paPayload = 2;
}

message RawIpMsgSetPayloadReply {
}

message RawIpMsgSetSourceIpRequest {
  fixed64 ObjectId = 1;
  string pstrSourceIp = 2;
}

message RawIpMsgSetSourceIpReply {
}

message RawIpMsgSetSourcePortRequest {
  fixed64 ObjectId = 1;
  uint32 puSourcePort = 2;
}

message RawIpMsgSetSourcePortReply {
}

message RawIpMsgSetTargetIpRequest {
  fixed64 ObjectId = 1;
  string pstrTargetIp = 2;
}

message RawIpMsgSetTargetIpReply {
}

message RawIpMsgSetTargetPortRequest {
  fixed64 ObjectId = 1;
  uint32 puTargetPort = 2;
}

message RawIpMsgSetTargetPortReply {
}

message RawIpMsgSetTransportProtocolRequest {
  fixed64 ObjectId = 1;
  string pstrTransportProtocol = 2;
}

message RawIpMsgSetTransportProtocolReply {
}

message SequencerServerGetComputerRequest {
  fixed64 ObjectId = 1;
}

message SequencerServerGetComputerReply {
  string RetVal = 1;
}

message SequencerServerGetConfigurationRequest {
  fixed64 ObjectId = 1;
}

message SequencerServerGetConfigurationReply {
  string RetVal = 1;
}

message SequencerServerGetModelRequest {
  fixed64 ObjectId = 1;
}

message SequencerServerGetModelReply {
  string RetVal = 1;
}

message SequencerServerGetProjectAccessRightsRequest {
  fixed64 ObjectId = 1;
}

message SequencerServerGetProjectAccessRightsReply {
  fixed64 RetVal = 1;
}

message SequencerServerGetStartedRequest {
  fixed64 ObjectId = 1;
}

message SequencerServerGetStartedReply {
  bool RetVal = 1;
}

message SequencerServerGetStatusRequest {
  fixed64 ObjectId = 1;
}

message SequencerServerGetStatusReply {
  SequencerServerStatus RetVal = 1;
}

message SequencerServerGetTestSequencerItemsRequest {
  fixed64 ObjectId = 1;
}

message SequencerServerGetTestSequencerItemsReply {
  fixed64 RetVal = 1;
}

message SequencerServerGetTestSystemRequest {
  fixed64 ObjectId = 1;
}

message SequencerServerGetTestSystemReply {
  string RetVal = 1;
}

message SequencerServerSetProjectAccessRightsRequest {
  fixed64 ObjectId = 1;
  fixed64 pProjectItem = 2;
}

message SequencerServerSetProjectAccessRightsReply {
}

message SequencerServerSetStatusRequest {
  fixed64 ObjectId = 1;
  SequencerServerStatus eStatus = 2;
}

message SequencerServerSetStatusReply {
}

message SequencerServerSetTestSystemRequest {
  fixed64 ObjectId = 1;
  string pstrTestSystem = 2;
}

message SequencerServerSetTestSystemReply {
}

message SequencerServersGetCountRequest {
  fixed64 ObjectId = 1;
}

message SequencerServersGetCountReply {
  sint32 RetVal = 1;
}

message SequencerServersGetItemRequest {
  fixed64 ObjectId = 1;
  oneof vIndex {
    sint32 vIndex_int32 = 39;
    string vIndex_string = 40;
  }
}

message SequencerServersGetItemReply {
  fixed64 RetVal = 1;
}

message SignalValueTextMappingGetMaxRequest {
  fixed64 ObjectId = 1;
}

message SignalValueTextMappingGetMaxReply {
  oneof RetVal {
    double RetVal_double = 31;
    sint64 RetVal_int64 = 33;
    uint64 RetVal_uint64 = 35;
  }
}

message SignalValueTextMappingGetMinRequest {
  fixed64 ObjectId = 1;
}

message SignalValueTextMappingGetMinReply {
  oneof RetVal {
    double RetVal_double = 31;
    sint64 RetVal_int64 = 33;
    uint64 RetVal_uint64 = 35;
  }
}

message SignalValueTextMappingGetTextRequest {
  fixed64 ObjectId = 1;
}

message SignalValueTextMappingGetTextReply {
  string RetVal = 1;
}

message SignalValueTextMappingSetMaxRequest {
  fixed64 ObjectId = 1;
  oneof pvMax {
    double pvMax_double = 31;
    sint64 pvMax_int64 = 33;
    uint64 pvMax_uint64 = 35;
  }
}

message SignalValueTextMappingSetMaxReply {
}

message SignalValueTextMappingSetMinRequest {
  fixed64 ObjectId = 1;
  oneof pvMin {
    double pvMin_double = 31;
    sint64 pvMin_int64 = 33;
    uint64 pvMin_uint64 = 35;
  }
}

message SignalValueTextMappingSetMinReply {
}

message SignalValueTextMappingSetTextRequest {
  fixed64 ObjectId = 1;
  string pstrText = 2;
}

message SignalValueTextMappingSetTextReply {
}

message SomeIpFilterGetClientIdMaxRequest {
  fixed64 ObjectId = 1;
}

message SomeIpFilterGetClientIdMaxReply {
  uint32 RetVal = 1;
}

message SomeIpFilterGetClientIdMinRequest {
  fixed64 ObjectId = 1;
}

message SomeIpFilterGetClientIdMinReply {
  uint32 RetVal = 1;
}

message SomeIpFilterGetInterfaceVersionMaxRequest {
  fixed64 ObjectId = 1;
}

message SomeIpFilterGetInterfaceVersionMaxReply {
  uint32 RetVal = 1;
}

message SomeIpFilterGetInterfaceVersionMinRequest {
  fixed64 ObjectId = 1;
}

message SomeIpFilterGetInterfaceVersionMinReply {
  uint32 RetVal = 1;
}

message SomeIpFilterGetMessageTypeMaxRequest {
  fixed64 ObjectId = 1;
}

message SomeIpFilterGetMessageTypeMaxReply {
  uint32 RetVal = 1;
}

message SomeIpFilterGetMessageTypeMinRequest {
  fixed64 ObjectId = 1;
}

message SomeIpFilterGetMessageTypeMinReply {
  uint32 RetVal = 1;
}

message SomeIpFilterGetMethodIdMaxRequest {
  fixed64 ObjectId = 1;
}

message SomeIpFilterGetMethodIdMaxReply {
  uint32 RetVal = 1;
}

message SomeIpFilterGetMethodIdMinRequest {
  fixed64 ObjectId = 1;
}

message SomeIpFilterGetMethodIdMinReply {
  uint32 RetVal = 1;
}

message SomeIpFilterGetPassRequest {
  fixed64 ObjectId = 1;
}

message SomeIpFilterGetPassReply {
  bool RetVal = 1;
}

message SomeIpFilterGetReturnCodeMaxRequest {
  fixed64 ObjectId = 1;
}

message SomeIpFilterGetReturnCodeMaxReply {
  uint32 RetVal = 1;
}

message SomeIpFilterGetReturnCodeMinRequest {
  fixed64 ObjectId = 1;
}

message SomeIpFilterGetReturnCodeMinReply {
  uint32 RetVal = 1;
}

message SomeIpFilterGetRxRequest {
  fixed64 ObjectId = 1;
}

message SomeIpFilterGetRxReply {
  bool RetVal = 1;
}

message SomeIpFilterGetSdEventGroupIdMaxRequest {
  fixed64 ObjectId = 1;
}

message SomeIpFilterGetSdEventGroupIdMaxReply {
  uint32 RetVal = 1;
}

message SomeIpFilterGetSdEventGroupIdMinRequest {
  fixed64 ObjectId = 1;
}

message SomeIpFilterGetSdEventGroupIdMinReply {
  uint32 RetVal = 1;
}

message SomeIpFilterGetSdInstanceIdMaxRequest {
  fixed64 ObjectId = 1;
}

message SomeIpFilterGetSdInstanceIdMaxReply {
  uint32 RetVal = 1;
}

message SomeIpFilterGetSdInstanceIdMinRequest {
  fixed64 ObjectId = 1;
}

message SomeIpFilterGetSdInstanceIdMinReply {
  uint32 RetVal = 1;
}

message SomeIpFilterGetSdMajorVersionMaxRequest {
  fixed64 ObjectId = 1;
}

message SomeIpFilterGetSdMajorVersionMaxReply {
  uint32 RetVal = 1;
}

message SomeIpFilterGetSdMajorVersionMinRequest {
  fixed64 ObjectId = 1;
}

message SomeIpFilterGetSdMajorVersionMinReply {
  uint32 RetVal = 1;
}

message SomeIpFilterGetSdServiceIdMaxRequest {
  fixed64 ObjectId = 1;
}

message SomeIpFilterGetSdServiceIdMaxReply {
  uint32 RetVal = 1;
}

message SomeIpFilterGetSdServiceIdMinRequest {
  fixed64 ObjectId = 1;
}

message SomeIpFilterGetSdServiceIdMinReply {
  uint32 RetVal = 1;
}

message SomeIpFilterGetSdTypesRequest {
  fixed64 ObjectId = 1;
}

message SomeIpFilterGetSdTypesReply {
  SomeIpSdType RetVal = 1;
}

message SomeIpFilterGetServiceIdMaxRequest {
  fixed64 ObjectId = 1;
}

message SomeIpFilterGetServiceIdMaxReply {
  uint32 RetVal = 1;
}

message SomeIpFilterGetServiceIdMinRequest {
  fixed64 ObjectId = 1;
}

message SomeIpFilterGetServiceIdMinReply {
  uint32 RetVal = 1;
}

message SomeIpFilterGetTxRequest {
  fixed64 ObjectId = 1;
}

message SomeIpFilterGetTxReply {
  bool RetVal = 1;
}

message SomeIpFilterSetClientIdRequest {
  fixed64 ObjectId = 1;
  uint32 ClientId = 2;
}

message SomeIpFilterSetClientIdReply {
}

message SomeIpFilterSetClientIdMaxRequest {
  fixed64 ObjectId = 1;
  uint32 puClientIdMax = 2;
}

message SomeIpFilterSetClientIdMaxReply {
}

message SomeIpFilterSetClientIdMinRequest {
  fixed64 ObjectId = 1;
  uint32 puClientIdMin = 2;
}

message SomeIpFilterSetClientIdMinReply {
}

message SomeIpFilterSetInterfaceVersionRequest {
  fixed64 ObjectId = 1;
  uint32 InterfaceVersion = 2;
}

message SomeIpFilterSetInterfaceVersionReply {
}

message SomeIpFilterSetInterfaceVersionMaxRequest {
  fixed64 ObjectId = 1;
  uint32 pbyInterfaceVersionMax = 2;
}

message SomeIpFilterSetInterfaceVersionMaxReply {
}

message SomeIpFilterSetInterfaceVersionMinRequest {
  fixed64 ObjectId = 1;
  uint32 pbyInterfaceVersionMin = 2;
}

message SomeIpFilterSetInterfaceVersionMinReply {
}

message SomeIpFilterSetMessageTypeRequest {
  fixed64 ObjectId = 1;
  uint32 MessageType = 2;
}

message SomeIpFilterSetMessageTypeReply {
}

message SomeIpFilterSetMessageTypeMaxRequest {
  fixed64 ObjectId = 1;
  uint32 pbyMessageTypeMax = 2;
}

message SomeIpFilterSetMessageTypeMaxReply {
}

message SomeIpFilterSetMessageTypeMinRequest {
  fixed64 ObjectId = 1;
  uint32 pbyMessageTypeMin = 2;
}

message SomeIpFilterSetMessageTypeMinReply {
}

message SomeIpFilterSetMethodIdRequest {
  fixed64 ObjectId = 1;
  uint32 MethodId = 2;
}

message SomeIpFilterSetMethodIdReply {
}

message SomeIpFilterSetMethodIdMaxRequest {
  fixed64 ObjectId = 1;
  uint32 puMethodIdMax = 2;
}

message SomeIpFilterSetMethodIdMaxReply {
}

message SomeIpFilterSetMethodIdMinRequest {
  fixed64 ObjectId = 1;
  uint32 puMethodIdMin = 2;
}

message SomeIpFilterSetMethodIdMinReply {
}

message SomeIpFilterSetPassRequest {
  fixed64 ObjectId = 1;
  bool pbPass = 2;
}

message SomeIpFilterSetPassReply {
}

message SomeIpFilterSetReturnCodeRequest {
  fixed64 ObjectId = 1;
  uint32 ReturnCode = 2;
}

message SomeIpFilterSetReturnCodeReply {
}

message SomeIpFilterSetReturnCodeMaxRequest {
  fixed64 ObjectId = 1;
  uint32 pbyReturnCodeMax = 2;
}

message SomeIpFilterSetReturnCodeMaxReply {
}

message SomeIpFilterSetReturnCodeMinRequest {
  fixed64 ObjectId = 1;
  uint32 pbyReturnCodeMin = 2;
}

message SomeIpFilterSetReturnCodeMinReply {
}

message SomeIpFilterSetRxRequest {
  fixed64 ObjectId = 1;
  bool pbRx = 2;
}

message SomeIpFilterSetRxReply {
}

message SomeIpFilterSetSdEventGroupIdRequest {
  fixed64 ObjectId = 1;
  uint32 SdEventGroupId = 2;
}

message SomeIpFilterSetSdEventGroupIdReply {
}

message SomeIpFilterSetSdEventGroupIdMaxRequest {
  fixed64 ObjectId = 1;
  uint32 puSdEventGroupIdMax = 2;
}

message SomeIpFilterSetSdEventGroupIdMaxReply {
}

message SomeIpFilterSetSdEventGroupIdMinRequest {
  fixed64 ObjectId = 1;
  uint32 puSdEventGroupIdMin = 2;
}

message SomeIpFilterSetSdEventGroupIdMinReply {
}

message SomeIpFilterSetSdInstanceIdRequest {
  fixed64 ObjectId = 1;
  uint32 SdInstanceId = 2;
}

message SomeIpFilterSetSdInstanceIdReply {
}

message SomeIpFilterSetSdInstanceIdMaxRequest {
  fixed64 ObjectId = 1;
  uint32 puSdInstanceIdMax = 2;
}

message SomeIpFilterSetSdInstanceIdMaxReply {
}

message SomeIpFilterSetSdInstanceIdMinRequest {
  fixed64 ObjectId = 1;
  uint32 puSdInstanceIdMin = 2;
}

message SomeIpFilterSetSdInstanceIdMinReply {
}

message SomeIpFilterSetSdMajorVersionRequest {
  fixed64 ObjectId = 1;
  uint32 SdMajorVersion = 2;
}

message SomeIpFilterSetSdMajorVersionReply {
}

message SomeIpFilterSetSdMajorVersionMaxRequest {
  fixed64 ObjectId = 1;
  uint32 pbySdMajorVersionMax = 2;
}

message SomeIpFilterSetSdMajorVersionMaxReply {
}

message SomeIpFilterSetSdMajorVersionMinRequest {
  fixed64 ObjectId = 1;
  uint32 pbySdMajorVersionMin = 2;
}

message SomeIpFilterSetSdMajorVersionMinReply {
}

message SomeIpFilterSetSdServiceIdRequest {
  fixed64 ObjectId = 1;
  uint32 SdServiceId = 2;
}

message SomeIpFilterSetSdServiceIdReply {
}

message SomeIpFilterSetSdServiceIdMaxRequest {
  fixed64 ObjectId = 1;
  uint32 puSdServiceIdMax = 2;
}

message SomeIpFilterSetSdServiceIdMaxReply {
}

message SomeIpFilterSetSdServiceIdMinRequest {
  fixed64 ObjectId = 1;
  uint32 puSdServiceIdMin = 2;
}

message SomeIpFilterSetSdServiceIdMinReply {
}

message SomeIpFilterSetSdTypesRequest {
  fixed64 ObjectId = 1;
  SomeIpSdType peSdTypes = 2;
}

message SomeIpFilterSetSdTypesReply {
}

message SomeIpFilterSetServiceIdRequest {
  fixed64 ObjectId = 1;
  uint32 ServiceId = 2;
}

message SomeIpFilterSetServiceIdReply {
}

message SomeIpFilterSetServiceIdMaxRequest {
  fixed64 ObjectId = 1;
  uint32 puServiceIdMax = 2;
}

message SomeIpFilterSetServiceIdMaxReply {
}

message SomeIpFilterSetServiceIdMinRequest {
  fixed64 ObjectId = 1;
  uint32 puServiceIdMin = 2;
}

message SomeIpFilterSetServiceIdMinReply {
}

message SomeIpFilterSetTxRequest {
  fixed64 ObjectId = 1;
  bool pbTx = 2;
}

message SomeIpFilterSetTxReply {
}

message SomeIpMsgGetClientIdRequest {
  fixed64 ObjectId = 1;
}

message SomeIpMsgGetClientIdReply {
  uint32 RetVal = 1;
}

message SomeIpMsgGetInterfaceVersionRequest {
  fixed64 ObjectId = 1;
}

message SomeIpMsgGetInterfaceVersionReply {
  uint32 RetVal = 1;
}

message SomeIpMsgGetMessageTypeRequest {
  fixed64 ObjectId = 1;
}

message SomeIpMsgGetMessageTypeReply {
  uint32 RetVal = 1;
}

message SomeIpMsgGetMethodIdRequest {
  fixed64 ObjectId = 1;
}

message SomeIpMsgGetMethodIdReply {
  uint32 RetVal = 1;
}

message SomeIpMsgGetProtocolVersionRequest {
  fixed64 ObjectId = 1;
}

message SomeIpMsgGetProtocolVersionReply {
  uint32 RetVal = 1;
}

message SomeIpMsgGetReturnCodeRequest {
  fixed64 ObjectId = 1;
}

message SomeIpMsgGetReturnCodeReply {
  uint32 RetVal = 1;
}

message SomeIpMsgGetServiceIdRequest {
  fixed64 ObjectId = 1;
}

message SomeIpMsgGetServiceIdReply {
  uint32 RetVal = 1;
}

message SomeIpMsgGetSessionIdRequest {
  fixed64 ObjectId = 1;
}

message SomeIpMsgGetSessionIdReply {
  uint32 RetVal = 1;
}

message SomeIpMsgSetClientIdRequest {
  fixed64 ObjectId = 1;
  uint32 puClientId = 2;
}

message SomeIpMsgSetClientIdReply {
}

message SomeIpMsgSetInterfaceVersionRequest {
  fixed64 ObjectId = 1;
  uint32 pbyInterfaceVersion = 2;
}

message SomeIpMsgSetInterfaceVersionReply {
}

message SomeIpMsgSetMessageTypeRequest {
  fixed64 ObjectId = 1;
  uint32 pbyMessageType = 2;
}

message SomeIpMsgSetMessageTypeReply {
}

message SomeIpMsgSetMethodIdRequest {
  fixed64 ObjectId = 1;
  uint32 puMethodId = 2;
}

message SomeIpMsgSetMethodIdReply {
}

message SomeIpMsgSetProtocolVersionRequest {
  fixed64 ObjectId = 1;
  uint32 pbyProtocolVersion = 2;
}

message SomeIpMsgSetProtocolVersionReply {
}

message SomeIpMsgSetReturnCodeRequest {
  fixed64 ObjectId = 1;
  uint32 pbyReturnCode = 2;
}

message SomeIpMsgSetReturnCodeReply {
}

message SomeIpMsgSetServiceIdRequest {
  fixed64 ObjectId = 1;
  uint32 puServiceId = 2;
}

message SomeIpMsgSetServiceIdReply {
}

message SomeIpMsgSetSessionIdRequest {
  fixed64 ObjectId = 1;
  uint32 puSessionId = 2;
}

message SomeIpMsgSetSessionIdReply {
}

message SystemCaptureImageRequest {
  string strSourceName = 1;
  string strDestinationPath = 2;
}

message SystemCaptureImageReply {
  bool RetVal = 1;
}

message SystemChangeProtocolRequest {
  string strProtocolName = 1;
  optional bool bCreateLink = 2;
  optional bool bAddLineBreak = 3;
  string strDisplayText = 4;
}

message SystemChangeProtocolReply {
  bool RetVal = 1;
}

message SystemCreateRemoveSignalsRequest {
  repeated fixed64 aCreateRemoveSignals = 1;
}

message SystemCreateRemoveSignalsReply {
  bool RetVal = 1;
}

message SystemGetCompatibilityModeRequest {
}

message SystemGetCompatibilityModeReply {
  bool RetVal = 1;
}

message SystemGetConfigRequest {
}

message SystemGetConfigReply {
  string RetVal = 1;
}

message SystemGetConfigsRequest {
}

message SystemGetConfigsReply {
  repeated string RetVal = 1;
}

message SystemGetDatabaseRequest {
}

message SystemGetDatabaseReply {
  string RetVal = 1;
  string pstrConnection = 2;
}

message SystemGetGVarRequest {
  optional string strKey = 1;
}

message SystemGetGVarReply {
  oneof RetVal {
    double RetVal_double = 31;
    sint64 RetVal_int64 = 33;
    uint64 RetVal_uint64 = 35;
    string RetVal_string = 40;
    DoubleArray RetVal_doublearray = 32;
    Int64Array RetVal_int64array = 34;
    UInt64Array RetVal_uint64array = 36;
    StringArray RetVal_stringarray = 41;
    bool RetVal_bool = 38;
    double RetVal_date = 42;
    fixed64 RetVal_obj = 30;
  }
}

message SystemGetLoadedModelOutputRequest {
}

message SystemGetLoadedModelOutputReply {
  string RetVal = 1;
  string pstrModelName = 2;
  string pstrCfgPath = 3;
  repeated string pstraModelPaths = 4;
}

message SystemGetModelRequest {
}

message SystemGetModelReply {
  string RetVal = 1;
  repeated string pstraNodeNames = 2;
}

message SystemGetModelsRequest {
  string strConfig = 1;
}

message SystemGetModelsReply {
  repeated string RetVal = 1;
}

message SystemGetProtocolNameRequest {
}

message SystemGetProtocolNameReply {
  string RetVal = 1;
}

message SystemGetReplacementVarRequest {
  string strName = 1;
}

message SystemGetReplacementVarReply {
  oneof RetVal {
    fixed64 RetVal_obj = 30;
    string RetVal_string = 40;
  }
}

message SystemGetResultRequest {
}

message SystemGetResultReply {
  sint32 RetVal = 1;
  sint32 piAdditionalResultValue = 2;
  bool pbAddResultToProtocol = 3;
}

message SystemGetSignalRequest {
  string strSignalName = 1;
  bool bInterpreted = 2;
}

message SystemGetSignalReply {
  oneof RetVal {
    double RetVal_double = 31;
    sint64 RetVal_int64 = 33;
    uint64 RetVal_uint64 = 35;
    DoubleArray RetVal_doublearray = 32;
    Int64Array RetVal_int64array = 34;
    UInt64Array RetVal_uint64array = 36;
    string RetVal_string = 40;
  }
}

message SystemGetSignalInfoRequest {
  string strSignalName = 1;
}

message SystemGetSignalInfoReply {
  fixed64 RetVal = 1;
}

message SystemGetTestSystemNameRequest {
}

message SystemGetTestSystemNameReply {
  string RetVal = 1;
}

message SystemGetUserRequest {
}

message SystemGetUserReply {
  string RetVal = 1;
  string pstrFullName = 2;
  string pstrGroup = 3;
  string pstrPhoneNo = 4;
  string pstrEMail = 5;
}

message SystemGetValidSignalListRequest {
  string strSignalList = 1;
  optional sint32 lAcceptanceMask = 2;
}

message SystemGetValidSignalListReply {
  string RetVal = 1;
}

message SystemGetVersionRequest {
}

message SystemGetVersionReply {
  string RetVal = 1;
  sint32 plMajor = 2;
  sint32 plMinor = 3;
}

message SystemGetXcpConfigRequest {
}

message SystemGetXcpConfigReply {
  repeated string RetVal = 1;
}

message SystemLoadConfigRequest {
  string strConfigName = 1;
  string strModelName = 2;
}

message SystemLoadConfigReply {
  bool RetVal = 1;
}

message SystemLoadModelRequest {
  string strModelName = 1;
}

message SystemLoadModelReply {
  bool RetVal = 1;
}

message SystemLoadXcpParameterFileRequest {
  uint32 uXcpInstanceNo = 1;
  string strPath = 2;
  uint32 uId = 3;
}

message SystemLoadXcpParameterFileReply {
}

message SystemModifyModelNodeConfigRequest {
  string strModelNodeName = 1;
  string strConfig = 2;
  optional sint32 lTimeoutInSeconds = 3;
}

message SystemModifyModelNodeConfigReply {
  bool RetVal = 1;
}

message SystemModifyMsgConfigRequest {
  string strChannel = 1;
  string strConfig = 2;
}

message SystemModifyMsgConfigReply {
  bool RetVal = 1;
}

message SystemModifyVideoAudioConfigRequest {
  string strSourceName = 1;
  optional string strConfig = 2;
  optional string strShareWithModelNode = 3;
}

message SystemModifyVideoAudioConfigReply {
}

message SystemModifyXcpConfigRequest {
  string strConfig = 1;
}

message SystemModifyXcpConfigReply {
  bool RetVal = 1;
}

message SystemReadValuesRequest {
  DataType dt = 1;
  uint64 uAddress = 2;
  sint32 lProcessorIndex = 3;
  optional sint32 lAmountValues = 4;
}

message SystemReadValuesReply {
  oneof RetVal {
    DoubleArray RetVal_doublearray = 32;
    Int64Array RetVal_int64array = 34;
    UInt64Array RetVal_uint64array = 36;
  }
}

message SystemRemarkRequest {
  string strText = 1;
  optional bool bAddLineBreak = 2;
  bool bWriteThrough = 3;
  string strProtocolName = 4;
}

message SystemRemarkReply {
  bool RetVal = 1;
}

message SystemResetRequest {
  string strSignalList = 1;
}

message SystemResetReply {
  bool RetVal = 1;
}

message SystemRestoreWritableSignalsRequest {
  string strIdentifier = 1;
}

message SystemRestoreWritableSignalsReply {
  bool RetVal = 1;
}

message SystemSetCompatibilityModeRequest {
  bool pVal = 1;
}

message SystemSetCompatibilityModeReply {
}

message SystemSetGVarRequest {
  string strKey = 1;
  oneof value {
    double value_double = 31;
    sint64 value_int64 = 33;
    uint64 value_uint64 = 35;
    string value_string = 40;
    DoubleArray value_doublearray = 32;
    Int64Array value_int64array = 34;
    UInt64Array value_uint64array = 36;
    StringArray value_stringarray = 41;
    bool value_bool = 38;
    double value_date = 42;
    fixed64 value_obj = 30;
  }
}

message SystemSetGVarReply {
}

message SystemSetReplacementVarRequest {
  string strName = 1;
  oneof value {
    fixed64 value_obj = 30;
    string value_string = 40;
  }
}

message SystemSetReplacementVarReply {
  bool RetVal = 1;
}

message SystemSetResultRequest {
  TestResultValue eResult = 1;
  sint32 iAdditionalResultValue = 2;
  optional bool bAddResultToProtocol = 3;
}

message SystemSetResultReply {
}

message SystemSetSignalRequest {
  string strSignalName = 1;
  oneof value {
    double value_double = 31;
    sint64 value_int64 = 33;
    uint64 value_uint64 = 35;
    DoubleArray value_doublearray = 32;
    Int64Array value_int64array = 34;
    UInt64Array value_uint64array = 36;
    string value_string = 40;
  }
}

message SystemSetSignalReply {
  bool RetVal = 1;
}

message SystemShutdownRequest {
  optional bool bWholeApplication = 1;
}

message SystemShutdownReply {
}

message SystemStoreWritableSignalsRequest {
  string strIdentifier = 1;
}

message SystemStoreWritableSignalsReply {
  bool RetVal = 1;
}

message SystemWriteValuesRequest {
  DataType dt = 1;
  uint64 uAddress = 2;
  sint32 lProcessorIndex = 3;
  oneof values {
    DoubleArray values_doublearray = 32;
    Int64Array values_int64array = 34;
    UInt64Array values_uint64array = 36;
  }
}

message SystemWriteValuesReply {
  bool RetVal = 1;
}

message TestDocumentDeleteRequest {
  fixed64 ObjectId = 1;
}

message TestDocumentDeleteReply {
}

message TestDocumentExportRequest {
  fixed64 ObjectId = 1;
  string strFilePath = 2;
  bool bOverwrite = 3;
}

message TestDocumentExportReply {
}

message TestDocumentGetCompressedSizeRequest {
  fixed64 ObjectId = 1;
}

message TestDocumentGetCompressedSizeReply {
  sint64 RetVal = 1;
}

message TestDocumentGetDataRequest {
  fixed64 ObjectId = 1;
}

message TestDocumentGetDataReply {
  bytes RetVal = 1;
}

message TestDocumentGetDateRequest {
  fixed64 ObjectId = 1;
}

message TestDocumentGetDateReply {
  double RetVal = 1;
}

message TestDocumentGetExtensionRequest {
  fixed64 ObjectId = 1;
}

message TestDocumentGetExtensionReply {
  string RetVal = 1;
}

message TestDocumentGetNameRequest {
  fixed64 ObjectId = 1;
}

message TestDocumentGetNameReply {
  string RetVal = 1;
}

message TestDocumentGetPathRequest {
  fixed64 ObjectId = 1;
  bool bUseDatabaseId = 2;
}

message TestDocumentGetPathReply {
  string RetVal = 1;
}

message TestDocumentGetSizeRequest {
  fixed64 ObjectId = 1;
}

message TestDocumentGetSizeReply {
  sint64 RetVal = 1;
}

message TestDocumentImportRequest {
  fixed64 ObjectId = 1;
  string strFilePath = 2;
}

message TestDocumentImportReply {
}

message TestDocumentSetDataRequest {
  fixed64 ObjectId = 1;
  bytes pVal = 2;
}

message TestDocumentSetDataReply {
}

message TestDocumentSetNameRequest {
  fixed64 ObjectId = 1;
  string pVal = 2;
}

message TestDocumentSetNameReply {
}

message TestDocumentsAddRequest {
  fixed64 ObjectId = 1;
  string strPath = 2;
  string strName = 3;
  string strExtension = 4;
}

message TestDocumentsAddReply {
  fixed64 RetVal = 1;
}

message TestDocumentsGetCountRequest {
  fixed64 ObjectId = 1;
}

message TestDocumentsGetCountReply {
  sint32 RetVal = 1;
}

message TestDocumentsGetItemRequest {
  fixed64 ObjectId = 1;
  oneof vIndex {
    sint32 vIndex_int32 = 39;
    string vIndex_string = 40;
  }
}

message TestDocumentsGetItemReply {
  fixed64 RetVal = 1;
}

message TestItemBranchRequest {
  fixed64 ObjectId = 1;
}

message TestItemBranchReply {
  fixed64 RetVal = 1;
}

message TestItemBreakLinkRequest {
  fixed64 ObjectId = 1;
}

message TestItemBreakLinkReply {
}

message TestItemCopyRequest {
  fixed64 ObjectId = 1;
  fixed64 pParent = 2;
  fixed64 pPrev = 3;
  string strName = 4;
  bool bReferenceResults = 5;
  optional bool bReferenceOldVersions = 6;
}

message TestItemCopyReply {
  fixed64 RetVal = 1;
}

message TestItemCreateChildRequest {
  fixed64 ObjectId = 1;
  string strName = 2;
  TestItemType eType = 3;
  fixed64 pPrev = 4;
  string strTypeName = 5;
}

message TestItemCreateChildReply {
  fixed64 RetVal = 1;
}

message TestItemCreateLinkRequest {
  fixed64 ObjectId = 1;
  string strName = 2;
  fixed64 pOrigin = 3;
  fixed64 pPrev = 4;
  optional bool bReferenceOldVersions = 5;
}

message TestItemCreateLinkReply {
  fixed64 RetVal = 1;
}

message TestItemDeleteRequest {
  fixed64 ObjectId = 1;
  bool bVersionOnly = 2;
}

message TestItemDeleteReply {
}

message TestItemErasePersonalDataRequest {
  fixed64 ObjectId = 1;
}

message TestItemErasePersonalDataReply {
}

message TestItemExecuteRequest {
  fixed64 ObjectId = 1;
  float fTimeout = 2;
  string strExecutorName = 3;
  bool bClearCache = 4;
  oneof vParameter {
    double vParameter_double = 31;
    sint64 vParameter_int64 = 33;
    uint64 vParameter_uint64 = 35;
    string vParameter_string = 40;
    DoubleArray vParameter_doublearray = 32;
    Int64Array vParameter_int64array = 34;
    UInt64Array vParameter_uint64array = 36;
    StringArray vParameter_stringarray = 41;
    bool vParameter_bool = 38;
    double vParameter_date = 42;
    fixed64 vParameter_obj = 30;
  }
}

message TestItemExecuteReply {
  TestResultValue RetVal = 1;
  sint32 piAdditionalResultValue = 2;
}

message TestItemExportRequest {
  fixed64 ObjectId = 1;
  string strFilePath = 2;
  ImportExportFlags eFlags = 3;
}

message TestItemExportReply {
}

message TestItemExportDataRequest {
  fixed64 ObjectId = 1;
  string strFilePath = 2;
}

message TestItemExportDataReply {
}

message TestItemGetAccessRightsRequest {
  fixed64 ObjectId = 1;
  string strUser = 2;
}

message TestItemGetAccessRightsReply {
  AccessRight RetVal = 1;
}

message TestItemGetAccessRightsUserGroupRequest {
  fixed64 ObjectId = 1;
  string strUserGroup = 2;
}

message TestItemGetAccessRightsUserGroupReply {
  AccessRight RetVal = 1;
}

message TestItemGetAuthorRequest {
  fixed64 ObjectId = 1;
}

message TestItemGetAuthorReply {
  string RetVal = 1;
}

message TestItemGetChildrenRequest {
  fixed64 ObjectId = 1;
}

message TestItemGetChildrenReply {
  fixed64 RetVal = 1;
}

message TestItemGetDatabaseRequest {
  fixed64 ObjectId = 1;
}

message TestItemGetDatabaseReply {
  string RetVal = 1;
  string pstrConnection = 2;
}

message TestItemGetDateRequest {
  fixed64 ObjectId = 1;
}

message TestItemGetDateReply {
  double RetVal = 1;
}

message TestItemGetDescriptionRequest {
  fixed64 ObjectId = 1;
}

message TestItemGetDescriptionReply {
  string RetVal = 1;
}

message TestItemGetEstimatedExecutionTimeRequest {
  fixed64 ObjectId = 1;
}

message TestItemGetEstimatedExecutionTimeReply {
  double RetVal = 1;
}

message TestItemGetKeepReleaseRequest {
  fixed64 ObjectId = 1;
}

message TestItemGetKeepReleaseReply {
  TestItemKeepRelease RetVal = 1;
}

message TestItemGetLinksRequest {
  fixed64 ObjectId = 1;
}

message TestItemGetLinksReply {
  fixed64 RetVal = 1;
}

message TestItemGetNameRequest {
  fixed64 ObjectId = 1;
}

message TestItemGetNameReply {
  string RetVal = 1;
}

message TestItemGetNamePrefixRequest {
  fixed64 ObjectId = 1;
}

message TestItemGetNamePrefixReply {
  string RetVal = 1;
}

message TestItemGetNextVersionsRequest {
  fixed64 ObjectId = 1;
  bool bBranch = 2;
}

message TestItemGetNextVersionsReply {
  fixed64 RetVal = 1;
}

message TestItemGetParentRequest {
  fixed64 ObjectId = 1;
}

message TestItemGetParentReply {
  fixed64 RetVal = 1;
}

message TestItemGetPathRequest {
  fixed64 ObjectId = 1;
  bool bUseDatabaseId = 2;
}

message TestItemGetPathReply {
  string RetVal = 1;
}

message TestItemGetPrevVersionRequest {
  fixed64 ObjectId = 1;
}

message TestItemGetPrevVersionReply {
  fixed64 RetVal = 1;
}

message TestItemGetProgramRequest {
  fixed64 ObjectId = 1;
}

message TestItemGetProgramReply {
  string RetVal = 1;
  string pstrEncryption = 2;
}

message TestItemGetReferencedModulesRequest {
  fixed64 ObjectId = 1;
  bool bResolvePaths = 2;
}

message TestItemGetReferencedModulesReply {
  repeated string RetVal = 1;
}

message TestItemGetResultsRequest {
  fixed64 ObjectId = 1;
  bool bUnused = 2;
  bool bLinkedResults = 3;
  optional bool bIncludeOldVersions = 4;
  sint32 lMaxCount = 5;
  double dMin = 6;
  double dMax = 7;
  bool bIncludeResultChildren = 8;
  optional TestResultValue eState = 9;
  optional TestResultValidated eValidated = 10;
  double dMinValidated = 11;
  double dMaxValidated = 12;
  optional TestResultFlags eFlags = 13;
  string strComputer = 14;
}

message TestItemGetResultsReply {
  fixed64 RetVal = 1;
}

message TestItemGetStorageSpaceRequest {
  fixed64 ObjectId = 1;
  optional bool bTestDocuments = 2;
  optional bool bProtocols = 3;
  optional bool bAttachments = 4;
}

message TestItemGetStorageSpaceReply {
  sint64 RetVal = 1;
}

message TestItemGetSubTreeResultsRequest {
  fixed64 ObjectId = 1;
  double dMin = 2;
  double dMax = 3;
  string strComputer = 4;
  optional TestResultValue eState = 5;
  optional TestResultValidated eValidated = 6;
  double dMinValidated = 7;
  double dMaxValidated = 8;
  optional TestResultFlags eFlags = 9;
}

message TestItemGetSubTreeResultsReply {
  fixed64 RetVal = 1;
}

message TestItemGetTestDocumentsRequest {
  fixed64 ObjectId = 1;
}

message TestItemGetTestDocumentsReply {
  fixed64 RetVal = 1;
}

message TestItemGetTestParametersRequest {
  fixed64 ObjectId = 1;
}

message TestItemGetTestParametersReply {
  fixed64 RetVal = 1;
}

message TestItemGetTestSpecRequest {
  fixed64 ObjectId = 1;
}

message TestItemGetTestSpecReply {
  string RetVal = 1;
}

message TestItemGetTypeRequest {
  fixed64 ObjectId = 1;
}

message TestItemGetTypeReply {
  TestItemType RetVal = 1;
}

message TestItemGetTypeNameRequest {
  fixed64 ObjectId = 1;
}

message TestItemGetTypeNameReply {
  string RetVal = 1;
}

message TestItemGetVersionRequest {
  fixed64 ObjectId = 1;
}

message TestItemGetVersionReply {
  string RetVal = 1;
}

message TestItemGetVersionDescriptionRequest {
  fixed64 ObjectId = 1;
}

message TestItemGetVersionDescriptionReply {
  string RetVal = 1;
}

message TestItemGetVersionHyperlinkRequest {
  fixed64 ObjectId = 1;
}

message TestItemGetVersionHyperlinkReply {
  string RetVal = 1;
}

message TestItemGetVersionLabelRequest {
  fixed64 ObjectId = 1;
}

message TestItemGetVersionLabelReply {
  string RetVal = 1;
}

message TestItemImportRequest {
  fixed64 ObjectId = 1;
  string strFilePath = 2;
  ImportExportFlags eFlags = 3;
}

message TestItemImportReply {
  fixed64 RetVal = 1;
}

message TestItemImportDataRequest {
  fixed64 ObjectId = 1;
  string strFilePath = 2;
}

message TestItemImportDataReply {
}

message TestItemLinkToRequest {
  fixed64 ObjectId = 1;
  fixed64 pOrigin = 2;
}

message TestItemLinkToReply {
}

message TestItemLockRequest {
  fixed64 ObjectId = 1;
  optional bool bLock = 2;
  LockFlags eFlags = 3;
}

message TestItemLockReply {
}

message TestItemMoveRequest {
  fixed64 ObjectId = 1;
  fixed64 pParent = 2;
  fixed64 pPrev = 3;
}

message TestItemMoveReply {
}

message TestItemReleaseRequest {
  fixed64 ObjectId = 1;
  string strLabel = 2;
  string strVersionNumber = 3;
  string strVersionDescription = 4;
  string strVersionHyperlink = 5;
}

message TestItemReleaseReply {
}

message TestItemSetAccessRightsRequest {
  fixed64 ObjectId = 1;
  string strUser = 2;
  AccessRight eAccessRights = 3;
}

message TestItemSetAccessRightsReply {
}

message TestItemSetAccessRightsUserGroupRequest {
  fixed64 ObjectId = 1;
  string strUserGroup = 2;
  AccessRight eAccessRights = 3;
}

message TestItemSetAccessRightsUserGroupReply {
}

message TestItemSetDescriptionRequest {
  fixed64 ObjectId = 1;
  string pVal = 2;
}

message TestItemSetDescriptionReply {
}

message TestItemSetKeepReleaseRequest {
  fixed64 ObjectId = 1;
  TestItemKeepRelease pKeepRelease = 2;
}

message TestItemSetKeepReleaseReply {
}

message TestItemSetNameRequest {
  fixed64 ObjectId = 1;
  string pVal = 2;
}

message TestItemSetNameReply {
}

message TestItemSetNamePrefixRequest {
  fixed64 ObjectId = 1;
  string pVal = 2;
}

message TestItemSetNamePrefixReply {
}

message TestItemSetProgramRequest {
  fixed64 ObjectId = 1;
  string pstrEncryption = 2;
  string pVal = 3;
}

message TestItemSetProgramReply {
}

message TestItemSetTestParametersRequest {
  fixed64 ObjectId = 1;
  fixed64 pVal = 2;
}

message TestItemSetTestParametersReply {
}

message TestItemSetTestSpecRequest {
  fixed64 ObjectId = 1;
  string pVal = 2;
}

message TestItemSetTestSpecReply {
}

message TestItemSetTypeRequest {
  fixed64 ObjectId = 1;
  TestItemType pVal = 2;
}

message TestItemSetTypeReply {
}

message TestItemSetTypeNameRequest {
  fixed64 ObjectId = 1;
  string pVal = 2;
}

message TestItemSetTypeNameReply {
}

message TestItemSetVersionRequest {
  fixed64 ObjectId = 1;
  string pVal = 2;
}

message TestItemSetVersionReply {
}

message TestItemSetVersionDescriptionRequest {
  fixed64 ObjectId = 1;
  string pVal = 2;
}

message TestItemSetVersionDescriptionReply {
}

message TestItemSetVersionHyperlinkRequest {
  fixed64 ObjectId = 1;
  string pstrHyperlink = 2;
}

message TestItemSetVersionHyperlinkReply {
}

message TestItemSyntaxCheckRequest {
  fixed64 ObjectId = 1;
}

message TestItemSyntaxCheckReply {
  bool RetVal = 1;
  string pstrErrorPath = 2;
  sint32 plErrorLine = 3;
  sint32 plErrorColumn = 4;
  string pstrErrorText = 5;
}

message TestParameterDeleteRequest {
  fixed64 ObjectId = 1;
}

message TestParameterDeleteReply {
}

message TestParameterGetChoiceTypeRequest {
  fixed64 ObjectId = 1;
}

message TestParameterGetChoiceTypeReply {
  string RetVal = 1;
}

message TestParameterGetDescriptionRequest {
  fixed64 ObjectId = 1;
}

message TestParameterGetDescriptionReply {
  string RetVal = 1;
}

message TestParameterGetHyperlinkRequest {
  fixed64 ObjectId = 1;
}

message TestParameterGetHyperlinkReply {
  string RetVal = 1;
}

message TestParameterGetInheritedRequest {
  fixed64 ObjectId = 1;
}

message TestParameterGetInheritedReply {
  string RetVal = 1;
}

message TestParameterGetLastUpdateRequest {
  fixed64 ObjectId = 1;
}

message TestParameterGetLastUpdateReply {
  double RetVal = 1;
}

message TestParameterGetNameRequest {
  fixed64 ObjectId = 1;
}

message TestParameterGetNameReply {
  string RetVal = 1;
}

message TestParameterGetTypeRequest {
  fixed64 ObjectId = 1;
}

message TestParameterGetTypeReply {
  string RetVal = 1;
}

message TestParameterGetUnitRequest {
  fixed64 ObjectId = 1;
}

message TestParameterGetUnitReply {
  string RetVal = 1;
}

message TestParameterGetUserDataRequest {
  fixed64 ObjectId = 1;
}

message TestParameterGetUserDataReply {
  string RetVal = 1;
}

message TestParameterGetValueRequest {
  fixed64 ObjectId = 1;
}

message TestParameterGetValueReply {
  oneof RetVal {
    fixed64 RetVal_obj = 30;
    string RetVal_string = 40;
    bool RetVal_bool = 38;
    double RetVal_double = 31;
    sint64 RetVal_int64 = 33;
    double RetVal_date = 42;
  }
}

message TestParameterSetChoiceTypeRequest {
  fixed64 ObjectId = 1;
  string strChoiceType = 2;
}

message TestParameterSetChoiceTypeReply {
}

message TestParameterSetDescriptionRequest {
  fixed64 ObjectId = 1;
  string strDescription = 2;
}

message TestParameterSetDescriptionReply {
}

message TestParameterSetHyperlinkRequest {
  fixed64 ObjectId = 1;
  string strHyperlink = 2;
}

message TestParameterSetHyperlinkReply {
}

message TestParameterSetTypeRequest {
  fixed64 ObjectId = 1;
  string strType = 2;
}

message TestParameterSetTypeReply {
}

message TestParameterSetUnitRequest {
  fixed64 ObjectId = 1;
  string strUnit = 2;
}

message TestParameterSetUnitReply {
}

message TestParameterSetUserDataRequest {
  fixed64 ObjectId = 1;
  string strUserData = 2;
}

message TestParameterSetUserDataReply {
}

message TestParameterSetValueRequest {
  fixed64 ObjectId = 1;
  oneof pVal {
    fixed64 pVal_obj = 30;
    string pVal_string = 40;
    bool pVal_bool = 38;
    double pVal_double = 31;
    sint64 pVal_int64 = 33;
    double pVal_date = 42;
  }
}

message TestParameterSetValueReply {
}

message TestParametersAddRequest {
  fixed64 ObjectId = 1;
  string strName = 2;
  oneof vValue {
    fixed64 vValue_obj = 30;
    string vValue_string = 40;
    bool vValue_bool = 38;
    double vValue_double = 31;
    sint64 vValue_int64 = 33;
    double vValue_date = 42;
  }
  string strUnit = 3;
  string strDescription = 4;
  string strUserData = 5;
  string strChoiceType = 6;
}

message TestParametersAddReply {
  fixed64 RetVal = 1;
}

message TestParametersGetChoiceTypeRequest {
  fixed64 ObjectId = 1;
  string strName = 2;
}

message TestParametersGetChoiceTypeReply {
  repeated string RetVal = 1;
}

message TestParametersGetChoiceTypesRequest {
  fixed64 ObjectId = 1;
}

message TestParametersGetChoiceTypesReply {
  repeated string RetVal = 1;
}

message TestParametersGetCountRequest {
  fixed64 ObjectId = 1;
}

message TestParametersGetCountReply {
  sint32 RetVal = 1;
}

message TestParametersGetItemRequest {
  fixed64 ObjectId = 1;
  oneof vIndex {
    sint32 vIndex_int32 = 39;
    string vIndex_string = 40;
  }
}

message TestParametersGetItemReply {
  fixed64 RetVal = 1;
}

message TestParametersSetChoiceTypeRequest {
  fixed64 ObjectId = 1;
  string strName = 2;
  repeated string straValues = 3;
}

message TestParametersSetChoiceTypeReply {
}

message TestProtocolGetCompressedSizeRequest {
  fixed64 ObjectId = 1;
}

message TestProtocolGetCompressedSizeReply {
  sint64 RetVal = 1;
}

message TestProtocolGetDataRequest {
  fixed64 ObjectId = 1;
}

message TestProtocolGetDataReply {
  string RetVal = 1;
}

message TestProtocolGetExtensionRequest {
  fixed64 ObjectId = 1;
}

message TestProtocolGetExtensionReply {
  string RetVal = 1;
}

message TestProtocolGetNameRequest {
  fixed64 ObjectId = 1;
}

message TestProtocolGetNameReply {
  string RetVal = 1;
}

message TestProtocolGetResultRequest {
  fixed64 ObjectId = 1;
}

message TestProtocolGetResultReply {
  fixed64 RetVal = 1;
}

message TestProtocolGetSizeRequest {
  fixed64 ObjectId = 1;
}

message TestProtocolGetSizeReply {
  sint64 RetVal = 1;
}

message TestProtocolsGetCountRequest {
  fixed64 ObjectId = 1;
}

message TestProtocolsGetCountReply {
  sint32 RetVal = 1;
}

message TestProtocolsGetItemRequest {
  fixed64 ObjectId = 1;
  oneof vIndex {
    sint32 vIndex_int32 = 39;
    string vIndex_string = 40;
  }
}

message TestProtocolsGetItemReply {
  fixed64 RetVal = 1;
}

message TestResultAddAttachmentRequest {
  fixed64 ObjectId = 1;
  string strFilePath = 2;
  string strName = 3;
  TestResultAddAttachment eAddAttachment = 4;
}

message TestResultAddAttachmentReply {
  fixed64 RetVal = 1;
}

message TestResultDeleteRequest {
  fixed64 ObjectId = 1;
  bool bDeleteChildren = 2;
  bool bPermanently = 3;
}

message TestResultDeleteReply {
}

message TestResultErasePersonalDataRequest {
  fixed64 ObjectId = 1;
}

message TestResultErasePersonalDataReply {
}

message TestResultExportProtocolRequest {
  fixed64 ObjectId = 1;
  string strFilePath = 2;
  bool bOverwrite = 3;
}

message TestResultExportProtocolReply {
}

message TestResultGetAdditionalResultValueRequest {
  fixed64 ObjectId = 1;
}

message TestResultGetAdditionalResultValueReply {
  sint32 RetVal = 1;
}

message TestResultGetAttachmentsRequest {
  fixed64 ObjectId = 1;
}

message TestResultGetAttachmentsReply {
  fixed64 RetVal = 1;
}

message TestResultGetChildrenRequest {
  fixed64 ObjectId = 1;
}

message TestResultGetChildrenReply {
  fixed64 RetVal = 1;
}

message TestResultGetCommentRequest {
  fixed64 ObjectId = 1;
}

message TestResultGetCommentReply {
  string RetVal = 1;
}

message TestResultGetCompressedSizeRequest {
  fixed64 ObjectId = 1;
}

message TestResultGetCompressedSizeReply {
  sint64 RetVal = 1;
}

message TestResultGetComputerRequest {
  fixed64 ObjectId = 1;
}

message TestResultGetComputerReply {
  string RetVal = 1;
}

message TestResultGetDateRequest {
  fixed64 ObjectId = 1;
}

message TestResultGetDateReply {
  double RetVal = 1;
}

message TestResultGetDeletionDateRequest {
  fixed64 ObjectId = 1;
}

message TestResultGetDeletionDateReply {
  optional double RetVal = 1;
}

message TestResultGetExecutionTimeRequest {
  fixed64 ObjectId = 1;
}

message TestResultGetExecutionTimeReply {
  double RetVal = 1;
}

message TestResultGetKeywordMapRequest {
  fixed64 ObjectId = 1;
}

message TestResultGetKeywordMapReply {
  fixed64 RetVal = 1;
}

message TestResultGetLinksRequest {
  fixed64 ObjectId = 1;
}

message TestResultGetLinksReply {
  fixed64 RetVal = 1;
}

message TestResultGetNameRequest {
  fixed64 ObjectId = 1;
}

message TestResultGetNameReply {
  string RetVal = 1;
}

message TestResultGetParentRequest {
  fixed64 ObjectId = 1;
}

message TestResultGetParentReply {
  fixed64 RetVal = 1;
}

message TestResultGetPathRequest {
  fixed64 ObjectId = 1;
  bool bResultPath = 2;
  bool bUseDatabaseId = 3;
}

message TestResultGetPathReply {
  string RetVal = 1;
}

message TestResultGetResultRequest {
  fixed64 ObjectId = 1;
}

message TestResultGetResultReply {
  TestResultValue RetVal = 1;
}

message TestResultGetRuntimeErrorsRequest {
  fixed64 ObjectId = 1;
}

message TestResultGetRuntimeErrorsReply {
  string RetVal = 1;
}

message TestResultGetSizeRequest {
  fixed64 ObjectId = 1;
}

message TestResultGetSizeReply {
  sint64 RetVal = 1;
}

message TestResultGetTesterRequest {
  fixed64 ObjectId = 1;
}

message TestResultGetTesterReply {
  string RetVal = 1;
}

message TestResultGetTestItemRequest {
  fixed64 ObjectId = 1;
}

message TestResultGetTestItemReply {
  fixed64 RetVal = 1;
}

message TestResultGetTestParametersRequest {
  fixed64 ObjectId = 1;
}

message TestResultGetTestParametersReply {
  fixed64 RetVal = 1;
}

message TestResultGetTestProtocolsRequest {
  fixed64 ObjectId = 1;
}

message TestResultGetTestProtocolsReply {
  fixed64 RetVal = 1;
}

message TestResultGetValidatedRequest {
  fixed64 ObjectId = 1;
}

message TestResultGetValidatedReply {
  TestResultValidated RetVal = 1;
}

message TestResultGetValidatedDateRequest {
  fixed64 ObjectId = 1;
}

message TestResultGetValidatedDateReply {
  double RetVal = 1;
}

message TestResultGetValidatedUserRequest {
  fixed64 ObjectId = 1;
}

message TestResultGetValidatedUserReply {
  string RetVal = 1;
}

message TestResultGetVersionRequest {
  fixed64 ObjectId = 1;
}

message TestResultGetVersionReply {
  string RetVal = 1;
}

message TestResultGetVersionLabelRequest {
  fixed64 ObjectId = 1;
}

message TestResultGetVersionLabelReply {
  string RetVal = 1;
}

message TestResultRestoreRequest {
  fixed64 ObjectId = 1;
  bool bRestoreChildren = 2;
}

message TestResultRestoreReply {
}

message TestResultSetAdditionalResultValueRequest {
  fixed64 ObjectId = 1;
  sint32 pVal = 2;
}

message TestResultSetAdditionalResultValueReply {
}

message TestResultSetCommentRequest {
  fixed64 ObjectId = 1;
  string pVal = 2;
}

message TestResultSetCommentReply {
}

message TestResultSetComputerRequest {
  fixed64 ObjectId = 1;
  string pVal = 2;
}

message TestResultSetComputerReply {
}

message TestResultSetNameRequest {
  fixed64 ObjectId = 1;
  string pVal = 2;
}

message TestResultSetNameReply {
}

message TestResultSetResultRequest {
  fixed64 ObjectId = 1;
  TestResultValue pVal = 2;
}

message TestResultSetResultReply {
}

message TestResultSetTestParametersRequest {
  fixed64 ObjectId = 1;
  fixed64 pVal = 2;
}

message TestResultSetTestParametersReply {
}

message TestResultSetValidatedRequest {
  fixed64 ObjectId = 1;
  TestResultValidated pVal = 2;
}

message TestResultSetValidatedReply {
}

message TestSequencerItemDeleteRequest {
  fixed64 ObjectId = 1;
}

message TestSequencerItemDeleteReply {
}

message TestSequencerItemGetSequencerServerRequest {
  fixed64 ObjectId = 1;
}

message TestSequencerItemGetSequencerServerReply {
  fixed64 RetVal = 1;
}

message TestSequencerItemGetSkipRequest {
  fixed64 ObjectId = 1;
  fixed64 pTestItem = 2;
}

message TestSequencerItemGetSkipReply {
  bool RetVal = 1;
}

message TestSequencerItemGetTestItemRequest {
  fixed64 ObjectId = 1;
}

message TestSequencerItemGetTestItemReply {
  fixed64 RetVal = 1;
}

message TestSequencerItemGetTestResultRequest {
  fixed64 ObjectId = 1;
}

message TestSequencerItemGetTestResultReply {
  fixed64 RetVal = 1;
}

message TestSequencerItemGetTimeoutRequest {
  fixed64 ObjectId = 1;
  fixed64 pTestItem = 2;
}

message TestSequencerItemGetTimeoutReply {
  double RetVal = 1;
}

message TestSequencerItemGetUserRequest {
  fixed64 ObjectId = 1;
}

message TestSequencerItemGetUserReply {
  string RetVal = 1;
}

message TestSequencerItemGetUserDataRequest {
  fixed64 ObjectId = 1;
  fixed64 pTestItem = 2;
}

message TestSequencerItemGetUserDataReply {
  string RetVal = 1;
}

message TestSequencerItemMoveRequest {
  fixed64 ObjectId = 1;
  fixed64 pPrev = 2;
}

message TestSequencerItemMoveReply {
}

message TestSequencerItemSetSkipRequest {
  fixed64 ObjectId = 1;
  fixed64 pTestItem = 2;
  bool pbSkip = 3;
}

message TestSequencerItemSetSkipReply {
}

message TestSequencerItemSetTimeoutRequest {
  fixed64 ObjectId = 1;
  fixed64 pTestItem = 2;
  double pdTimeout = 3;
}

message TestSequencerItemSetTimeoutReply {
}

message TestSequencerItemSetUserDataRequest {
  fixed64 ObjectId = 1;
  fixed64 pTestItem = 2;
  string strUserData = 3;
}

message TestSequencerItemSetUserDataReply {
}

message TestSequencerItemsAddRequest {
  fixed64 ObjectId = 1;
  fixed64 pTestItem = 2;
}

message TestSequencerItemsAddReply {
  fixed64 RetVal = 1;
}

message TestSequencerItemsGetCountRequest {
  fixed64 ObjectId = 1;
}

message TestSequencerItemsGetCountReply {
  sint32 RetVal = 1;
}

message TestSequencerItemsGetItemRequest {
  fixed64 ObjectId = 1;
  oneof vIndex {
    sint32 vIndex_int32 = 39;
    string vIndex_string = 40;
  }
}

message TestSequencerItemsGetItemReply {
  fixed64 RetVal = 1;
}

message TMAddKeywordValueRequest {
  string strKeyword = 1;
  oneof value {
    double value_double = 31;
    string value_string = 40;
  }
}

message TMAddKeywordValueReply {
  bool RetVal = 1;
}

message TMAddRuntimeErrorRequest {
  string strErrorText = 1;
}

message TMAddRuntimeErrorReply {
}

message TMChoosePathDialogRequest {
  optional ChoosePathFlags eFlags = 1;
  string strTitle = 2;
  string strPath = 3;
  string strFilter = 4;
}

message TMChoosePathDialogReply {
  string RetVal = 1;
}

message TMClearCacheRequest {
}

message TMClearCacheReply {
  bool RetVal = 1;
}

message TMExecuteRequest {
  string strTMPath = 1;
  float fTimeout = 2;
  string strExecutorName = 3;
  bool bClearCache = 4;
  oneof vParameter {
    double vParameter_double = 31;
    sint64 vParameter_int64 = 33;
    uint64 vParameter_uint64 = 35;
    string vParameter_string = 40;
    DoubleArray vParameter_doublearray = 32;
    Int64Array vParameter_int64array = 34;
    UInt64Array vParameter_uint64array = 36;
    StringArray vParameter_stringarray = 41;
    bool vParameter_bool = 38;
    double vParameter_date = 42;
    fixed64 vParameter_obj = 30;
  }
}

message TMExecuteReply {
  TestResultValue RetVal = 1;
  sint32 piAdditionalResultValue = 2;
}

message TMExecuteAsyncRequest {
  string strPath = 1;
  float fTimeout = 2;
  string strExecutorName = 3;
  bool bCreateResult = 4;
  bool bBackground = 5;
  oneof vParameter {
    double vParameter_double = 31;
    sint64 vParameter_int64 = 33;
    uint64 vParameter_uint64 = 35;
    string vParameter_string = 40;
    DoubleArray vParameter_doublearray = 32;
    Int64Array vParameter_int64array = 34;
    UInt64Array vParameter_uint64array = 36;
    StringArray vParameter_stringarray = 41;
    bool vParameter_bool = 38;
    double vParameter_date = 42;
    fixed64 vParameter_obj = 30;
  }
}

message TMExecuteAsyncReply {
  bool RetVal = 1;
  fixed64 pTestResult = 2;
  fixed64 pExecutedItem = 3;
}

message TMExecuteThisRequest {
  repeated string straModules = 1;
  oneof vParameter {
    double vParameter_double = 31;
    sint64 vParameter_int64 = 33;
    uint64 vParameter_uint64 = 35;
    string vParameter_string = 40;
    DoubleArray vParameter_doublearray = 32;
    Int64Array vParameter_int64array = 34;
    UInt64Array vParameter_uint64array = 36;
    StringArray vParameter_stringarray = 41;
    bool vParameter_bool = 38;
    double vParameter_date = 42;
    fixed64 vParameter_obj = 30;
  }
  float fTimeout = 2;
}

message TMExecuteThisReply {
  TestResultValue RetVal = 1;
  sint32 piAdditionalResultValue = 2;
}

message TMExecuteThisAsyncRequest {
  repeated string straModules = 1;
  oneof vParameter {
    double vParameter_double = 31;
    sint64 vParameter_int64 = 33;
    uint64 vParameter_uint64 = 35;
    string vParameter_string = 40;
    DoubleArray vParameter_doublearray = 32;
    Int64Array vParameter_int64array = 34;
    UInt64Array vParameter_uint64array = 36;
    StringArray vParameter_stringarray = 41;
    bool vParameter_bool = 38;
    double vParameter_date = 42;
    fixed64 vParameter_obj = 30;
  }
  float fTimeout = 2;
  bool bBackground = 3;
}

message TMExecuteThisAsyncReply {
  fixed64 pExecutedItem = 2;
}

message TMFormatCodeRequest {
  string strCode = 1;
  uint32 uStartPosition = 2;
  optional uint32 uLength = 3;
}

message TMFormatCodeReply {
  string RetVal = 1;
}

message TMGetAttachmentRequest {
  string strTMPath = 1;
}

message TMGetAttachmentReply {
  fixed64 RetVal = 1;
}

message TMGetExecutedItemsRequest {
  bool bIncludeDebugger = 1;
}

message TMGetExecutedItemsReply {
  repeated fixed64 RetVal = 1;
}

message TMGetLoadedModulesRequest {
}

message TMGetLoadedModulesReply {
  repeated string RetVal = 1;
}

message TMGetSequencerServersRequest {
  fixed64 pAnyItem = 1;
}

message TMGetSequencerServersReply {
  fixed64 RetVal = 1;
}

message TMGetTestDocumentRequest {
  string strTMPath = 1;
}

message TMGetTestDocumentReply {
  fixed64 RetVal = 1;
}

message TMGetTestItemRequest {
  string strTMPath = 1;
  bool bSuppressErrorMessage = 2;
}

message TMGetTestItemReply {
  bool RetVal = 1;
  fixed64 pTestItem = 2;
}

message TMGetTestItem2Request {
  string strTMPath = 1;
}

message TMGetTestItem2Reply {
  fixed64 RetVal = 1;
}

message TMGetTestResultRequest {
  string strTMPath = 1;
}

message TMGetTestResultReply {
  fixed64 RetVal = 1;
}

message TMGetUserGroupsRequest {
  fixed64 pAnyItem = 1;
}

message TMGetUserGroupsReply {
  fixed64 RetVal = 1;
}

message TMGetUserItemsRequest {
  fixed64 pAnyItem = 1;
}

message TMGetUserItemsReply {
  fixed64 RetVal = 1;
}

message TMPurgeRequest {
  fixed64 pAnyItem = 1;
  optional bool bNonBlocking = 2;
}

message TMPurgeReply {
}

message UserCustomAttributeGetChoiceTypeRequest {
  fixed64 ObjectId = 1;
}

message UserCustomAttributeGetChoiceTypeReply {
  string RetVal = 1;
}

message UserCustomAttributeGetDescriptionRequest {
  fixed64 ObjectId = 1;
}

message UserCustomAttributeGetDescriptionReply {
  string RetVal = 1;
}

message UserCustomAttributeGetHyperlinkRequest {
  fixed64 ObjectId = 1;
}

message UserCustomAttributeGetHyperlinkReply {
  string RetVal = 1;
}

message UserCustomAttributeGetNameRequest {
  fixed64 ObjectId = 1;
}

message UserCustomAttributeGetNameReply {
  string RetVal = 1;
}

message UserCustomAttributeGetTypeRequest {
  fixed64 ObjectId = 1;
}

message UserCustomAttributeGetTypeReply {
  string RetVal = 1;
}

message UserCustomAttributeGetValueRequest {
  fixed64 ObjectId = 1;
}

message UserCustomAttributeGetValueReply {
  oneof RetVal {
    fixed64 RetVal_obj = 30;
    string RetVal_string = 40;
    bool RetVal_bool = 38;
    double RetVal_double = 31;
    sint64 RetVal_int64 = 33;
    double RetVal_date = 42;
  }
}

message UserCustomAttributeSetDescriptionRequest {
  fixed64 ObjectId = 1;
  string strDescription = 2;
}

message UserCustomAttributeSetDescriptionReply {
}

message UserCustomAttributeSetHyperlinkRequest {
  fixed64 ObjectId = 1;
  string strHyperlink = 2;
}

message UserCustomAttributeSetHyperlinkReply {
}

message UserCustomAttributeSetValueRequest {
  fixed64 ObjectId = 1;
  oneof pVal {
    fixed64 pVal_obj = 30;
    string pVal_string = 40;
    bool pVal_bool = 38;
    double pVal_double = 31;
    sint64 pVal_int64 = 33;
    double pVal_date = 42;
  }
}

message UserCustomAttributeSetValueReply {
}

message UserCustomAttributesGetChoiceTypeRequest {
  fixed64 ObjectId = 1;
  string strName = 2;
}

message UserCustomAttributesGetChoiceTypeReply {
  repeated string RetVal = 1;
}

message UserCustomAttributesGetChoiceTypesRequest {
  fixed64 ObjectId = 1;
}

message UserCustomAttributesGetChoiceTypesReply {
  repeated string RetVal = 1;
}

message UserCustomAttributesGetCountRequest {
  fixed64 ObjectId = 1;
}

message UserCustomAttributesGetCountReply {
  sint32 RetVal = 1;
}

message UserCustomAttributesGetItemRequest {
  fixed64 ObjectId = 1;
  oneof vIndex {
    sint32 vIndex_int32 = 39;
    string vIndex_string = 40;
  }
}

message UserCustomAttributesGetItemReply {
  fixed64 RetVal = 1;
}

message UserCustomAttributesGetTemplateNameRequest {
  fixed64 ObjectId = 1;
}

message UserCustomAttributesGetTemplateNameReply {
  string RetVal = 1;
}

message UserCustomAttributesInitRequest {
  fixed64 ObjectId = 1;
  string strTemplateName = 2;
  fixed64 pAnyItem = 3;
}

message UserCustomAttributesInitReply {
}

message UserCustomAttributesSetChoiceTypeRequest {
  fixed64 ObjectId = 1;
  string strName = 2;
  repeated string straValues = 3;
}

message UserCustomAttributesSetChoiceTypeReply {
}

message UserGroupDeleteRequest {
  fixed64 ObjectId = 1;
}

message UserGroupDeleteReply {
}

message UserGroupGetDescriptionRequest {
  fixed64 ObjectId = 1;
}

message UserGroupGetDescriptionReply {
  string RetVal = 1;
}

message UserGroupGetNameRequest {
  fixed64 ObjectId = 1;
}

message UserGroupGetNameReply {
  string RetVal = 1;
}

message UserGroupGetUserItemsRequest {
  fixed64 ObjectId = 1;
}

message UserGroupGetUserItemsReply {
  fixed64 RetVal = 1;
}

message UserGroupSetDescriptionRequest {
  fixed64 ObjectId = 1;
  string strDescription = 2;
}

message UserGroupSetDescriptionReply {
}

message UserGroupSetNameRequest {
  fixed64 ObjectId = 1;
  string strName = 2;
}

message UserGroupSetNameReply {
}

message UserGroupsAddRequest {
  fixed64 ObjectId = 1;
  string strGroupName = 2;
  string strGroupDescription = 3;
}

message UserGroupsAddReply {
  fixed64 RetVal = 1;
}

message UserGroupsGetCountRequest {
  fixed64 ObjectId = 1;
}

message UserGroupsGetCountReply {
  sint32 RetVal = 1;
}

message UserGroupsGetItemRequest {
  fixed64 ObjectId = 1;
  oneof vIndex {
    sint32 vIndex_int32 = 39;
    string vIndex_string = 40;
  }
}

message UserGroupsGetItemReply {
  fixed64 RetVal = 1;
}

message UserItemDeleteRequest {
  fixed64 ObjectId = 1;
}

message UserItemDeleteReply {
}

message UserItemGetAccessManagedByGroupRequest {
  fixed64 ObjectId = 1;
}

message UserItemGetAccessManagedByGroupReply {
  bool RetVal = 1;
}

message UserItemGetChangePasswordRequiredRequest {
  fixed64 ObjectId = 1;
}

message UserItemGetChangePasswordRequiredReply {
  bool RetVal = 1;
}

message UserItemGetCustomAttributesRequest {
  fixed64 ObjectId = 1;
}

message UserItemGetCustomAttributesReply {
  fixed64 RetVal = 1;
}

message UserItemGetDomainRequest {
  fixed64 ObjectId = 1;
}

message UserItemGetDomainReply {
  string RetVal = 1;
}

message UserItemGetEMailRequest {
  fixed64 ObjectId = 1;
}

message UserItemGetEMailReply {
  string RetVal = 1;
}

message UserItemGetEnabledRequest {
  fixed64 ObjectId = 1;
}

message UserItemGetEnabledReply {
  bool RetVal = 1;
}

message UserItemGetExpirationDateRequest {
  fixed64 ObjectId = 1;
}

message UserItemGetExpirationDateReply {
  optional double RetVal = 1;
}

message UserItemGetFullNameRequest {
  fixed64 ObjectId = 1;
}

message UserItemGetFullNameReply {
  string RetVal = 1;
}

message UserItemGetGroupRequest {
  fixed64 ObjectId = 1;
}

message UserItemGetGroupReply {
  string RetVal = 1;
}

message UserItemGetLastLogonDateRequest {
  fixed64 ObjectId = 1;
}

message UserItemGetLastLogonDateReply {
  optional double RetVal = 1;
}

message UserItemGetNameRequest {
  fixed64 ObjectId = 1;
}

message UserItemGetNameReply {
  string RetVal = 1;
}

message UserItemGetPhoneRequest {
  fixed64 ObjectId = 1;
}

message UserItemGetPhoneReply {
  string RetVal = 1;
}

message UserItemSetAccessManagedByGroupRequest {
  fixed64 ObjectId = 1;
  bool bAccessManagedByGroup = 2;
}

message UserItemSetAccessManagedByGroupReply {
}

message UserItemSetChangePasswordRequiredRequest {
  fixed64 ObjectId = 1;
  bool bChangePasswordRequired = 2;
}

message UserItemSetChangePasswordRequiredReply {
}

message UserItemSetCustomAttributesRequest {
  fixed64 ObjectId = 1;
  fixed64 pUserCustomAttributes = 2;
}

message UserItemSetCustomAttributesReply {
}

message UserItemSetDomainRequest {
  fixed64 ObjectId = 1;
  string strDomain = 2;
}

message UserItemSetDomainReply {
}

message UserItemSetEMailRequest {
  fixed64 ObjectId = 1;
  string strEMail = 2;
}

message UserItemSetEMailReply {
}

message UserItemSetEnabledRequest {
  fixed64 ObjectId = 1;
  bool bEnabled = 2;
}

message UserItemSetEnabledReply {
}

message UserItemSetExpirationDateRequest {
  fixed64 ObjectId = 1;
  optional double vExpirationDate = 2;
}

message UserItemSetExpirationDateReply {
}

message UserItemSetFullNameRequest {
  fixed64 ObjectId = 1;
  string strFullName = 2;
}

message UserItemSetFullNameReply {
}

message UserItemSetGroupRequest {
  fixed64 ObjectId = 1;
  string strGroup = 2;
}

message UserItemSetGroupReply {
}

message UserItemSetNameRequest {
  fixed64 ObjectId = 1;
  string strName = 2;
}

message UserItemSetNameReply {
}

message UserItemSetPhoneRequest {
  fixed64 ObjectId = 1;
  string strPhone = 2;
}

message UserItemSetPhoneReply {
}

message UserItemsAddRequest {
  fixed64 ObjectId = 1;
  string strUser = 2;
  string strPassword = 3;
  string strDomain = 4;
}

message UserItemsAddReply {
  fixed64 RetVal = 1;
}

message UserItemsGetCountRequest {
  fixed64 ObjectId = 1;
}

message UserItemsGetCountReply {
  sint32 RetVal = 1;
}

message UserItemsGetItemRequest {
  fixed64 ObjectId = 1;
  oneof vIndex {
    sint32 vIndex_int32 = 39;
    string vIndex_string = 40;
  }
}

message UserItemsGetItemReply {
  fixed64 RetVal = 1;
}

message VariantListAddHeadRequest {
  fixed64 ObjectId = 1;
  oneof element {
    double element_double = 31;
    sint64 element_int64 = 33;
    uint64 element_uint64 = 35;
    DoubleArray element_doublearray = 32;
    Int64Array element_int64array = 34;
    UInt64Array element_uint64array = 36;
    string element_string = 40;
    StringArray element_stringarray = 41;
    bool element_bool = 38;
    fixed64 element_obj = 30;
    double element_date = 42;
  }
}

message VariantListAddHeadReply {
  uint64 RetVal = 1;
}

message VariantListAddTailRequest {
  fixed64 ObjectId = 1;
  oneof element {
    double element_double = 31;
    sint64 element_int64 = 33;
    uint64 element_uint64 = 35;
    DoubleArray element_doublearray = 32;
    Int64Array element_int64array = 34;
    UInt64Array element_uint64array = 36;
    string element_string = 40;
    StringArray element_stringarray = 41;
    bool element_bool = 38;
    fixed64 element_obj = 30;
    double element_date = 42;
  }
}

message VariantListAddTailReply {
  uint64 RetVal = 1;
}

message VariantListFindRequest {
  fixed64 ObjectId = 1;
  oneof element {
    double element_double = 31;
    sint64 element_int64 = 33;
    uint64 element_uint64 = 35;
    DoubleArray element_doublearray = 32;
    Int64Array element_int64array = 34;
    UInt64Array element_uint64array = 36;
    string element_string = 40;
    StringArray element_stringarray = 41;
    bool element_bool = 38;
    fixed64 element_obj = 30;
    double element_date = 42;
  }
  uint64 findAfterPosition = 2;
}

message VariantListFindReply {
  uint64 RetVal = 1;
}

message VariantListFindIndexRequest {
  fixed64 ObjectId = 1;
  sint32 lIndex = 2;
}

message VariantListFindIndexReply {
  uint64 RetVal = 1;
}

message VariantListGetAtRequest {
  fixed64 ObjectId = 1;
  uint64 Position = 2;
}

message VariantListGetAtReply {
  oneof RetVal {
    double RetVal_double = 31;
    sint64 RetVal_int64 = 33;
    uint64 RetVal_uint64 = 35;
    DoubleArray RetVal_doublearray = 32;
    Int64Array RetVal_int64array = 34;
    UInt64Array RetVal_uint64array = 36;
    string RetVal_string = 40;
    StringArray RetVal_stringarray = 41;
    bool RetVal_bool = 38;
    fixed64 RetVal_obj = 30;
    double RetVal_date = 42;
  }
}

message VariantListGetCountRequest {
  fixed64 ObjectId = 1;
}

message VariantListGetCountReply {
  sint32 RetVal = 1;
}

message VariantListGetHeadRequest {
  fixed64 ObjectId = 1;
}

message VariantListGetHeadReply {
  oneof RetVal {
    double RetVal_double = 31;
    sint64 RetVal_int64 = 33;
    uint64 RetVal_uint64 = 35;
    DoubleArray RetVal_doublearray = 32;
    Int64Array RetVal_int64array = 34;
    UInt64Array RetVal_uint64array = 36;
    string RetVal_string = 40;
    StringArray RetVal_stringarray = 41;
    bool RetVal_bool = 38;
    fixed64 RetVal_obj = 30;
    double RetVal_date = 42;
  }
}

message VariantListGetHeadPositionRequest {
  fixed64 ObjectId = 1;
}

message VariantListGetHeadPositionReply {
  uint64 RetVal = 1;
}

message VariantListGetNextRequest {
  fixed64 ObjectId = 1;
  uint64 pPosition = 2;
}

message VariantListGetNextReply {
  oneof RetVal {
    double RetVal_double = 31;
    sint64 RetVal_int64 = 33;
    uint64 RetVal_uint64 = 35;
    DoubleArray RetVal_doublearray = 32;
    Int64Array RetVal_int64array = 34;
    UInt64Array RetVal_uint64array = 36;
    string RetVal_string = 40;
    StringArray RetVal_stringarray = 41;
    bool RetVal_bool = 38;
    fixed64 RetVal_obj = 30;
    double RetVal_date = 42;
  }
  uint64 pPosition = 2;
}

message VariantListGetPrevRequest {
  fixed64 ObjectId = 1;
  uint64 pPosition = 2;
}

message VariantListGetPrevReply {
  oneof RetVal {
    double RetVal_double = 31;
    sint64 RetVal_int64 = 33;
    uint64 RetVal_uint64 = 35;
    DoubleArray RetVal_doublearray = 32;
    Int64Array RetVal_int64array = 34;
    UInt64Array RetVal_uint64array = 36;
    string RetVal_string = 40;
    StringArray RetVal_stringarray = 41;
    bool RetVal_bool = 38;
    fixed64 RetVal_obj = 30;
    double RetVal_date = 42;
  }
  uint64 pPosition = 2;
}

message VariantListGetTailRequest {
  fixed64 ObjectId = 1;
}

message VariantListGetTailReply {
  oneof RetVal {
    double RetVal_double = 31;
    sint64 RetVal_int64 = 33;
    uint64 RetVal_uint64 = 35;
    DoubleArray RetVal_doublearray = 32;
    Int64Array RetVal_int64array = 34;
    UInt64Array RetVal_uint64array = 36;
    string RetVal_string = 40;
    StringArray RetVal_stringarray = 41;
    bool RetVal_bool = 38;
    fixed64 RetVal_obj = 30;
    double RetVal_date = 42;
  }
}

message VariantListGetTailPositionRequest {
  fixed64 ObjectId = 1;
}

message VariantListGetTailPositionReply {
  uint64 RetVal = 1;
}

message VariantListInsertAfterRequest {
  fixed64 ObjectId = 1;
  uint64 Position = 2;
  oneof element {
    double element_double = 31;
    sint64 element_int64 = 33;
    uint64 element_uint64 = 35;
    DoubleArray element_doublearray = 32;
    Int64Array element_int64array = 34;
    UInt64Array element_uint64array = 36;
    string element_string = 40;
    StringArray element_stringarray = 41;
    bool element_bool = 38;
    fixed64 element_obj = 30;
    double element_date = 42;
  }
}

message VariantListInsertAfterReply {
  uint64 RetVal = 1;
}

message VariantListInsertBeforeRequest {
  fixed64 ObjectId = 1;
  uint64 Position = 2;
  oneof element {
    double element_double = 31;
    sint64 element_int64 = 33;
    uint64 element_uint64 = 35;
    DoubleArray element_doublearray = 32;
    Int64Array element_int64array = 34;
    UInt64Array element_uint64array = 36;
    string element_string = 40;
    StringArray element_stringarray = 41;
    bool element_bool = 38;
    fixed64 element_obj = 30;
    double element_date = 42;
  }
}

message VariantListInsertBeforeReply {
  uint64 RetVal = 1;
}

message VariantListIsEmptyRequest {
  fixed64 ObjectId = 1;
}

message VariantListIsEmptyReply {
  bool RetVal = 1;
}

message VariantListRemoveAllRequest {
  fixed64 ObjectId = 1;
}

message VariantListRemoveAllReply {
}

message VariantListRemoveAtRequest {
  fixed64 ObjectId = 1;
  uint64 Position = 2;
}

message VariantListRemoveAtReply {
}

message VariantListRemoveHeadRequest {
  fixed64 ObjectId = 1;
}

message VariantListRemoveHeadReply {
  oneof RetVal {
    double RetVal_double = 31;
    sint64 RetVal_int64 = 33;
    uint64 RetVal_uint64 = 35;
    DoubleArray RetVal_doublearray = 32;
    Int64Array RetVal_int64array = 34;
    UInt64Array RetVal_uint64array = 36;
    string RetVal_string = 40;
    StringArray RetVal_stringarray = 41;
    bool RetVal_bool = 38;
    fixed64 RetVal_obj = 30;
    double RetVal_date = 42;
  }
}

message VariantListRemoveTailRequest {
  fixed64 ObjectId = 1;
}

message VariantListRemoveTailReply {
  oneof RetVal {
    double RetVal_double = 31;
    sint64 RetVal_int64 = 33;
    uint64 RetVal_uint64 = 35;
    DoubleArray RetVal_doublearray = 32;
    Int64Array RetVal_int64array = 34;
    UInt64Array RetVal_uint64array = 36;
    string RetVal_string = 40;
    StringArray RetVal_stringarray = 41;
    bool RetVal_bool = 38;
    fixed64 RetVal_obj = 30;
    double RetVal_date = 42;
  }
}

message VariantListSetAtRequest {
  fixed64 ObjectId = 1;
  uint64 Position = 2;
  oneof element {
    double element_double = 31;
    sint64 element_int64 = 33;
    uint64 element_uint64 = 35;
    DoubleArray element_doublearray = 32;
    Int64Array element_int64array = 34;
    UInt64Array element_uint64array = 36;
    string element_string = 40;
    StringArray element_stringarray = 41;
    bool element_bool = 38;
    fixed64 element_obj = 30;
    double element_date = 42;
  }
}

message VariantListSetAtReply {
}

message VariantListSortRequest {
  fixed64 ObjectId = 1;
}

message VariantListSortReply {
}

message VariantListEventSortCompareParams {
  oneof element1 {
    double element1_double = 31;
    sint64 element1_int64 = 33;
    uint64 element1_uint64 = 35;
    DoubleArray element1_doublearray = 32;
    Int64Array element1_int64array = 34;
    UInt64Array element1_uint64array = 36;
    string element1_string = 40;
    StringArray element1_stringarray = 41;
    bool element1_bool = 38;
    fixed64 element1_obj = 30;
    double element1_date = 42;
  }
  oneof element2 {
    double element2_double = 61;
    sint64 element2_int64 = 63;
    uint64 element2_uint64 = 65;
    DoubleArray element2_doublearray = 62;
    Int64Array element2_int64array = 64;
    UInt64Array element2_uint64array = 66;
    string element2_string = 70;
    StringArray element2_stringarray = 71;
    bool element2_bool = 68;
    fixed64 element2_obj = 60;
    double element2_date = 72;
  }
}

message VariantListEventSortCompareResult {
  sint32 RetVal = 1;
}

message VideoAudioContainerInfoGetNameRequest {
  fixed64 ObjectId = 1;
}

message VideoAudioContainerInfoGetNameReply {
  string RetVal = 1;
}

message VideoAudioContainerInfoGetTimeOffsetRequest {
  fixed64 ObjectId = 1;
}

message VideoAudioContainerInfoGetTimeOffsetReply {
  double RetVal = 1;
}

message MessageChannelInfo {
  string strName = 1;
  string strType = 2;
}

message ValueArray {
  oneof arr {
    DoubleArray doublearray = 1;
    Int64Array int64array = 2;
    UInt64Array uint64array = 3;
    Int32Array int32array = 4;
    UInt32Array uint32array = 5;
    bytes uint8array = 6;
    FloatArray floatarray = 7;
    //gRPC has no int8/int16/uint16 data types, signal values are converted to 32-bit in these cases
  }
}

message DoubleArray {
  repeated double arr = 1;
}

message FloatArray {
  repeated float arr = 1;
}

message Int64Array {
  repeated sint64 arr = 1;
}

message UInt64Array {
  repeated uint64 arr = 1;
}

message Int32Array {
  repeated sint32 arr = 1;
}

message UInt32Array {
  repeated uint32 arr = 1;
}

message StringArray {
  repeated string arr = 1;
}

enum AccessRight {
  arNone = 0;
  arManage = 1;
  arBrowse = 2;
  arRead = 4;
  arWrite = 8;
  arExecute = 16;
  arDelete = 256;
  arTrBrowse = 32;
  arTrRead = 64;
  arTrWrite = 128;
  arTrDelete = 512;
}

enum ApplicationStatus {
  asOK = 0;
  asUninitialized = 1;
  asNoModelLoaded = 2;
  asLocked = 4;
}

enum AuxType {
  atNone = 0;
  atRsim = 1;
  atMeasure = 2;
  atSource = 4;
}

enum CanEventMsgType {
  CanEventMsgType_UNSPECIFIED = 0;
  cemtErrorFrame = 1;
  cemtActive = 2;
  cemtWarning = 4;
  cemtPassive = 8;
  cemtBusOff = 16;
  cemtWakeUp = 32;
  cemtOverrun = 64;
}

enum CANFaults2 {
  CANFaults2_UNSPECIFIED = 0;
  csfBreakH = 1;
  csfBreakL = 2;
  csfConnectHL = 4;
  csfConnectLH = 8;
  csfResistorH0 = 16;
  csfResistorH1 = 32;
  csfResistorH2 = 64;
  csfResistorL0 = 128;
  csfResistorL1 = 256;
  csfResistorL2 = 512;
}

enum CheckVariantOnActivation {
  cvaNoVariantCheck = 0;
  cvaYesStopOnUnknownVariant = 1;
  cvaYesIgnoreUnknownVariant = 2;
}

enum ChoosePathFlags {
  ChoosePathFlags_UNSPECIFIED = 0;
  cpfSave = 1;
  cpfFile = 2;
  cpfTestDocument = 4;
  cpfTestItem = 8;
  cpfMulti = 16;
}

enum ConnectionAux {
  ConnectionAux_UNSPECIFIED = 0;
  caRail0 = 1;
  caRail1 = 2;
  caRail2 = 8;
}

enum ConnectionAux2 {
  ConnectionAux2_UNSPECIFIED = 0;
  caRsim0 = 65536;
  caRsim1 = 131072;
  caRsim01 = 196608;
  caExtC = 1048576;
  caExtD = 2097152;
}

enum ConnectionBus {
  ConnectionBus_UNSPECIFIED = 0;
  cbA0toB0 = 1;
  cbA1toB1 = 2;
  cbA1toB0 = 4;
  cbA0toB1 = 8;
  cbA0toA1 = 256;
  cbB0toB1 = 512;
}

enum ConnectionCable {
  ConnectionCable_UNSPECIFIED = 0;
  ccRail0 = 1;
  ccRail1 = 2;
  ccBreakBeforeSC = 4;
  ccRail2 = 8;
  ccBreakAfterSC = 16;
  ccResistor = 32;
  ccCurrent = 64;
}

enum ConnectionCAN {
  ConnectionCAN_UNSPECIFIED = 0;
  ccnMemHSegH = 1;
  ccnMemLSegL = 2;
  ccnMemLSegH = 4;
  ccnMemHSegL = 8;
  ccnMemRHSegH = 16;
  ccnMemRLSegL = 32;
  ccnMemRHSegL = 64;
  ccnMemRLSegH = 128;
  ccnMemHMemL = 256;
  ccnSegHSegL = 512;
}

enum ConnectionCANMember {
  ccmSegment0 = 0;
  ccmNone = -1;
  ccmSegment1 = 1;
  ccmSegment2 = 2;
  ccmSegment3 = 3;
  ccmSegment4 = 4;
  ccmSegment5 = 5;
}

enum ConnectionMeasure {
  ConnectionMeasure_UNSPECIFIED = 0;
  cmMeasure1 = 1;
  cmMeasure2 = 2;
  cmMeasure3 = 4;
  cmMeasure4 = 8;
}

enum ConnectionRail {
  ConnectionRail_UNSPECIFIED = 0;
  crRail0 = 1;
  crRail1 = 2;
}

enum DataType {
  DataType_UNSPECIFIED = 0;
  dtInt8 = 268435457;
  dtUInt8 = 536870913;
  dtInt16 = 2;
  dtUInt16 = 268435458;
  dtInt32 = 4;
  dtUInt32 = 268435460;
  dtInt64 = 8;
  dtUInt64 = 268435464;
  dtFloat = 536870916;
  dtDouble = 536870920;
  dtTextWin1250 = 805307618;
  dtTextWin1251 = 805307619;
  dtTextWin1252 = 805307620;
  dtTextWin1253 = 805307621;
  dtTextWin1254 = 805307622;
  dtTextWin1255 = 805307623;
  dtTextWin1256 = 805307624;
  dtTextWin1257 = 805307625;
  dtTextWin1258 = 805307626;
  dtTextIso8859_1 = 805334959;
  dtTextIso8859_2 = 805334960;
  dtTextIso8859_3 = 805334961;
  dtTextIso8859_4 = 805334962;
  dtTextIso8859_5 = 805334963;
  dtTextIso8859_6 = 805334964;
  dtTextIso8859_7 = 805334965;
  dtTextIso8859_8 = 805334966;
  dtTextIso8859_9 = 805334967;
  dtTextIso8859_13 = 805334971;
  dtTextIso8859_15 = 805334973;
  dtTextUtf7 = 805371368;
  dtTextUtf8 = 805371369;
}

enum DgnDataType {
  ddtUnknown = 0;
  ddtAsciistring = 1;
  ddtBitfield = 2;
  ddtBoolean = 3;
  ddtBytefield = 4;
  ddtFloat32 = 5;
  ddtFloat64 = 6;
  ddtInt16 = 7;
  ddtInt32 = 8;
  ddtInt64 = 9;
  ddtInt8 = 10;
  ddtUInt16 = 11;
  ddtUInt32 = 12;
  ddtUInt64 = 13;
  ddtUInt8 = 14;
  ddtUnicode2String = 15;
  ddtField = 16;
  ddtMultiplexer = 17;
  ddtNoType = 18;
  ddtStructure = 19;
  ddtStructField = 20;
  ddtDTC = 21;
  ddtEndOfPDU = 22;
  ddtEnvData = 23;
  ddtEnvDataDesc = 24;
  ddtKey = 25;
  ddtLengthKey = 26;
  ddtTable = 27;
  ddtTableRow = 28;
  ddtTextTable = 29;
}

enum DltControlRequestServiceId {
  DltControlRequestServiceId_UNSPECIFIED = 0;
  dcrsiSetLogLevel = 1;
  dcrsiSetTraceStatus = 2;
  dcrsiGetLogInfo = 3;
  dcrsiGetDefaultLogLevel = 4;
  dcrsiStoreConfiguration = 5;
  dcrsiRestoreToFactoryDefault = 6;
  dcrsiSetComInterfaceStatus = 7;
  dcrsiSetComInterfaceMaxBandwidth = 8;
  dcrsiSetVerboseMode = 9;
  dcrsiSetMessageFiltering = 10;
  dcrsiSetTimingPackets = 11;
  dcrsiGetLocalTime = 12;
  dcrsiUseEcuId = 13;
  dcrsiUseSessionId = 14;
  dcrsiUseTimestamp = 15;
  dcrsiUseExtendedHeader = 16;
  dcrsiSetDefaultLogLevel = 17;
  dcrsiSetDefaultTraceStatus = 18;
  dcrsiGetSoftwareVersion = 19;
  dcrsiMessageBufferOverflow = 20;
  dcrsiGetDefaultTraceStatus = 21;
  dcrsiGetLogChannelNames = 23;
  dcrsiGetTraceStatus = 31;
  dcrsiSetLogChannelAssignment = 32;
  dcrsiSetLogChannelThreshold = 33;
  dcrsiGetLogChannelThreshold = 34;
  dcrsiBufferOverflowNotification = 35;
  dcrsiSyncTimeStamp = 36;
  dcrsiUnregisterContext = 3841;
  dcrsiConnectionInfo = 3842;
  dcrsiTimezone = 3843;
  dcrsiMarker = 3844;
  dcrsiOfflineLogstorage = 3845;
  dcrsiPassiveNodeConnect = 3846;
  dcrsiPassiveNodeConnectionStatus = 3847;
  dcrsiSetAllLogLevel = 3848;
  dcrsiSetAllTraceStatus = 3849;
}

enum ExecutionState {
  esUnknown = 0;
  esAllFailed = 1;
  esAllInvalidResponse = 2;
  esAllNegative = 3;
  esAllPositive = 4;
  esCanceledDuringExecution = 5;
  esCanceledFromQueue = 6;
  esFailed = 7;
  esInvalidResponse = 8;
  esNegative = 9;
}

enum FaultSimResetType {
  fsrtComplete = 0;
  fsrtWiring = 1;
  fsrtCAN = 2;
  fsrtWiringAndCAN = 3;
  fsrtBus = 4;
}

enum FaultSimResistor {
  fsrWiring = 0;
  fsrCANH = 1;
  fsrCANL = 2;
}

enum FlexRayBits {
  FlexRayBits_UNSPECIFIED = 0;
  frbStartup = 8;
  frbSync = 16;
  frbNull = 32;
  frbPayload = 64;
  frbValid = 4096;
  frbSyntaxError = 8192;
  frbContentError = 16384;
  frbBoundaryViolation = 32768;
}

enum HandlerOperation {
  HandlerOperation_UNSPECIFIED = 0;
  hoTestItemRename = 1;
  hoTestItemRenamePrefix = 2;
  hoTestItemSaveDescription = 3;
  hoTestItemSaveTestSpec = 4;
  hoTestItemSaveCode = 5;
  hoTestItemSetTypeName = 6;
  hoTestItemSetParameters = 7;
  hoTestDocumentAdd = 100;
  hoTestDocumentUpdate = 101;
  hoTestDocumentRename = 102;
  hoTestDocumentDelete = 103;
  hoTestResultRename = 200;
  hoTestResultSaveComment = 201;
  hoTestResultSetParameters = 202;
  hoTestResultSetValidated = 203;
  hoAttachmentAdd = 300;
  hoAttachmentUpdate = 301;
  hoAttachmentRename = 302;
  hoAttachmentDelete = 303;
}

enum ImportExportFlags {
  ImportExportFlags_UNSPECIFIED = 0;
  iefIncludeResults = 1;
  iefIncludeAttachments = 2;
  iefIncludeOldVersions = 4;
  iefNonBlocking = 8;
  iefIncludeLinkedResults = 16;
  iefIncludeLogs = 32;
  iefOverwrite = 64;
  iefRename = 128;
  iefRelink = 256;
  iefIncludeUsers = 512;
}

enum InterfaceType {
  InterfaceType_UNSPECIFIED = 0;
  itCAN = 1;
  itETH = 2;
}

enum IsoTpMsgStatus {
  itmsNoError = 0;
  itmsInvalidLength = 1;
  itmsUnexpectedSequenceNumber = 2;
  itmsAborted = 3;
}

enum J1939MsgStatus {
  jmsNoError = 0;
  jmsInvalidLength = 1;
  jmsUnexpectedSequenceNumber = 2;
  jmsAborted = 3;
}

enum KeywordType {
  ktNumber = 0;
  ktString = 1;
}

enum LinEventMsgType {
  LinEventMsgType_UNSPECIFIED = 0;
  lemtSyncError = 1;
  lemtError = 2;
  lemtWakeUp = 4;
  lemtSleep = 8;
}

enum LinMsgStatus {
  lmsNoError = 0;
  lmsCRCError = 1;
  lmsNoAnswer = 2;
}

enum LockFlags {
  lfDefault = 0;
  lfOverwrite = 1;
  lfOverwriteOnSameUser = 2;
}

enum MostEventMsgType {
  MostEventMsgType_UNSPECIFIED = 0;
  memtRxLightOff = 1;
  memtRxLightOn = 2;
  memtRxLightModulated = 4;
  memtTxLightOff = 8;
  memtTxLightOn = 16;
  memtTxLightModulated = 32;
  memtLocked = 64;
  memtUnlocked = 128;
}

enum MsgReceiveStatus {
  mrsSucceeded = 0;
  mrsQueueEmpty = 1;
  mrsQueueOverflow = 2;
  mrsInvalidMessage = 3;
}

enum PlotStyle {
  PlotStyle_UNSPECIFIED = 0;
  psLineSolid = 1;
  psLineStepYX = 2;
  psLineStepXY = 3;
  psLineDash = 4;
  psLineDot = 5;
  psLineDashDot = 6;
  psLineDashDotDot = 7;
  psPlotSquare = 65537;
  psPlotSolidSquare = 65538;
  psPlotAsterisk = 65539;
  psPlotDottedSquare = 65540;
  psPlotBoldSquare = 65541;
  psPlotSolidDiamond = 65542;
  psPlotSquareWithX = 65543;
  psPlotSquareWithCross = 65544;
  psPlotCircle = 65545;
  psPlotSolidCircle = 65546;
  psPlotDottedCircle = 65547;
  psPlotDottedSolidCircle = 65548;
  psPlotX = 65549;
  psPlotThickX = 65550;
  psPlotLittleX = 65551;
  psPlotCross = 65552;
  psPlotThickCross = 65553;
  psPlotLittleCross = 65554;
  psPlotLittleSquare = 65555;
  psPlotLittleSolidSquare = 65556;
  psPlotDot = 65557;
  psPlotDiamond = 65558;
}

enum ResponseType {
  rtUnknown = 0;
  rtGlobalNegResponse = 1;
  rtLocalNegResponse = 2;
  rtPositiveResponse = 3;
}

enum SequencerServerStatus {
  ssNotFound = 0;
  ssDeleted = 1;
  ssNormal = 2;
  ssStop = 3;
  ssStart = 4;
}

enum ServiceResultType {
  srtUnknown = 0;
  srtResponse = 1;
  srtRequest = 2;
  srtRequestAndResponse = 3;
}

enum SomeIpSdType {
  SomeIpSdType_UNSPECIFIED = 0;
  sistFind = 1;
  sistOffer = 2;
  sistStopOffer = 4;
  sistSubscribe = 8;
  sistStopSubscribe = 16;
  sistSubscribeAck = 32;
  sistSubscribeNoAck = 64;
}

enum TestItemKeepRelease {
  TestItemKeepRelease_UNSPECIFIED = 0;
  krParameter = 1;
  krDocument = 2;
  krDescription = 4;
  krTestSpec = 8;
  krNamePrefix = 16;
}

enum TestItemType {
  TestItemType_UNSPECIFIED = 0;
  titTMRoot = 1;
  titTrashFolder = 3;
  titUser = 4;
  titSystemTest = 5;
  titLibrary = 8;
  titTest = 9;
  titObject = 11;
  titClass = 13;
  titUserLibrary = 15;
  titProject = 16;
  titUserDefined = 17;
  titText = 18;
  titCSharp = 19;
}

enum TestResultAddAttachment {
  aaDatabase = 0;
  aaLink = 1;
}

enum TestResultFlags {
  TestResultFlags_UNSPECIFIED = 0;
  trfNotDeleted = 1;
  trfDeleted = 2;
}

enum TestResultValidated {
  trvdUnprocessed = 0;
  trvdValid = 1;
  trvdInvalid = 2;
  trvdInProcess = 3;
}

enum TestResultValue {
  trvFail = 0;
  trvUninitialized = -1;
  trvPass = 1;
  trvAbort = 2;
  trvSyntaxError = 10;
  trvIndifferent = 6;
  trvNotImplemented = 13;
  trvSkip = 5;
  trvTimeout = 7;
  trvRunning = 3;
}

enum TriggerType {
  ttNone = 0;
  ttRaisingEdge = 1;
  ttFallingEdge = 2;
  ttAnyEdge = 3;
  ttTestStart = 4;
}

enum ValueRangeInfo {
  ValueRangeInfo_UNSPECIFIED = 0;
  vriValueValid = 1538;
  vriValueNotDefined = 1539;
  vriValueNotAvailable = 1540;
  vriValueNotValid = 1541;
  vriValueNotInitialized = 1542;
  vriCodedToPhysicalFailed = 1543;
}